#!/usr/bin/env python

__authors__ = "Olivier Delalleau, Pascal Lamblin, Eric Larsen"
__contact__ = "delallea@iro"

"""
This script should behave the same as the `nosetests` command.

The reason for its existence is that on some systems, it may not be obvious to
find where nosetests is installed in order to run it in a different process.

It is also used to load the KnownFailure plugin, in order to hide
KnownFailureTests error messages. Use --without-knownfailure to
disable that plugin.

There are two additional local options: '--batch[=n]' and '--time-profile'.

If '--batch[=n]' is used without '--time-profile', this script will call
run_tests_in_batch.py` in order to run the tests by batches, not all at the
same time. The batches will comprise 100 elements each by default and
x elements if the option '=n' is specified.

If the '--time-profile' option is used, it will call `run_tests_in_batch.py`
with the option time_profile=True to conduct time-profiling of the tests.
(See 'help' function below for details.)  If also specified, '--batch[=n]'
option will be interpreted as an indication of the number of tests to be run
between notifications of progress to standard output.

`run_tests_in_batch.py` will in turn call back this script in another process
"""

import logging
_logger = logging.getLogger('theano.bin.theano-nose')
_logger.setLevel(logging.WARN)

import nose
import textwrap
import sys


def main():
    # Handle --batch[=n] arguments
    batch_args = [arg for arg in sys.argv if arg.startswith('--batch')]
    for arg in batch_args:
        sys.argv.remove(arg)
    batch_size = None    
    if len(batch_args):
        if len(batch_args) > 1:
            _logger.warn(
                'Multiple --batch arguments detected, using the last one '
                'and ignoring the first ones.')

        batch_arg = batch_args[-1]
        elems = batch_arg.split('=', 1)
        if len(elems) == 2:
            batch_size = int(elems[1])

    # Handle --time_prof arguments
    time_prof_args = [arg for arg in sys.argv if arg=='--time-profile']
    for arg in time_prof_args:
        sys.argv.remove(arg)
            
    # Time-profiling and batch modes
    if len(time_prof_args) or len(batch_args):
        from theano.tests import run_tests_in_batch
        return run_tests_in_batch.main(batch_size=batch_size,
                            time_profile=len(time_prof_args) > 0)

    # Non-batch mode.
    addplugins = []
    # We include KnownFailure plugin by default, unless
    # it is disabled by the "--without-knownfailure" arg.
    if '--without-knownfailure' not in sys.argv:
        try:
            from numpy.testing.noseclasses import KnownFailure
            addplugins.append(KnownFailure())
        except ImportError:
            _logger.warn(
                'KnownFailure plugin from NumPy could not be imported. '
                'Use --without-knownfailure to disable this warning.')
    else:
        sys.argv.remove('--without-knownfailure')

    return nose.main(addplugins=addplugins)


def help():
    help_msg = """
        This script behaves mostly the same as the `nosetests` command.

        The main difference is that it loads automatically the
        KnownFailure plugin, in order to hide KnownFailureTests error
        messages. It also supports executing tests by batches.

        Local options:

            --batch[=n]:
                If specified without option '--time-profile'', do not run all
                the tests in one run, but split the execution in batches of
                `n` tests each. Default n is 100.

            --time-profile:
                Each test will be run and timed separately and the results will
                be deposited in the files 'timeprof_sort', 'timeprof_nosort'
                and 'timeprof_rawlog' in the current directory. If the
                '--batch[=n]' option is also specified, notification of the
                progresses will be made to standard output after every group of
                n tests.  Otherwise, notification will occur after every group
                of 100 tests.
    
                The files 'timeprof_sort' and 'timeprof_nosort' both contain one
                record for each test and comprise the following fields:
                - test running-time
                - nosetests sequential test number
                - test name
                - name of class to which test belongs (if any), otherwise full
                  information is contained in test name
                - test outcome ('OK', 'FAILED TEST' or 'FAILED PARSING')
    
                In 'timeprof_sort', test records are sorted according to
                running-time whereas in 'timeprof_nosort' records are reported
                according to sequential number. The former classification is the
                main information source for time-profiling. Since tests belonging
                to same or close classes and files have close sequential, the
                latter may be used to identify duration patterns among the tests
                numbers. A full log is also saved as 'timeprof_rawlog'.
    
            --help, -h: Displays this help.

            --without-knownfailure: Do not load the KnownFailure plugin.

        The other options will be passed to nosetests, see ``nosetests -h``.
        """

    print textwrap.dedent(help_msg)


if __name__ == '__main__':
    if '--help' in sys.argv or '-h' in sys.argv:
        help()
    else:
        result = main()
        sys.exit(result)
