ctheano.compile.function_module
_constructor_Function
p0
(ctheano.compile.function_module
_constructor_FunctionMaker
p1
((dp2
S'profile'
p3
NsS'function_builder'
p4
ctheano.compile.function_module
Function
p5
sS'inputs'
p6
(lp7
ccopy_reg
_reconstructor
p8
(ctheano.compile.io
In
p9
c__builtin__
object
p10
Ntp11
Rp12
(dp13
S'name'
p14
S'x'
p15
sS'update'
p16
NsS'value'
p17
NsS'borrow'
p18
NsS'strict'
p19
I00
sS'implicit'
p20
I00
sS'mutable'
p21
I00
sS'variable'
p22
g8
(ctheano.tensor.var
TensorVariable
p23
g10
Ntp24
Rp25
(dp26
S'auto_name'
p27
S'auto_115'
p28
sS'index'
p29
NsS'tag'
p30
(itheano.gof.utils
scratchpad
p31
(dp32
S'trace'
p33
(lp34
(lp35
(S'pickle_pool.py'
p36
I5
S'<module>'
p37
S"x = tensor.tensor4('x')"
p38
tp39
aasbsg14
g15
sS'owner'
p40
NsS'type'
p41
g8
(ctheano.tensor.type
TensorType
p42
g10
Ntp43
Rp44
(dp45
S'broadcastable'
p46
(I00
I00
I00
I00
tp47
sS'dtype'
p48
S'float32'
p49
sS'numpy_dtype'
p50
cnumpy
dtype
p51
(S'f4'
p52
I0
I1
tp53
Rp54
(I3
S'<'
p55
NNNI-1
I-1
I0
tp56
bsS'sparse_grad'
p57
I00
sg14
NsbsbsS'shared'
p58
I00
sS'allow_downcast'
p59
NsbasS'fgraph'
p60
g8
(ctheano.gof.fg
FunctionGraph
p61
g10
Ntp62
Rp63
(dp64
g3
Nsg6
(lp65
g8
(g23
g10
Ntp66
Rp67
(dp68
g29
Nsg14
g15
sg60
g63
sS'clients'
p69
(lp70
(g8
(ctheano.gof.graph
Apply
p71
g10
Ntp72
Rp73
(dp74
g6
(lp75
g67
asg60
g63
sS'outputs'
p76
(lp77
g8
(ctheano.sandbox.cuda.var
CudaNdarrayVariable
p78
g10
Ntp79
Rp80
(dp81
g29
I0
sg14
Nsg60
g63
sg69
(lp82
(g8
(g71
g10
Ntp83
Rp84
(dp85
g6
(lp86
g80
asg60
g63
sg76
(lp87
g8
(g78
g10
Ntp88
Rp89
(dp90
g29
I0
sg14
Nsg60
g63
sg69
(lp91
(g8
(g71
g10
Ntp92
Rp93
(dp94
g6
(lp95
g89
ag8
(ctheano.gof.graph
Variable
p96
g10
Ntp97
Rp98
(dp99
g29
I0
sg14
Nsg60
g63
sg69
(lp100
(g93
I1
tp101
a(g8
(g71
g10
Ntp102
Rp103
(dp104
g6
(lp105
g89
ag8
(g78
g10
Ntp106
Rp107
(dp108
g29
I0
sg14
Nsg60
g63
sg69
(lp109
(g103
I1
tp110
a(g8
(g71
g10
Ntp111
Rp112
(dp113
g6
(lp114
g8
(ctheano.sandbox.cuda.var
CudaNdarrayConstant
p115
g10
Ntp116
Rp117
(dp118
g29
Nsg14
Nsg60
g63
sg41
g8
(ctheano.sandbox.cuda.type
CudaNdarrayType
p119
g10
Ntp120
Rp121
(dp122
g46
(I01
I01
I01
I01
tp123
sg14
Nsbsg69
(lp124
(g112
I0
tp125
asg27
S'auto_812'
p126
sg30
(itheano.gof.utils
scratchpad
p127
(dp128
g33
(lp129
sbsS'data'
p130
ctheano.sandbox.cuda.type
CudaNdarray_unpickler
p131
(cnumpy.core.multiarray
_reconstruct
p132
(cnumpy
ndarray
p133
(I0
tp134
S'b'
p135
tp136
Rp137
(I1
(I1
I1
I1
I1
tp138
g54
I00
S'\x00\x00\x00@'
p139
tp140
btp141
Rp142
sbag107
ag8
(g78
g10
Ntp143
Rp144
(dp145
g29
I0
sg14
Nsg60
g63
sg69
(lp146
(g112
I2
tp147
asg27
S'auto_817'
p148
sg30
(itheano.gof.utils
scratchpad
p149
(dp150
g33
(lp151
sbsg40
g8
(g71
g10
Ntp152
Rp153
(dp154
g6
(lp155
g8
(g78
g10
Ntp156
Rp157
(dp158
g29
I0
sg14
Nsg60
g63
sg69
(lp159
(g153
I0
tp160
asg27
S'auto_819'
p161
sg30
(itheano.gof.utils
scratchpad
p162
(dp163
g33
(lp164
sbsg40
g8
(g71
g10
Ntp165
Rp166
(dp167
g6
(lp168
g8
(g78
g10
Ntp169
Rp170
(dp171
g29
I0
sg14
Nsg60
g63
sg69
(lp172
(g166
I0
tp173
asg27
S'auto_823'
p174
sg30
(itheano.gof.utils
scratchpad
p175
(dp176
g33
(lp177
sbsg40
g8
(g71
g10
Ntp178
Rp179
(dp180
g6
(lp181
g8
(g78
g10
Ntp182
Rp183
(dp184
g29
I0
sg14
Nsg60
g63
sg69
(lp185
(g179
I0
tp186
a(g8
(g71
g10
Ntp187
Rp188
(dp189
g6
(lp190
g183
ag8
(ctheano.scalar.basic
ScalarConstant
p191
g10
Ntp192
Rp193
(dp194
g29
Nsg14
Nsg60
g63
sg41
g8
(ctheano.scalar.basic
Scalar
p195
g10
Ntp196
Rp197
(dp198
g48
S'int64'
p199
sbsg69
(lp200
(g188
I1
tp201
asg27
S'auto_443'
p202
sg30
(itheano.gof.utils
scratchpad
p203
(dp204
bsg130
cnumpy.core.multiarray
scalar
p205
(g51
(S'i8'
p206
I0
I1
tp207
Rp208
(I3
S'<'
p209
NNNI-1
I-1
I0
tp210
bS'\x00\x00\x00\x00\x00\x00\x00\x00'
p211
tp212
Rp213
sbasg60
g63
sg76
(lp214
g8
(g78
g10
Ntp215
Rp216
(dp217
g29
I0
sg14
Nsg60
g63
sg69
(lp218
(g8
(g71
g10
Ntp219
Rp220
(dp221
g6
(lp222
g216
asg60
g63
sg76
(lp223
g8
(g78
g10
Ntp224
Rp225
(dp226
g29
I0
sg14
Nsg60
g63
sg69
(lp227
(g153
I3
tp228
asg27
S'auto_837'
p229
sg30
(itheano.gof.utils
scratchpad
p230
(dp231
g33
(lp232
sbsg40
g220
sg41
g8
(g119
g10
Ntp233
Rp234
(dp235
g46
(I01
I01
I01
I01
tp236
sg14
Nsbsbasg30
(itheano.gof.utils
scratchpad
p237
(dp238
bsS'deps'
p239
(dp240
sS'op'
p241
g8
(ctheano.sandbox.cuda.basic_ops
GpuDimShuffle
p242
g10
Ntp243
Rp244
(dp245
S'view_map'
p246
(dp247
I0
(lp248
I0
assS'augment'
p249
(lp250
I0
aI1
aI2
aI3
asS'shuffle'
p251
(lp252
sS'_op_use_c_code'
p253
S'/usr/bin/g++'
p254
sS'input_broadcastable'
p255
(tsS'new_order'
p256
(g15
g15
g15
g15
tp257
sbsbI0
tp258
asg27
S'auto_841'
p259
sg30
(itheano.gof.utils
scratchpad
p260
(dp261
g33
(lp262
sbsg40
g188
sg41
g8
(g119
g10
Ntp263
Rp264
(dp265
g46
(tsg14
Nsbsbasg30
(itheano.gof.utils
scratchpad
p266
(dp267
bsg239
(dp268
sg241
g8
(ctheano.sandbox.cuda.basic_ops
GpuSubtensor
p269
g10
Ntp270
Rp271
(dp272
S'idx_list'
p273
(g197
tp274
sg253
g254
sbsbI0
tp275
a(g8
(g71
g10
Ntp276
Rp277
(dp278
g6
(lp279
g183
ag8
(g191
g10
Ntp280
Rp281
(dp282
g29
Nsg14
Nsg60
g63
sg41
g197
sg69
(lp283
(g277
I1
tp284
asg27
S'auto_445'
p285
sg30
(itheano.gof.utils
scratchpad
p286
(dp287
bsg130
g205
(g208
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p288
tp289
Rp290
sbasg60
g63
sg76
(lp291
g8
(g78
g10
Ntp292
Rp293
(dp294
g29
I0
sg14
Nsg60
g63
sg69
(lp295
(g8
(g71
g10
Ntp296
Rp297
(dp298
g6
(lp299
g293
asg60
g63
sg76
(lp300
g8
(g78
g10
Ntp301
Rp302
(dp303
g29
I0
sg14
Nsg60
g63
sg69
(lp304
(g153
I2
tp305
asg27
S'auto_831'
p306
sg30
(itheano.gof.utils
scratchpad
p307
(dp308
g33
(lp309
sbsg40
g297
sg41
g8
(g119
g10
Ntp310
Rp311
(dp312
g46
(I01
I01
I01
I01
tp313
sg14
Nsbsbasg30
(itheano.gof.utils
scratchpad
p314
(dp315
bsg239
(dp316
sg241
g8
(g242
g10
Ntp317
Rp318
(dp319
g246
(dp320
I0
(lp321
I0
assg249
(lp322
I0
aI1
aI2
aI3
asg251
(lp323
sg253
g254
sg255
(tsg256
g257
sbsbI0
tp324
asg27
S'auto_835'
p325
sg30
(itheano.gof.utils
scratchpad
p326
(dp327
g33
(lp328
sbsg40
g277
sg41
g8
(g119
g10
Ntp329
Rp330
(dp331
g46
(tsg14
Nsbsbasg30
(itheano.gof.utils
scratchpad
p332
(dp333
bsg239
(dp334
sg241
g8
(g269
g10
Ntp335
Rp336
(dp337
g273
(g197
tp338
sg253
g254
sbsbI0
tp339
a(g8
(g71
g10
Ntp340
Rp341
(dp342
g6
(lp343
g183
ag8
(g191
g10
Ntp344
Rp345
(dp346
g29
Nsg14
Nsg60
g63
sg41
g197
sg69
(lp347
(g341
I1
tp348
asg27
S'auto_447'
p349
sg30
(itheano.gof.utils
scratchpad
p350
(dp351
bsg130
g205
(g208
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p352
tp353
Rp354
sbasg60
g63
sg76
(lp355
g8
(g78
g10
Ntp356
Rp357
(dp358
g29
I0
sg14
Nsg60
g63
sg69
(lp359
(g8
(g71
g10
Ntp360
Rp361
(dp362
g6
(lp363
g357
asg60
g63
sg76
(lp364
g8
(g78
g10
Ntp365
Rp366
(dp367
g29
I0
sg14
Nsg60
g63
sg69
(lp368
(g153
I1
tp369
asg27
S'auto_825'
p370
sg30
(itheano.gof.utils
scratchpad
p371
(dp372
g33
(lp373
sbsg40
g361
sg41
g8
(g119
g10
Ntp374
Rp375
(dp376
g46
(I01
I01
I01
I01
tp377
sg14
Nsbsbasg30
(itheano.gof.utils
scratchpad
p378
(dp379
bsg239
(dp380
sg241
g8
(g242
g10
Ntp381
Rp382
(dp383
g246
(dp384
I0
(lp385
I0
assg249
(lp386
I0
aI1
aI2
aI3
asg251
(lp387
sg253
g254
sg255
(tsg256
g257
sbsbI0
tp388
asg27
S'auto_829'
p389
sg30
(itheano.gof.utils
scratchpad
p390
(dp391
g33
(lp392
sbsg40
g341
sg41
g8
(g119
g10
Ntp393
Rp394
(dp395
g46
(tsg14
Nsbsbasg30
(itheano.gof.utils
scratchpad
p396
(dp397
bsg239
(dp398
sg241
g8
(g269
g10
Ntp399
Rp400
(dp401
g273
(g197
tp402
sg253
g254
sbsbI0
tp403
asg27
S'auto_820'
p404
sg30
(itheano.gof.utils
scratchpad
p405
(dp406
g33
(lp407
sbsg40
g8
(g71
g10
Ntp408
Rp409
(dp410
g6
(lp411
g8
(g23
g10
Ntp412
Rp413
(dp414
g29
I0
sg14
Nsg60
g63
sg69
(lp415
(g409
I0
tp416
asg27
S'auto_442'
p417
sg30
(itheano.gof.utils
scratchpad
p418
(dp419
g33
(lp420
(lp421
(g36
I8
g37
S'grad_x = theano.grad((pooled_x**2).mean(), x)'
p422
tp423
aasbsg40
g8
(g71
g10
Ntp424
Rp425
(dp426
g6
(lp427
g8
(g23
g10
Ntp428
Rp429
(dp430
g29
I0
sg14
Nsg60
g63
sg69
(lp431
(g425
I0
tp432
asg27
S'auto_590'
p433
sg30
(itheano.gof.utils
scratchpad
p434
(dp435
g33
(lp436
(lp437
(g36
I8
g37
S'grad_x = theano.grad((pooled_x**2).mean(), x)'
p438
tp439
aasbsg40
g8
(g71
g10
Ntp440
Rp441
(dp442
g6
(lp443
g8
(g23
g10
Ntp444
Rp445
(dp446
g29
I0
sg14
Nsg60
g63
sg69
(lp447
(g441
I0
tp448
asg27
S'auto_470'
p449
sg30
(itheano.gof.utils
scratchpad
p450
(dp451
g33
(lp452
sbsg40
g8
(g71
g10
Ntp453
Rp454
(dp455
g6
(lp456
g67
asg60
g63
sg76
(lp457
g445
asg30
(itheano.gof.utils
scratchpad
p458
(dp459
bsg239
(dp460
sg241
g8
(ctheano.compile.ops
Shape_i
p461
g10
Ntp462
Rp463
(dp464
S'i'
p465
I0
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp466
Rp467
(dp468
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbag8
(g23
g10
Ntp469
Rp470
(dp471
g29
I0
sg14
Nsg60
g63
sg69
(lp472
(g441
I1
tp473
asg27
S'auto_471'
p474
sg30
(itheano.gof.utils
scratchpad
p475
(dp476
g33
(lp477
sbsg40
g8
(g71
g10
Ntp478
Rp479
(dp480
g6
(lp481
g67
asg60
g63
sg76
(lp482
g470
asg30
(itheano.gof.utils
scratchpad
p483
(dp484
bsg239
(dp485
sg241
g8
(g461
g10
Ntp486
Rp487
(dp488
g465
I1
sg253
g254
sbsbsg41
g467
sbag8
(g23
g10
Ntp489
Rp490
(dp491
g29
I0
sg14
Nsg60
g63
sg69
(lp492
(g441
I2
tp493
asg27
S'auto_910'
p494
sg30
(itheano.gof.utils
scratchpad
p495
(dp496
g33
(lp497
sbsg40
g8
(g71
g10
Ntp498
Rp499
(dp500
g6
(lp501
g8
(ctheano.tensor.var
TensorConstant
p502
g10
Ntp503
Rp504
(dp505
g29
Nsg14
Nsg60
g63
sg41
g8
(g42
g10
Ntp506
Rp507
(dp508
g46
(tsg48
S'int64'
p509
sg50
g208
sg57
I00
sg14
Nsbsg69
(lp510
(g8
(g71
g10
Ntp511
Rp512
(dp513
g6
(lp514
g504
ag8
(g23
g10
Ntp515
Rp516
(dp517
g29
I0
sg14
Nsg60
g63
sg69
(lp518
(g512
I1
tp519
asg27
S'auto_473'
p520
sg30
(itheano.gof.utils
scratchpad
p521
(dp522
g33
(lp523
sbsg40
g8
(g71
g10
Ntp524
Rp525
(dp526
g6
(lp527
g67
asg60
g63
sg76
(lp528
g516
asg30
(itheano.gof.utils
scratchpad
p529
(dp530
bsg239
(dp531
sg241
g8
(g461
g10
Ntp532
Rp533
(dp534
g465
I3
sg253
g254
sbsbsg41
g467
sbasg30
(itheano.gof.utils
scratchpad
p535
(dp536
bsg239
(dp537
sg60
g63
sg76
(lp538
g8
(g23
g10
Ntp539
Rp540
(dp541
g29
I0
sg14
Nsg60
g63
sg69
(lp542
(g441
I3
tp543
asg27
S'auto_906'
p544
sg30
(itheano.gof.utils
scratchpad
p545
(dp546
g33
(lp547
sbsg40
g512
sg41
g8
(g42
g10
Ntp548
Rp549
(dp550
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbasg241
g8
(ctheano.tensor.elemwise
Elemwise
p551
g10
Ntp552
Rp553
(dp554
g14
NsS'scalar_op'
p555
g8
(ctheano.scalar.basic
Add
p556
g10
Ntp557
Rp558
(dp559
S'output_types_preference'
p560
g8
(ctheano.scalar.basic
transfer_type
p561
g10
Ntp562
Rp563
(dp564
S'transfer'
p565
(I1
tp566
sbsg253
g254
sg14
NsbsS'destroy_map'
p567
(dp568
I0
(lp569
I1
assS'nfunc_spec'
p570
(S'add'
p571
I2
I1
tp572
sS'inplace_pattern'
p573
(dp574
I0
I1
ssS'openmp'
p575
I00
sg253
g254
sbsbI0
tp576
a(g499
I0
tp577
asg27
S'auto_768'
p578
sg30
(itheano.gof.utils
scratchpad
p579
(dp580
S'unique_value'
p581
Nsbsg130
g132
(g133
(I0
tp582
g135
tp583
Rp584
(I1
(tg208
I00
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p585
tp586
bsbag8
(g23
g10
Ntp587
Rp588
(dp589
g29
I0
sg14
Nsg60
g63
sg69
(lp590
(g499
I1
tp591
asg27
S'auto_472'
p592
sg30
(itheano.gof.utils
scratchpad
p593
(dp594
g33
(lp595
sbsg40
g8
(g71
g10
Ntp596
Rp597
(dp598
g6
(lp599
g67
asg60
g63
sg76
(lp600
g588
asg30
(itheano.gof.utils
scratchpad
p601
(dp602
bsg239
(dp603
sg241
g8
(g461
g10
Ntp604
Rp605
(dp606
g465
I2
sg253
g254
sbsbsg41
g467
sbasg30
(itheano.gof.utils
scratchpad
p607
(dp608
bsg239
(dp609
sg60
g63
sg76
(lp610
g490
asg241
g8
(g551
g10
Ntp611
Rp612
(dp613
g14
Nsg555
g8
(g556
g10
Ntp614
Rp615
(dp616
g560
g8
(g561
g10
Ntp617
Rp618
(dp619
g565
(I1
tp620
sbsg253
g254
sg14
Nsbsg567
(dp621
I0
(lp622
I1
assg570
g572
sg573
(dp623
I0
I1
ssg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp624
Rp625
(dp626
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbag540
asg60
g63
sg76
(lp627
g429
asg30
(itheano.gof.utils
scratchpad
p628
(dp629
bsg239
(dp630
sg241
g8
(ctheano.tensor.opt
MakeVector
p631
g10
Ntp632
Rp633
(dp634
g48
g199
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp635
Rp636
(dp637
g46
(I00
tp638
sg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp639
g413
asg30
(itheano.gof.utils
scratchpad
p640
(dp641
bsg239
(dp642
sg241
g8
(g551
g10
Ntp643
Rp644
(dp645
S'__module__'
p646
S'tensor.basic'
p647
sg14
Nsg555
g8
(ctheano.scalar.basic
Cast
p648
g10
Ntp649
Rp650
(dp651
g560
g8
(ctheano.scalar.basic
specific_out
p652
g10
Ntp653
Rp654
(dp655
S'spec'
p656
(g8
(g195
g10
Ntp657
Rp658
(dp659
g48
S'float32'
p660
sbtp661
sbsg253
g254
sS'o_type'
p662
g658
sg14
S'convert_to_float32'
p663
sS'ctor'
p664
cnumpy
float32
p665
sbsg567
(dp666
sg570
Nsg573
(dp667
sS'__oplist_tags'
p668
(lp669
S'casting'
p670
asg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp671
Rp672
(dp673
g46
(I00
tp674
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp675
g183
asg30
(itheano.gof.utils
scratchpad
p676
(dp677
bsg239
(dp678
sg241
g8
(ctheano.sandbox.cuda.basic_ops
GpuFromHost
p679
g10
Ntp680
Rp681
(dp682
g253
g254
sbsbsg41
g8
(g119
g10
Ntp683
Rp684
(dp685
g46
(I00
tp686
sg14
Nsbsbag8
(g191
g10
Ntp687
Rp688
(dp689
g29
Nsg14
Nsg60
g63
sg41
g197
sg69
(lp690
(g179
I1
tp691
asg27
S'auto_449'
p692
sg30
(itheano.gof.utils
scratchpad
p693
(dp694
bsg130
g205
(g208
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p695
tp696
Rp697
sbasg60
g63
sg76
(lp698
g170
asg30
(itheano.gof.utils
scratchpad
p699
(dp700
bsg239
(dp701
sg241
g8
(g269
g10
Ntp702
Rp703
(dp704
g273
(g197
tp705
sg253
g254
sbsbsg41
g8
(g119
g10
Ntp706
Rp707
(dp708
g46
(tsg14
Nsbsbasg60
g63
sg76
(lp709
g157
asg30
(itheano.gof.utils
scratchpad
p710
(dp711
bsg239
(dp712
sg241
g8
(g242
g10
Ntp713
Rp714
(dp715
g246
(dp716
I0
(lp717
I0
assg249
(lp718
I0
aI1
aI2
aI3
asg251
(lp719
sg253
g254
sg255
(tsg256
g257
sbsbsg41
g8
(g119
g10
Ntp720
Rp721
(dp722
g46
(I01
I01
I01
I01
tp723
sg14
Nsbsbag366
ag302
ag225
asg60
g63
sg76
(lp724
g144
asg30
(itheano.gof.utils
scratchpad
p725
(dp726
bsg239
(dp727
sg241
g8
(ctheano.sandbox.cuda.basic_ops
GpuElemwise
p728
g10
Ntp729
Rp730
(dp731
g573
(dp732
sg253
g254
sg555
g8
(ctheano.scalar.basic
Mul
p733
g10
Ntp734
Rp735
(dp736
g560
ctheano.scalar.basic
upcast_out
p737
sg253
g254
sg14
S'mul'
p738
sbsS'sync'
p739
I01
sg567
(dp740
sS'src_generator'
p741
g8
(ctheano.sandbox.cuda.elemwise
NaiveAlgo
p742
g10
Ntp743
Rp744
(dp745
g555
g735
sg739
I01
sg573
g732
sbsbsbsg41
g8
(g119
g10
Ntp746
Rp747
(dp748
g46
(I01
I01
I01
I01
tp749
sg14
Nsbsbasg60
g63
sg76
(lp750
g8
(g78
g10
Ntp751
Rp752
(dp753
g29
I0
sg14
Nsg60
g63
sg69
(lp754
(g8
(g71
g10
Ntp755
Rp756
(dp757
g6
(lp758
g752
asg60
g63
sg76
(lp759
g8
(g78
g10
Ntp760
Rp761
(dp762
g29
I0
sg14
Nsg60
g63
sg69
(lp763
(g103
I2
tp764
asg27
S'auto_466'
p765
sg30
(itheano.gof.utils
scratchpad
p766
(dp767
g33
(lp768
(lp769
(S'/u/devries/Documents/Theano/theano/gradient.py'
p770
I1113
S'access_term_cache'
p771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p772
tp773
aasbsg40
g756
sg41
g8
(g119
g10
Ntp774
Rp775
(dp776
g46
(I00
I00
I00
I00
tp777
sg14
Nsbsbasg30
(itheano.gof.utils
scratchpad
p778
(dp779
bsg239
(dp780
sg241
g8
(ctheano.sandbox.cuda.basic_ops
GpuContiguous
p781
g10
Ntp782
Rp783
(dp784
g253
g254
sbsbI0
tp785
asg27
S'auto_862'
p786
sg30
(itheano.gof.utils
scratchpad
p787
(dp788
g33
(lp789
sbsg40
g112
sg41
g8
(g119
g10
Ntp790
Rp791
(dp792
g46
(I00
I00
I00
I00
tp793
sg14
Nsbsbasg30
(itheano.gof.utils
scratchpad
p794
(dp795
bsg239
(dp796
sg241
g8
(g728
g10
Ntp797
Rp798
(dp799
g573
(dp800
sg253
g254
sg555
g8
(ctheano.scalar.basic
Composite
p801
g10
Ntp802
Rp803
(dp804
g6
(lp805
g8
(ctheano.scalar.basic
ScalarVariable
p806
g10
Ntp807
Rp808
(dp809
g27
S'auto_852'
p810
sg29
Nsg30
(itheano.gof.utils
scratchpad
p811
(dp812
bsg14
Nsg40
Nsg41
g658
sbag8
(g806
g10
Ntp813
Rp814
(dp815
g27
S'auto_853'
p816
sg29
Nsg30
(itheano.gof.utils
scratchpad
p817
(dp818
bsg14
Nsg40
Nsg41
g658
sbag8
(g806
g10
Ntp819
Rp820
(dp821
g27
S'auto_854'
p822
sg29
Nsg30
(itheano.gof.utils
scratchpad
p823
(dp824
bsg14
Nsg40
Nsg41
g658
sbasS'nodenames'
p825
(lp826
S'%(nodename)s_subnode0'
p827
aS'%(nodename)s_subnode1'
p828
asS'nin'
p829
I3
sg14
S'Composite{((i0 * i1) / i2)}'
p830
sS'inputs_type'
p831
(g658
g658
g658
tp832
sg76
(lp833
g8
(g806
g10
Ntp834
Rp835
(dp836
g27
S'auto_856'
p837
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p838
(dp839
g33
(lp840
sbsg14
Nsg40
g8
(g71
g10
Ntp841
Rp842
(dp843
g6
(lp844
g8
(g806
g10
Ntp845
Rp846
(dp847
g27
S'auto_855'
p848
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p849
(dp850
g33
(lp851
sbsg14
Nsg40
g8
(g71
g10
Ntp852
Rp853
(dp854
g6
(lp855
g808
ag814
asg30
(itheano.gof.utils
scratchpad
p856
(dp857
bsg76
(lp858
g846
asg241
g735
sbsg41
g658
sbag820
asg30
(itheano.gof.utils
scratchpad
p859
(dp860
bsg76
(lp861
g835
asg241
g8
(ctheano.scalar.basic
TrueDiv
p862
g10
Ntp863
Rp864
(dp865
g560
g737
sg253
g254
sg14
S'true_div'
p866
sbsbsg41
g658
sbasS'_c_code'
p867
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp1 / %(i2)s;\n}\n'
p868
sS'outputs_type'
p869
(g658
tp870
sg253
g254
sS'nout'
p871
I1
sbsg739
I01
sg567
(dp872
sg741
g8
(g742
g10
Ntp873
Rp874
(dp875
g555
g803
sg739
I01
sg573
g800
sbsbsbI1
tp876
asg27
S'auto_435'
p877
sg30
(itheano.gof.utils
scratchpad
p878
(dp879
g33
(lp880
(lp881
(g36
I7
g37
S'x, ws=(2, 2))'
p882
tp883
aasbsg40
g93
sg41
g8
(g119
g10
Ntp884
Rp885
(dp886
g46
(I00
I00
I00
I00
tp887
sg14
Nsbsbag761
ag98
asg60
g63
sg76
(lp888
g8
(g78
g10
Ntp889
Rp890
(dp891
g29
I0
sg14
Nsg60
g63
sg69
(lp892
(g8
(g71
g10
Ntp893
Rp894
(dp895
g6
(lp896
g890
asg60
g63
sg76
(lp897
g8
(g23
g10
Ntp898
Rp899
(dp900
g29
I0
sg14
S'(dmean/dx)'
p901
sg60
g63
sg69
(lp902
(S'output'
p903
I0
tp904
asg27
S'auto_468'
p905
sg30
(itheano.gof.utils
scratchpad
p906
(dp907
g33
(lp908
(lp909
(g770
I1113
g771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p910
tp911
aasbsg40
g894
sg41
g8
(g42
g10
Ntp912
Rp913
(dp914
g46
(I00
I00
I00
I00
tp915
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg30
(itheano.gof.utils
scratchpad
p916
(dp917
bsg239
(dp918
sg241
g8
(ctheano.sandbox.cuda.basic_ops
HostFromGpu
p919
g10
Ntp920
Rp921
(dp922
g253
g254
sbsbI0
tp923
asg27
S'auto_467'
p924
sg30
(itheano.gof.utils
scratchpad
p925
(dp926
g33
(lp927
(lp928
(g770
I1113
g771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p929
tp930
aasbsg40
g103
sg41
g885
sbasg30
(itheano.gof.utils
scratchpad
p931
(dp932
bsg239
(dp933
sg241
g8
(ctheano.sandbox.cuda.dnn
GpuDnnPoolGrad
p934
g10
Ntp935
Rp936
(dp937
S'func_name'
p938
Nsg253
g254
sS'func_codes'
p939
(lp940
S'#section support_code\nstatic cudnnHandle_t _handle = NULL;\n\n\nstatic int\nc_set_tensorNd(CudaNdarray *var, cudnnTensorDescriptor_t desc) {\n\n  int dim = CudaNdarray_NDIM(var);\n  int *strides = (int *)malloc(dim * sizeof(int));\n  int default_str = 1;\n  int return_value = 0;\n  \n  if (strides != NULL) {\n    for (int i = dim-1; i >= 0; i--)\n    {\n      if (CudaNdarray_HOST_STRIDES(var)[i])\n        strides[i] = CudaNdarray_HOST_STRIDES(var)[i];\n      else\n        strides[i] = default_str;\n      default_str *= CudaNdarray_HOST_DIMS(var)[i];\n    }\n    \n    cudnnStatus_t err = cudnnSetTensorNdDescriptor(desc, CUDNN_DATA_FLOAT, dim,\n                                                   CudaNdarray_HOST_DIMS(var),\n                                                   strides);\n  \t \t\t\t\t\t\t\t\t\t\n    \n    if (err != CUDNN_STATUS_SUCCESS) {\n      PyErr_Format(PyExc_RuntimeError,\n\t\t  "Could not set tensorNd descriptor: %s"\n\t\t  "dim=%d",\n\t\t  cudnnGetErrorString(err), dim);\n\t\t  \n\t  return_value = -1;\n    }\n  } else {\n    PyErr_Format(PyExc_MemoryError,\n\t\t"Could not allocate memory for strides array of size %d.",\n\t\tdim);\n\t\t\n    return_value = -1;  \n  }\n    \n  free(strides);\n  return return_value;\n}\n\n\nstatic int\nc_set_filterNd(CudaNdarray *var, cudnnFilterDescriptor_t desc) {\n  if (!CudaNdarray_is_c_contiguous(var)) {\n    PyErr_SetString(PyExc_ValueError,\n\t\t    "Only contiguous filters (kernels) are supported.");\n    return -1;\n  }\n  int dim = CudaNdarray_NDIM(var);\n  cudnnStatus_t err = cudnnSetFilterNdDescriptor(desc, CUDNN_DATA_FLOAT, dim,\n                                                 CudaNdarray_HOST_DIMS(var));\n  if (err != CUDNN_STATUS_SUCCESS) {\n    PyErr_Format(PyExc_RuntimeError,\n\t\t "Could not set filter descriptor: %s."\n\t\t " dims= %d",\n\t\t cudnnGetErrorString(err), dim);\n    return -1;\n  }\n  return 0;\n}\n\n#section init_code\n\n{\n  cudnnStatus_t err;\n  if ((err = cudnnCreate(&_handle)) != CUDNN_STATUS_SUCCESS) {\n    PyErr_Format(PyExc_RuntimeError, "could not create cuDNN handle: %s",\n\t\t cudnnGetErrorString(err));\n#if PY_MAJOR_VERSION >= 3\n    return NULL;\n#else\n    return;\n#endif\n  }\n}\n'
p941
asS'func_files'
p942
(lp943
S'/u/devries/Documents/Theano/theano/sandbox/cuda/dnn_base.c'
p944
asS'code_sections'
p945
(dp946
S'init_code'
p947
S'\n\n{\n  cudnnStatus_t err;\n  if ((err = cudnnCreate(&_handle)) != CUDNN_STATUS_SUCCESS) {\n    PyErr_Format(PyExc_RuntimeError, "could not create cuDNN handle: %s",\n\t\t cudnnGetErrorString(err));\n#if PY_MAJOR_VERSION >= 3\n    return NULL;\n#else\n    return;\n#endif\n  }\n}\n'
p948
sS'support_code'
p949
S'\nstatic cudnnHandle_t _handle = NULL;\n\n\nstatic int\nc_set_tensorNd(CudaNdarray *var, cudnnTensorDescriptor_t desc) {\n\n  int dim = CudaNdarray_NDIM(var);\n  int *strides = (int *)malloc(dim * sizeof(int));\n  int default_str = 1;\n  int return_value = 0;\n  \n  if (strides != NULL) {\n    for (int i = dim-1; i >= 0; i--)\n    {\n      if (CudaNdarray_HOST_STRIDES(var)[i])\n        strides[i] = CudaNdarray_HOST_STRIDES(var)[i];\n      else\n        strides[i] = default_str;\n      default_str *= CudaNdarray_HOST_DIMS(var)[i];\n    }\n    \n    cudnnStatus_t err = cudnnSetTensorNdDescriptor(desc, CUDNN_DATA_FLOAT, dim,\n                                                   CudaNdarray_HOST_DIMS(var),\n                                                   strides);\n  \t \t\t\t\t\t\t\t\t\t\n    \n    if (err != CUDNN_STATUS_SUCCESS) {\n      PyErr_Format(PyExc_RuntimeError,\n\t\t  "Could not set tensorNd descriptor: %s"\n\t\t  "dim=%d",\n\t\t  cudnnGetErrorString(err), dim);\n\t\t  \n\t  return_value = -1;\n    }\n  } else {\n    PyErr_Format(PyExc_MemoryError,\n\t\t"Could not allocate memory for strides array of size %d.",\n\t\tdim);\n\t\t\n    return_value = -1;  \n  }\n    \n  free(strides);\n  return return_value;\n}\n\n\nstatic int\nc_set_filterNd(CudaNdarray *var, cudnnFilterDescriptor_t desc) {\n  if (!CudaNdarray_is_c_contiguous(var)) {\n    PyErr_SetString(PyExc_ValueError,\n\t\t    "Only contiguous filters (kernels) are supported.");\n    return -1;\n  }\n  int dim = CudaNdarray_NDIM(var);\n  cudnnStatus_t err = cudnnSetFilterNdDescriptor(desc, CUDNN_DATA_FLOAT, dim,\n                                                 CudaNdarray_HOST_DIMS(var));\n  if (err != CUDNN_STATUS_SUCCESS) {\n    PyErr_Format(PyExc_RuntimeError,\n\t\t "Could not set filter descriptor: %s."\n\t\t " dims= %d",\n\t\t cudnnGetErrorString(err), dim);\n    return -1;\n  }\n  return 0;\n}\n\n'
p950
ssbsbI3
tp951
asg27
S'auto_427'
p952
sg30
(itheano.gof.utils
scratchpad
p953
(dp954
g33
(lp955
(lp956
(g36
I7
g37
S'x, ws=(2, 2))'
p957
tp958
aasbsg40
g8
(g71
g10
Ntp959
Rp960
(dp961
g6
(lp962
sg60
g63
sg76
(lp963
g98
asg30
(itheano.gof.utils
scratchpad
p964
(dp965
bsg239
(dp966
sg241
g8
(ctheano.sandbox.cuda.dnn
GpuDnnPoolDesc
p967
g10
Ntp968
Rp969
(dp970
S'stride'
p971
(I1
I1
tp972
sg253
g254
sS'pad'
p973
(I0
I0
tp974
sS'ws'
p975
(I2
I2
tp976
sS'mode'
p977
S'max'
p978
sbsbsg41
g8
(ctheano.gof.type
CDataType
p979
g10
Ntp980
Rp981
(dp982
S'freefunc'
p983
S'cudnnDestroyPoolingDescriptor'
p984
sS'ctype'
p985
S'cudnnPoolingDescriptor_t'
p986
sbsbasg60
g63
sg76
(lp987
g107
asg30
(itheano.gof.utils
scratchpad
p988
(dp989
bsg239
(dp990
sg241
g8
(ctheano.sandbox.cuda.dnn
GpuDnnPool
p991
g10
Ntp992
Rp993
(dp994
g938
Nsg253
g254
sg939
(lp995
S'#section support_code\nstatic cudnnHandle_t _handle = NULL;\n\n\nstatic int\nc_set_tensorNd(CudaNdarray *var, cudnnTensorDescriptor_t desc) {\n\n  int dim = CudaNdarray_NDIM(var);\n  int *strides = (int *)malloc(dim * sizeof(int));\n  int default_str = 1;\n  int return_value = 0;\n  \n  if (strides != NULL) {\n    for (int i = dim-1; i >= 0; i--)\n    {\n      if (CudaNdarray_HOST_STRIDES(var)[i])\n        strides[i] = CudaNdarray_HOST_STRIDES(var)[i];\n      else\n        strides[i] = default_str;\n      default_str *= CudaNdarray_HOST_DIMS(var)[i];\n    }\n    \n    cudnnStatus_t err = cudnnSetTensorNdDescriptor(desc, CUDNN_DATA_FLOAT, dim,\n                                                   CudaNdarray_HOST_DIMS(var),\n                                                   strides);\n  \t \t\t\t\t\t\t\t\t\t\n    \n    if (err != CUDNN_STATUS_SUCCESS) {\n      PyErr_Format(PyExc_RuntimeError,\n\t\t  "Could not set tensorNd descriptor: %s"\n\t\t  "dim=%d",\n\t\t  cudnnGetErrorString(err), dim);\n\t\t  \n\t  return_value = -1;\n    }\n  } else {\n    PyErr_Format(PyExc_MemoryError,\n\t\t"Could not allocate memory for strides array of size %d.",\n\t\tdim);\n\t\t\n    return_value = -1;  \n  }\n    \n  free(strides);\n  return return_value;\n}\n\n\nstatic int\nc_set_filterNd(CudaNdarray *var, cudnnFilterDescriptor_t desc) {\n  if (!CudaNdarray_is_c_contiguous(var)) {\n    PyErr_SetString(PyExc_ValueError,\n\t\t    "Only contiguous filters (kernels) are supported.");\n    return -1;\n  }\n  int dim = CudaNdarray_NDIM(var);\n  cudnnStatus_t err = cudnnSetFilterNdDescriptor(desc, CUDNN_DATA_FLOAT, dim,\n                                                 CudaNdarray_HOST_DIMS(var));\n  if (err != CUDNN_STATUS_SUCCESS) {\n    PyErr_Format(PyExc_RuntimeError,\n\t\t "Could not set filter descriptor: %s."\n\t\t " dims= %d",\n\t\t cudnnGetErrorString(err), dim);\n    return -1;\n  }\n  return 0;\n}\n\n#section init_code\n\n{\n  cudnnStatus_t err;\n  if ((err = cudnnCreate(&_handle)) != CUDNN_STATUS_SUCCESS) {\n    PyErr_Format(PyExc_RuntimeError, "could not create cuDNN handle: %s",\n\t\t cudnnGetErrorString(err));\n#if PY_MAJOR_VERSION >= 3\n    return NULL;\n#else\n    return;\n#endif\n  }\n}\n'
p996
asg942
(lp997
S'/u/devries/Documents/Theano/theano/sandbox/cuda/dnn_base.c'
p998
asg945
(dp999
S'init_code'
p1000
S'\n\n{\n  cudnnStatus_t err;\n  if ((err = cudnnCreate(&_handle)) != CUDNN_STATUS_SUCCESS) {\n    PyErr_Format(PyExc_RuntimeError, "could not create cuDNN handle: %s",\n\t\t cudnnGetErrorString(err));\n#if PY_MAJOR_VERSION >= 3\n    return NULL;\n#else\n    return;\n#endif\n  }\n}\n'
p1001
sS'support_code'
p1002
S'\nstatic cudnnHandle_t _handle = NULL;\n\n\nstatic int\nc_set_tensorNd(CudaNdarray *var, cudnnTensorDescriptor_t desc) {\n\n  int dim = CudaNdarray_NDIM(var);\n  int *strides = (int *)malloc(dim * sizeof(int));\n  int default_str = 1;\n  int return_value = 0;\n  \n  if (strides != NULL) {\n    for (int i = dim-1; i >= 0; i--)\n    {\n      if (CudaNdarray_HOST_STRIDES(var)[i])\n        strides[i] = CudaNdarray_HOST_STRIDES(var)[i];\n      else\n        strides[i] = default_str;\n      default_str *= CudaNdarray_HOST_DIMS(var)[i];\n    }\n    \n    cudnnStatus_t err = cudnnSetTensorNdDescriptor(desc, CUDNN_DATA_FLOAT, dim,\n                                                   CudaNdarray_HOST_DIMS(var),\n                                                   strides);\n  \t \t\t\t\t\t\t\t\t\t\n    \n    if (err != CUDNN_STATUS_SUCCESS) {\n      PyErr_Format(PyExc_RuntimeError,\n\t\t  "Could not set tensorNd descriptor: %s"\n\t\t  "dim=%d",\n\t\t  cudnnGetErrorString(err), dim);\n\t\t  \n\t  return_value = -1;\n    }\n  } else {\n    PyErr_Format(PyExc_MemoryError,\n\t\t"Could not allocate memory for strides array of size %d.",\n\t\tdim);\n\t\t\n    return_value = -1;  \n  }\n    \n  free(strides);\n  return return_value;\n}\n\n\nstatic int\nc_set_filterNd(CudaNdarray *var, cudnnFilterDescriptor_t desc) {\n  if (!CudaNdarray_is_c_contiguous(var)) {\n    PyErr_SetString(PyExc_ValueError,\n\t\t    "Only contiguous filters (kernels) are supported.");\n    return -1;\n  }\n  int dim = CudaNdarray_NDIM(var);\n  cudnnStatus_t err = cudnnSetFilterNdDescriptor(desc, CUDNN_DATA_FLOAT, dim,\n                                                 CudaNdarray_HOST_DIMS(var));\n  if (err != CUDNN_STATUS_SUCCESS) {\n    PyErr_Format(PyExc_RuntimeError,\n\t\t "Could not set filter descriptor: %s."\n\t\t " dims= %d",\n\t\t cudnnGetErrorString(err), dim);\n    return -1;\n  }\n  return 0;\n}\n\n'
p1003
ssbsbI0
tp1004
a(g103
I0
tp1005
asg27
S'auto_434'
p1006
sg30
(itheano.gof.utils
scratchpad
p1007
(dp1008
g33
(lp1009
(lp1010
(g36
I7
g37
S'x, ws=(2, 2))'
p1011
tp1012
aasbsg40
g84
sg41
g885
sbasg30
(itheano.gof.utils
scratchpad
p1013
(dp1014
bsg239
(dp1015
sg241
g783
sbI0
tp1016
asg27
S'auto_881'
p1017
sg30
(itheano.gof.utils
scratchpad
p1018
(dp1019
g33
(lp1020
sbsg40
g73
sg41
g8
(g119
g10
Ntp1021
Rp1022
(dp1023
g46
(I00
I00
I00
I00
tp1024
sg14
Nsbsbasg30
(itheano.gof.utils
scratchpad
p1025
(dp1026
bsg239
(dp1027
sg241
g681
sbI0
tp1028
a(g525
I0
tp1029
a(g597
I0
tp1030
a(g479
I0
tp1031
a(g454
I0
tp1032
asg27
S'auto_426'
p1033
sg30
(itheano.gof.utils
scratchpad
p1034
(dp1035
g33
g34
sbsg40
Nsg41
g44
sbasS'change_tracker'
p1036
(itheano.gof.opt
ChangeTracker
p1037
(dp1038
S'changed'
p1039
I01
sS'nb_imported'
p1040
I0
sbsg76
(lp1041
g899
asS'update_mapping'
p1042
(dp1043
sS'node_locks'
p1044
(dp1045
sS'merge_feature'
p1046
g8
(ctheano.gof.opt
MergeFeature
p1047
g10
Ntp1048
Rp1049
(dp1050
S'scheduled'
p1051
(lp1052
sS'nodes_seen'
p1053
c__builtin__
set
p1054
((lp1055
g103
ag277
ag441
ag756
ag454
ag960
ag341
ag894
ag166
ag597
ag479
ag525
ag153
ag297
ag112
ag179
ag220
ag425
ag361
ag512
ag499
ag188
ag73
ag409
ag93
ag84
atp1056
Rp1057
sS'const_sig_inv'
p1058
(itheano.gof.opt
_metadict
p1059
(dp1060
S'd'
p1061
(dp1062
(g197
g354
tp1063
g345
s(g197
g213
tp1064
g193
s(g197
g290
tp1065
g281
s(g197
g697
tp1066
g688
sg8
(ctheano.sandbox.cuda.var
CudaNdarrayConstantSignature
p1067
c__builtin__
tuple
p1068
(g121
g132
(g133
(I0
tp1069
g135
tp1070
Rp1071
(I1
(I1
I1
I1
I1
tp1072
g54
I00
S'\x00\x00\x00@'
p1073
tp1074
btp1075
tp1076
Rp1077
(dp1078
S'has_nan'
p1079
I00
sS'_sum'
p1080
g205
(g54
S'\x00\x00\x00@'
p1081
tp1082
Rp1083
sS'_no_nan'
p1084
g1071
sbg117
sg8
(ctheano.tensor.var
TensorConstantSignature
p1085
g1068
(g507
g584
tp1086
tp1087
Rp1088
(dp1089
g1079
I00
sg1080
g205
(g208
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p1090
tp1091
Rp1092
sg1084
g584
sbg504
ssS'l'
p1093
(lp1094
sbsS'noinput_nodes'
p1095
g8
(ctheano.misc.ordered_set
OrderedSet
p1096
g10
Ntp1097
Rp1098
(dp1099
S'_OrderedSet__root'
p1100
g8
(ctheano.misc.ordered_set
Link
p1101
g10
Ntp1102
Rp1103
(lp1104
g8
(g1101
g10
Ntp1105
Rp1106
(lp1107
g1103
ag1103
ag960
abag1106
absS'_OrderedSet__map'
p1108
(dp1109
g960
g1106
ssbsS'blacklist'
p1110
(lp1111
sS'seen_constants'
p1112
g1054
((lp1113
I139808847385488
aI139808845602960
aI139808845606160
aI139808846736912
aI139808845604112
aI139808845705360
atp1114
Rp1115
sS'const_sig'
p1116
(itheano.gof.opt
_metadict
p1117
(dp1118
g1061
(dp1119
g117
g1077
sg281
g1065
sg688
g1066
sg345
g1063
sg193
g1064
sg504
g1088
ssg1093
(lp1120
sbsbsS'destroy_handler'
p1121
g8
(ctheano.gof.destroyhandler
DestroyHandler
p1122
g10
Ntp1123
Rp1124
(dp1125
S'impact'
p1126
(dp1127
g516
g8
(g1096
g10
Ntp1128
Rp1129
(dp1130
g1100
g8
(g1101
g10
Ntp1131
Rp1132
(lp1133
g8
(g1101
g10
Ntp1134
Rp1135
(lp1136
g1132
ag1132
ag516
abag1135
absg1108
(dp1137
g516
g1135
ssbsg588
g8
(g1096
g10
Ntp1138
Rp1139
(dp1140
g1100
g8
(g1101
g10
Ntp1141
Rp1142
(lp1143
g8
(g1101
g10
Ntp1144
Rp1145
(lp1146
g1142
ag1142
ag588
abag1145
absg1108
(dp1147
g588
g1145
ssbssS'droot'
p1148
(dp1149
g516
g516
sg588
g588
ssS'view_o'
p1150
ccollections
OrderedDict
p1151
((lp1152
(lp1153
g80
ag8
(g1096
g10
Ntp1154
Rp1155
(dp1156
g1100
g8
(g1101
g10
Ntp1157
Rp1158
(lp1159
g8
(g1101
g10
Ntp1160
Rp1161
(lp1162
g1158
ag1158
ag89
abag1161
absg1108
(dp1163
g89
g1161
ssbaa(lp1164
g183
ag8
(g1096
g10
Ntp1165
Rp1166
(dp1167
g1100
g8
(g1101
g10
Ntp1168
Rp1169
(lp1170
g8
(g1101
g10
Ntp1171
Rp1172
(lp1173
g8
(g1101
g10
Ntp1174
Rp1175
(lp1176
g8
(g1101
g10
Ntp1177
Rp1178
(lp1179
g8
(g1101
g10
Ntp1180
Rp1181
(lp1182
g1169
ag1178
ag216
abag1175
ag293
abag1172
ag357
abag1169
ag170
abag1181
absg1108
(dp1183
g216
g1181
sg170
g1172
sg293
g1178
sg357
g1175
ssbaa(lp1184
g216
ag8
(g1096
g10
Ntp1185
Rp1186
(dp1187
g1100
g8
(g1101
g10
Ntp1188
Rp1189
(lp1190
g8
(g1101
g10
Ntp1191
Rp1192
(lp1193
g1189
ag1189
ag225
abag1192
absg1108
(dp1194
g225
g1192
ssbaa(lp1195
g293
ag8
(g1096
g10
Ntp1196
Rp1197
(dp1198
g1100
g8
(g1101
g10
Ntp1199
Rp1200
(lp1201
g8
(g1101
g10
Ntp1202
Rp1203
(lp1204
g1200
ag1200
ag302
abag1203
absg1108
(dp1205
g302
g1203
ssbaa(lp1206
g357
ag8
(g1096
g10
Ntp1207
Rp1208
(dp1209
g1100
g8
(g1101
g10
Ntp1210
Rp1211
(lp1212
g8
(g1101
g10
Ntp1213
Rp1214
(lp1215
g1211
ag1211
ag366
abag1214
absg1108
(dp1216
g366
g1214
ssbaa(lp1217
g170
ag8
(g1096
g10
Ntp1218
Rp1219
(dp1220
g1100
g8
(g1101
g10
Ntp1221
Rp1222
(lp1223
g8
(g1101
g10
Ntp1224
Rp1225
(lp1226
g1222
ag1222
ag157
abag1225
absg1108
(dp1227
g157
g1225
ssbaa(lp1228
g752
ag8
(g1096
g10
Ntp1229
Rp1230
(dp1231
g1100
g8
(g1101
g10
Ntp1232
Rp1233
(lp1234
g8
(g1101
g10
Ntp1235
Rp1236
(lp1237
g1233
ag1233
ag761
abag1236
absg1108
(dp1238
g761
g1236
ssbaatp1239
Rp1240
sS'view_i'
p1241
g1151
((lp1242
(lp1243
g89
ag80
aa(lp1244
g216
ag183
aa(lp1245
g293
ag183
aa(lp1246
g357
ag183
aa(lp1247
g170
ag183
aa(lp1248
g225
ag216
aa(lp1249
g302
ag293
aa(lp1250
g366
ag357
aa(lp1251
g157
ag170
aa(lp1252
g761
ag752
aatp1253
Rp1254
sg60
g63
sS'do_imports_on_attach'
p1255
I01
sg69
g1151
((lp1256
(lp1257
g98
ag1151
((lp1258
(lp1259
g93
aI1
aa(lp1260
g103
aI1
aatp1261
Rp1262
aa(lp1263
g67
ag1151
((lp1264
(lp1265
g525
aI1
aa(lp1266
g597
aI1
aa(lp1267
g479
aI1
aa(lp1268
g454
aI1
aa(lp1269
g73
aI1
aatp1270
Rp1271
aa(lp1272
g516
ag1151
((lp1273
(lp1274
g512
aI1
aatp1275
Rp1276
aa(lp1277
g588
ag1151
((lp1278
(lp1279
g499
aI1
aatp1280
Rp1281
aa(lp1282
g470
ag1151
((lp1283
(lp1284
g441
aI1
aatp1285
Rp1286
aa(lp1287
g445
ag1151
((lp1288
(lp1289
g441
aI1
aatp1290
Rp1291
aa(lp1292
g80
ag1151
((lp1293
(lp1294
g84
aI1
aatp1295
Rp1296
aa(lp1297
g504
ag1151
((lp1298
(lp1299
g512
aI1
aa(lp1300
g499
aI1
aatp1301
Rp1302
aa(lp1303
g8
(g23
g10
Ntp1304
Rp1305
(dp1306
g29
I0
sg14
Nsg60
g63
sg69
(lp1307
sg27
S'auto_779'
p1308
sg30
(itheano.gof.utils
scratchpad
p1309
(dp1310
S'values_eq_approx'
p1311
ctheano.tensor.type
values_eq_approx_remove_inf_nan
p1312
sg33
(lp1313
sbsg40
g8
(g71
g10
Ntp1314
Rp1315
(dp1316
g6
(lp1317
g504
ag516
asg60
g63
sg76
(lp1318
g1305
asg30
(itheano.gof.utils
scratchpad
p1319
(dp1320
bsg239
(dp1321
sg241
g8
(g551
g10
Ntp1322
Rp1323
(dp1324
g646
S'tensor'
p1325
sg555
g8
(g556
g10
Ntp1326
Rp1327
(dp1328
g560
g737
sg253
g254
sg14
S'add'
p1329
sbsg14
S'Elemwise{add,no_inplace}'
p1330
sg253
g254
sg567
(dp1331
sg570
g572
sg573
(dp1332
sg575
I00
sS'__doc__'
p1333
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p1334
sbsbsg41
g8
(g42
g10
Ntp1335
Rp1336
(dp1337
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbag1151
((lp1338
tp1339
Rp1340
aa(lp1341
g8
(g23
g10
Ntp1342
Rp1343
(dp1344
g29
I0
sg14
Nsg60
g63
sg69
(lp1345
sg27
S'auto_772'
p1346
sg30
(itheano.gof.utils
scratchpad
p1347
(dp1348
g1311
g1312
sg33
(lp1349
sbsg40
g8
(g71
g10
Ntp1350
Rp1351
(dp1352
g6
(lp1353
g504
ag588
asg60
g63
sg76
(lp1354
g1343
asg30
(itheano.gof.utils
scratchpad
p1355
(dp1356
bsg239
(dp1357
sg241
g1323
sbsg41
g8
(g42
g10
Ntp1358
Rp1359
(dp1360
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbag1151
((lp1361
tp1362
Rp1363
aa(lp1364
g89
ag1151
((lp1365
(lp1366
g93
aI1
aa(lp1367
g103
aI1
aatp1368
Rp1369
aa(lp1370
g429
ag1151
((lp1371
(lp1372
g425
aI1
aatp1373
Rp1374
aa(lp1375
g107
ag1151
((lp1376
(lp1377
g103
aI1
aa(lp1378
g112
aI1
aatp1379
Rp1380
aa(lp1381
g413
ag1151
((lp1382
(lp1383
g409
aI1
aatp1384
Rp1385
aa(lp1386
g183
ag1151
((lp1387
(lp1388
g188
aI1
aa(lp1389
g277
aI1
aa(lp1390
g341
aI1
aa(lp1391
g179
aI1
aatp1392
Rp1393
aa(lp1394
g193
ag1151
((lp1395
(lp1396
g188
aI1
aatp1397
Rp1398
aa(lp1399
g216
ag1151
((lp1400
(lp1401
g220
aI1
aatp1402
Rp1403
aa(lp1404
g281
ag1151
((lp1405
(lp1406
g277
aI1
aatp1407
Rp1408
aa(lp1409
g293
ag1151
((lp1410
(lp1411
g297
aI1
aatp1412
Rp1413
aa(lp1414
g345
ag1151
((lp1415
(lp1416
g341
aI1
aatp1417
Rp1418
aa(lp1419
g357
ag1151
((lp1420
(lp1421
g361
aI1
aatp1422
Rp1423
aa(lp1424
g688
ag1151
((lp1425
(lp1426
g179
aI1
aatp1427
Rp1428
aa(lp1429
g170
ag1151
((lp1430
(lp1431
g166
aI1
aatp1432
Rp1433
aa(lp1434
g225
ag1151
((lp1435
(lp1436
g153
aI1
aatp1437
Rp1438
aa(lp1439
g302
ag1151
((lp1440
(lp1441
g153
aI1
aatp1442
Rp1443
aa(lp1444
g366
ag1151
((lp1445
(lp1446
g153
aI1
aatp1447
Rp1448
aa(lp1449
g157
ag1151
((lp1450
(lp1451
g153
aI1
aatp1452
Rp1453
aa(lp1454
g144
ag1151
((lp1455
(lp1456
g112
aI1
aatp1457
Rp1458
aa(lp1459
g117
ag1151
((lp1460
(lp1461
g112
aI1
aatp1462
Rp1463
aa(lp1464
g752
ag1151
((lp1465
(lp1466
g756
aI1
aatp1467
Rp1468
aa(lp1469
g761
ag1151
((lp1470
(lp1471
g103
aI1
aatp1472
Rp1473
aa(lp1474
g890
ag1151
((lp1475
(lp1476
g894
aI1
aatp1477
Rp1478
aa(lp1479
g899
ag1151
((lp1480
tp1481
Rp1482
aa(lp1483
g8
(g23
g10
Ntp1484
Rp1485
(dp1486
g29
I0
sg14
g901
sg60
g63
sg69
(lp1487
sg27
S'auto_883'
p1488
sg30
(itheano.gof.utils
scratchpad
p1489
(dp1490
g33
(lp1491
sbsg40
g8
(g71
g10
Ntp1492
Rp1493
(dp1494
g6
(lp1495
g899
asg60
g63
sg76
(lp1496
g1485
asg30
(itheano.gof.utils
scratchpad
p1497
(dp1498
bsg239
(dp1499
sg241
g8
(ctheano.compile.ops
OutputGuard
p1500
g10
Ntp1501
Rp1502
(dp1503
g253
g254
sbsbsg41
g913
sbag1151
((lp1504
tp1505
Rp1506
aa(lp1507
g8
(g78
g10
Ntp1508
Rp1509
(dp1510
g29
I0
sg14
Nsg60
g63
sg69
(lp1511
sg27
S'auto_884'
p1512
sg30
(itheano.gof.utils
scratchpad
p1513
(dp1514
g33
(lp1515
sbsg40
g8
(g71
g10
Ntp1516
Rp1517
(dp1518
g6
(lp1519
g157
ag366
ag302
ag225
asg60
g63
sg76
(lp1520
g1509
asg30
(itheano.gof.utils
scratchpad
p1521
(dp1522
bsg239
(dp1523
sg241
g8
(g728
g10
Ntp1524
Rp1525
(dp1526
g573
(dp1527
I0
I0
ssg253
g254
sg555
g8
(g733
g10
Ntp1528
Rp1529
(dp1530
g560
g8
(g561
g10
Ntp1531
Rp1532
(dp1533
g565
(I0
tp1534
sbsg253
g254
sg14
Nsbsg739
I01
sg567
(dp1535
I0
(lp1536
I0
assg741
g8
(g742
g10
Ntp1537
Rp1538
(dp1539
g555
g1529
sg739
I01
sg573
g1527
sbsbsbsg41
g8
(g119
g10
Ntp1540
Rp1541
(dp1542
g46
(I01
I01
I01
I01
tp1543
sg14
Nsbsbag1151
((lp1544
tp1545
Rp1546
aa(lp1547
g8
(g78
g10
Ntp1548
Rp1549
(dp1550
g29
I0
sg14
Nsg60
g63
sg69
(lp1551
sg27
S'auto_885'
p1552
sg30
(itheano.gof.utils
scratchpad
p1553
(dp1554
g33
(lp1555
sbsg40
g8
(g71
g10
Ntp1556
Rp1557
(dp1558
g6
(lp1559
g157
ag366
ag302
ag225
asg60
g63
sg76
(lp1560
g1549
asg30
(itheano.gof.utils
scratchpad
p1561
(dp1562
bsg239
(dp1563
sg241
g8
(g728
g10
Ntp1564
Rp1565
(dp1566
g573
(dp1567
I0
I1
ssg253
g254
sg555
g8
(g733
g10
Ntp1568
Rp1569
(dp1570
g560
g8
(g561
g10
Ntp1571
Rp1572
(dp1573
g565
(I1
tp1574
sbsg253
g254
sg14
Nsbsg739
I01
sg567
(dp1575
I0
(lp1576
I1
assg741
g8
(g742
g10
Ntp1577
Rp1578
(dp1579
g555
g1569
sg739
I01
sg573
g1567
sbsbsbsg41
g8
(g119
g10
Ntp1580
Rp1581
(dp1582
g46
(I01
I01
I01
I01
tp1583
sg14
Nsbsbag1151
((lp1584
tp1585
Rp1586
aa(lp1587
g8
(g78
g10
Ntp1588
Rp1589
(dp1590
g29
I0
sg14
Nsg60
g63
sg69
(lp1591
sg27
S'auto_886'
p1592
sg30
(itheano.gof.utils
scratchpad
p1593
(dp1594
g33
(lp1595
sbsg40
g8
(g71
g10
Ntp1596
Rp1597
(dp1598
g6
(lp1599
g157
ag366
ag302
ag225
asg60
g63
sg76
(lp1600
g1589
asg30
(itheano.gof.utils
scratchpad
p1601
(dp1602
bsg239
(dp1603
sg241
g8
(g728
g10
Ntp1604
Rp1605
(dp1606
g573
(dp1607
I0
I2
ssg253
g254
sg555
g8
(g733
g10
Ntp1608
Rp1609
(dp1610
g560
g8
(g561
g10
Ntp1611
Rp1612
(dp1613
g565
(I2
tp1614
sbsg253
g254
sg14
Nsbsg739
I01
sg567
(dp1615
I0
(lp1616
I2
assg741
g8
(g742
g10
Ntp1617
Rp1618
(dp1619
g555
g1609
sg739
I01
sg573
g1607
sbsbsbsg41
g8
(g119
g10
Ntp1620
Rp1621
(dp1622
g46
(I01
I01
I01
I01
tp1623
sg14
Nsbsbag1151
((lp1624
tp1625
Rp1626
aa(lp1627
g8
(g78
g10
Ntp1628
Rp1629
(dp1630
g29
I0
sg14
Nsg60
g63
sg69
(lp1631
sg27
S'auto_887'
p1632
sg30
(itheano.gof.utils
scratchpad
p1633
(dp1634
g33
(lp1635
sbsg40
g8
(g71
g10
Ntp1636
Rp1637
(dp1638
g6
(lp1639
g157
ag366
ag302
ag225
asg60
g63
sg76
(lp1640
g1629
asg30
(itheano.gof.utils
scratchpad
p1641
(dp1642
bsg239
(dp1643
sg241
g8
(g728
g10
Ntp1644
Rp1645
(dp1646
g573
(dp1647
I0
I3
ssg253
g254
sg555
g8
(g733
g10
Ntp1648
Rp1649
(dp1650
g560
g8
(g561
g10
Ntp1651
Rp1652
(dp1653
g565
(I3
tp1654
sbsg253
g254
sg14
Nsbsg739
I01
sg567
(dp1655
I0
(lp1656
I3
assg741
g8
(g742
g10
Ntp1657
Rp1658
(dp1659
g555
g1649
sg739
I01
sg573
g1647
sbsbsbsg41
g8
(g119
g10
Ntp1660
Rp1661
(dp1662
g46
(I01
I01
I01
I01
tp1663
sg14
Nsbsbag1151
((lp1664
tp1665
Rp1666
aa(lp1667
g8
(g78
g10
Ntp1668
Rp1669
(dp1670
g29
I0
sg14
Nsg60
g63
sg69
(lp1671
sg27
S'auto_898'
p1672
sg30
(itheano.gof.utils
scratchpad
p1673
(dp1674
g33
(lp1675
sbsg40
g8
(g71
g10
Ntp1676
Rp1677
(dp1678
g6
(lp1679
g117
ag107
ag144
asg60
g63
sg76
(lp1680
g1669
asg30
(itheano.gof.utils
scratchpad
p1681
(dp1682
bsg239
(dp1683
sg241
g8
(g728
g10
Ntp1684
Rp1685
(dp1686
g573
(dp1687
I0
I1
ssg253
g254
sg555
g8
(g801
g10
Ntp1688
Rp1689
(dp1690
g6
(lp1691
g8
(g806
g10
Ntp1692
Rp1693
(dp1694
g27
S'auto_888'
p1695
sg29
Nsg30
(itheano.gof.utils
scratchpad
p1696
(dp1697
bsg14
Nsg40
Nsg41
g658
sbag8
(g806
g10
Ntp1698
Rp1699
(dp1700
g27
S'auto_889'
p1701
sg29
Nsg30
(itheano.gof.utils
scratchpad
p1702
(dp1703
bsg14
Nsg40
Nsg41
g658
sbag8
(g806
g10
Ntp1704
Rp1705
(dp1706
g27
S'auto_890'
p1707
sg29
Nsg30
(itheano.gof.utils
scratchpad
p1708
(dp1709
bsg14
Nsg40
Nsg41
g658
sbasg825
(lp1710
S'%(nodename)s_subnode0'
p1711
aS'%(nodename)s_subnode1'
p1712
asg829
I3
sg14
S'Composite{((i0 * i1) / i2)}'
p1713
sg831
(g658
g658
g658
tp1714
sg76
(lp1715
g8
(g806
g10
Ntp1716
Rp1717
(dp1718
g27
S'auto_892'
p1719
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p1720
(dp1721
g33
g840
sbsg14
Nsg40
g8
(g71
g10
Ntp1722
Rp1723
(dp1724
g6
(lp1725
g8
(g806
g10
Ntp1726
Rp1727
(dp1728
g27
S'auto_891'
p1729
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p1730
(dp1731
g33
g851
sbsg14
Nsg40
g8
(g71
g10
Ntp1732
Rp1733
(dp1734
g6
(lp1735
g1693
ag1699
asg30
(itheano.gof.utils
scratchpad
p1736
(dp1737
bsg76
(lp1738
g1727
asg241
g735
sbsg41
g658
sbag1705
asg30
(itheano.gof.utils
scratchpad
p1739
(dp1740
bsg76
(lp1741
g1717
asg241
g864
sbsg41
g658
sbasg867
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp1 / %(i2)s;\n}\n'
p1742
sg869
(g658
tp1743
sg560
g8
(g561
g10
Ntp1744
Rp1745
(dp1746
g565
(I1
tp1747
sbsg253
g254
sg871
I1
sbsg739
I01
sg567
(dp1748
I0
(lp1749
I1
assg741
g8
(g742
g10
Ntp1750
Rp1751
(dp1752
g555
g1689
sg739
I01
sg573
g1687
sbsbsbsg41
g8
(g119
g10
Ntp1753
Rp1754
(dp1755
g46
(I00
I00
I00
I00
tp1756
sg14
Nsbsbag1151
((lp1757
tp1758
Rp1759
aa(lp1760
g540
ag1151
((lp1761
(lp1762
g441
aI1
aatp1763
Rp1764
aa(lp1765
g490
ag1151
((lp1766
(lp1767
g441
aI1
aatp1768
Rp1769
aatp1770
Rp1771
sS'root_destroyer'
p1772
(dp1773
g516
g512
sg588
g499
ssS'debug_all_apps'
p1774
g8
(g1096
g10
Ntp1775
Rp1776
(dp1777
g1100
g8
(g1101
g10
Ntp1778
Rp1779
(lp1780
g8
(g1101
g10
Ntp1781
Rp1782
(lp1783
g8
(g1101
g10
Ntp1784
Rp1785
(lp1786
g8
(g1101
g10
Ntp1787
Rp1788
(lp1789
g8
(g1101
g10
Ntp1790
Rp1791
(lp1792
g8
(g1101
g10
Ntp1793
Rp1794
(lp1795
g8
(g1101
g10
Ntp1796
Rp1797
(lp1798
g8
(g1101
g10
Ntp1799
Rp1800
(lp1801
g8
(g1101
g10
Ntp1802
Rp1803
(lp1804
g8
(g1101
g10
Ntp1805
Rp1806
(lp1807
g8
(g1101
g10
Ntp1808
Rp1809
(lp1810
g8
(g1101
g10
Ntp1811
Rp1812
(lp1813
g8
(g1101
g10
Ntp1814
Rp1815
(lp1816
g8
(g1101
g10
Ntp1817
Rp1818
(lp1819
g8
(g1101
g10
Ntp1820
Rp1821
(lp1822
g8
(g1101
g10
Ntp1823
Rp1824
(lp1825
g8
(g1101
g10
Ntp1826
Rp1827
(lp1828
g8
(g1101
g10
Ntp1829
Rp1830
(lp1831
g8
(g1101
g10
Ntp1832
Rp1833
(lp1834
g8
(g1101
g10
Ntp1835
Rp1836
(lp1837
g8
(g1101
g10
Ntp1838
Rp1839
(lp1840
g8
(g1101
g10
Ntp1841
Rp1842
(lp1843
g8
(g1101
g10
Ntp1844
Rp1845
(lp1846
g8
(g1101
g10
Ntp1847
Rp1848
(lp1849
g8
(g1101
g10
Ntp1850
Rp1851
(lp1852
g8
(g1101
g10
Ntp1853
Rp1854
(lp1855
g8
(g1101
g10
Ntp1856
Rp1857
(lp1858
g1779
ag1854
ag960
abag1851
ag525
abag1848
ag597
abag1845
ag479
abag1842
ag454
abag1839
ag73
abag1836
ag84
abag1833
ag441
abag1830
ag93
abag1827
ag425
abag1824
ag409
abag1821
ag188
abag1818
ag277
abag1815
ag341
abag1812
ag179
abag1809
ag220
abag1806
ag297
abag1803
ag361
abag1800
ag166
abag1797
ag756
abag1794
ag103
abag1791
ag894
abag1788
ag153
abag1785
ag112
abag1782
ag512
abag1779
ag499
abag1857
absg1108
(dp1859
g103
g1797
sg277
g1821
sg441
g1836
sg756
g1800
sg454
g1845
sg166
g1803
sg341
g1818
sg597
g1851
sg479
g1848
sg153
g1791
sg297
g1809
sg409
g1827
sg179
g1815
sg220
g1812
sg425
g1830
sg525
g1854
sg361
g1806
sg512
g1785
sg188
g1824
sg73
g1842
sg499
g1782
sg894
g1794
sg112
g1788
sg93
g1833
sg84
g1839
sg960
g1857
ssbsS'destroyers'
p1860
g8
(g1096
g10
Ntp1861
Rp1862
(dp1863
g1100
g8
(g1101
g10
Ntp1864
Rp1865
(lp1866
g8
(g1101
g10
Ntp1867
Rp1868
(lp1869
g8
(g1101
g10
Ntp1870
Rp1871
(lp1872
g1865
ag1868
ag512
abag1865
ag499
abag1871
absg1108
(dp1873
g512
g1871
sg499
g1868
ssbsS'stale_droot'
p1874
I00
sbsg14
S'pickle_pool.py:10'
p1875
sS'execute_callbacks_time'
p1876
F0.03675556182861328
sS'variable_locks'
p1877
(dp1878
sS'shape_feature'
p1879
g8
(ctheano.tensor.opt
ShapeFeature
p1880
g10
Ntp1881
Rp1882
(dp1883
g1051
(dp1884
sS'shape_of'
p1885
(dp1886
g8
(g78
g10
Ntp1887
Rp1888
(dp1889
g29
I0
sg14
Nsg60
g63
sg69
(lp1890
sg27
S'auto_838'
p1891
sg30
(itheano.gof.utils
scratchpad
p1892
(dp1893
g33
(lp1894
sbsg40
g8
(g71
g10
Ntp1895
Rp1896
(dp1897
g6
(lp1898
g413
asg60
g63
sg76
(lp1899
g1888
asg30
(itheano.gof.utils
scratchpad
p1900
(dp1901
bsg239
(dp1902
sg241
g681
sbsg41
g8
(g119
g10
Ntp1903
Rp1904
(dp1905
g46
(I00
tp1906
sg14
Nsbsb(g8
(g502
g10
Ntp1907
Rp1908
(dp1909
g27
S'auto_514'
p1910
sg29
Nsg30
(itheano.gof.utils
scratchpad
p1911
(dp1912
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp1913
Rp1914
(dp1915
g46
(tsg48
S'int64'
p1916
sg50
g208
sg57
I00
sg14
Nsbsg130
g132
(g133
(I0
tp1917
g135
tp1918
Rp1919
(I1
(tg208
I00
S'\x04\x00\x00\x00\x00\x00\x00\x00'
p1920
tp1921
bsbtp1922
sg8
(g502
g10
Ntp1923
Rp1924
(dp1925
g27
S'auto_775'
p1926
sg29
Nsg30
(itheano.gof.utils
scratchpad
p1927
(dp1928
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp1929
Rp1930
(dp1931
g46
(tsg48
S'int64'
p1932
sg50
g208
sg57
I00
sg14
Nsbsg69
(lp1933
sg130
g132
(g133
(I0
tp1934
g135
tp1935
Rp1936
(I1
(tg208
I00
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p1937
tp1938
bsb(tsg8
(g502
g10
Ntp1939
Rp1940
(dp1941
g27
S'auto_692'
p1942
sg29
Nsg30
(itheano.gof.utils
scratchpad
p1943
(dp1944
g33
(lp1945
sg581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp1946
Rp1947
(dp1948
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsg69
(lp1949
sg130
g132
(g133
(I0
tp1950
g135
tp1951
Rp1952
(I1
(tg208
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p1953
tp1954
bsb(tsg193
(tsg8
(g502
g10
Ntp1955
Rp1956
(dp1957
g27
S'auto_663'
p1958
sg29
Nsg30
(itheano.gof.utils
scratchpad
p1959
(dp1960
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp1961
Rp1962
(dp1963
g46
(tsg48
S'int8'
p1964
sg50
g51
(S'i1'
p1965
I0
I1
tp1966
Rp1967
(I3
S'|'
p1968
NNNI-1
I-1
I0
tp1969
bsg57
I00
sg14
Nsbsg69
(lp1970
sg130
g132
(g133
(I0
tp1971
g135
tp1972
Rp1973
(I1
(tg1967
I00
S'\x02'
p1974
tp1975
bsb(tsg445
(tsg8
(g23
g10
Ntp1976
Rp1977
(dp1978
g29
I0
sg14
Nsg60
g63
sg69
(lp1979
sg27
S'auto_738'
p1980
sg30
(itheano.gof.utils
scratchpad
p1981
(dp1982
g33
(lp1983
sbsg40
g8
(g71
g10
Ntp1984
Rp1985
(dp1986
g6
(lp1987
g8
(g502
g10
Ntp1988
Rp1989
(dp1990
g27
S'auto_729'
p1991
sg29
Nsg30
(itheano.gof.utils
scratchpad
p1992
(dp1993
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp1994
Rp1995
(dp1996
g46
(tsg48
S'int8'
p1997
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp1998
sg130
g132
(g133
(I0
tp1999
g135
tp2000
Rp2001
(I1
(tg1967
I00
S'\x01'
p2002
tp2003
bsbasg60
g63
sg76
(lp2004
g1977
asg30
(itheano.gof.utils
scratchpad
p2005
(dp2006
bsg239
(dp2007
sg241
g8
(ctheano.tensor.elemwise
DimShuffle
p2008
g10
Ntp2009
Rp2010
(dp2011
S'drop'
p2012
(lp2013
sg251
(lp2014
sg249
(lp2015
I0
aI1
aI2
aI3
asg255
(tsS'inplace'
p2016
I00
sg256
(g15
g15
g15
g15
tp2017
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2018
Rp2019
(dp2020
g46
(I01
I01
I01
I01
tp2021
sg48
g1997
sg50
g1967
sg57
I00
sg14
Nsbsb(g8
(g502
g10
Ntp2022
Rp2023
(dp2024
g27
S'auto_469'
p2025
sg29
Nsg30
(itheano.gof.utils
scratchpad
p2026
(dp2027
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp2028
Rp2029
(dp2030
g46
(tsg48
S'int64'
p2031
sg50
g208
sg57
I00
sg14
Nsbsg130
g132
(g133
(I0
tp2032
g135
tp2033
Rp2034
(I1
(tg208
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p2035
tp2036
bsbg2023
g2023
g2023
tp2037
sg98
Nsg8
(g23
g10
Ntp2038
Rp2039
(dp2040
g29
I0
sg14
Nsg60
g63
sg69
(lp2041
sg27
S'auto_459'
p2042
sg30
(itheano.gof.utils
scratchpad
p2043
(dp2044
g33
(lp2045
(lp2046
(g770
I1113
g771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2047
tp2048
aasbsg40
g8
(g71
g10
Ntp2049
Rp2050
(dp2051
g6
(lp2052
g8
(g23
g10
Ntp2053
Rp2054
(dp2055
g29
I0
sg14
Nsg60
g63
sg69
(lp2056
sg27
S'auto_458'
p2057
sg30
(itheano.gof.utils
scratchpad
p2058
(dp2059
g33
(lp2060
(lp2061
(g770
I1113
g771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2062
tp2063
aasbsg40
g8
(g71
g10
Ntp2064
Rp2065
(dp2066
g6
(lp2067
g8
(g23
g10
Ntp2068
Rp2069
(dp2070
g29
I0
sg14
Nsg60
g63
sg69
(lp2071
sg27
S'auto_457'
p2072
sg30
(itheano.gof.utils
scratchpad
p2073
(dp2074
g33
(lp2075
(lp2076
(g770
I1113
g771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2077
tp2078
aasbsg40
g8
(g71
g10
Ntp2079
Rp2080
(dp2081
g6
(lp2082
g8
(g23
g10
Ntp2083
Rp2084
(dp2085
g29
I0
sg14
Nsg60
g63
sg69
(lp2086
sg27
S'auto_456'
p2087
sg30
(itheano.gof.utils
scratchpad
p2088
(dp2089
g33
(lp2090
(lp2091
(S'/u/devries/Documents/Theano/theano/gradient.py'
p2092
I1345
S'_float_ones_like'
p2093
S'rval = tensor.ones_like(x)'
p2094
tp2095
aasbsg40
g8
(g71
g10
Ntp2096
Rp2097
(dp2098
g6
(lp2099
g8
(g23
g10
Ntp2100
Rp2101
(dp2102
g29
I0
sg14
S'mean'
p2103
sg60
g63
sg69
(lp2104
sg27
S'auto_454'
p2105
sg30
(itheano.gof.utils
scratchpad
p2106
(dp2107
g33
(lp2108
(lp2109
(g36
I8
g37
S'grad_x = theano.grad((pooled_x**2).mean(), x)'
p2110
tp2111
aasbsg40
g8
(g71
g10
Ntp2112
Rp2113
(dp2114
g6
(lp2115
g8
(g23
g10
Ntp2116
Rp2117
(dp2118
g29
I0
sg14
Nsg60
g63
sg69
(lp2119
sg27
S'auto_453'
p2120
sg30
(itheano.gof.utils
scratchpad
p2121
(dp2122
g33
(lp2123
(lp2124
(g36
I8
g37
S'grad_x = theano.grad((pooled_x**2).mean(), x)'
p2125
tp2126
aasbsg40
g8
(g71
g10
Ntp2127
Rp2128
(dp2129
g6
(lp2130
g8
(g23
g10
Ntp2131
Rp2132
(dp2133
g29
I0
sg14
Nsg60
g63
sg69
(lp2134
sg27
S'auto_452'
p2135
sg30
(itheano.gof.utils
scratchpad
p2136
(dp2137
g33
(lp2138
(lp2139
(g36
I8
g37
S'grad_x = theano.grad((pooled_x**2).mean(), x)'
p2140
tp2141
aasbsg40
g8
(g71
g10
Ntp2142
Rp2143
(dp2144
g6
(lp2145
g8
(g23
g10
Ntp2146
Rp2147
(dp2148
g29
I0
sg14
Nsg60
g63
sg69
(lp2149
sg27
S'auto_451'
p2150
sg30
(itheano.gof.utils
scratchpad
p2151
(dp2152
g33
(lp2153
(lp2154
(g36
I8
g37
S'grad_x = theano.grad((pooled_x**2).mean(), x)'
p2155
tp2156
aasbsg40
g8
(g71
g10
Ntp2157
Rp2158
(dp2159
g6
(lp2160
g8
(g23
g10
Ntp2161
Rp2162
(dp2163
g29
I0
sg14
Nsg60
g63
sg69
(lp2164
sg27
S'auto_441'
p2165
sg30
(itheano.gof.utils
scratchpad
p2166
(dp2167
g33
(lp2168
sbsg40
g8
(g71
g10
Ntp2169
Rp2170
(dp2171
g6
(lp2172
g8
(g23
g10
Ntp2173
Rp2174
(dp2175
g29
I0
sg14
Nsg60
g63
sg69
(lp2176
sg27
S'auto_439'
p2177
sg30
(itheano.gof.utils
scratchpad
p2178
(dp2179
g33
(lp2180
(lp2181
(g36
I8
g37
S'grad_x = theano.grad((pooled_x**2).mean(), x)'
p2182
tp2183
aasbsg40
g8
(g71
g10
Ntp2184
Rp2185
(dp2186
g6
(lp2187
g8
(g23
g10
Ntp2188
Rp2189
(dp2190
g29
I0
sg14
Nsg60
g63
sg69
(lp2191
sg27
S'auto_437'
p2192
sg30
(itheano.gof.utils
scratchpad
p2193
(dp2194
g33
(lp2195
sbsg40
g8
(g71
g10
Ntp2196
Rp2197
(dp2198
g6
(lp2199
g107
asg60
g63
sg76
(lp2200
g2189
asg30
(itheano.gof.utils
scratchpad
p2201
(dp2202
bsg239
(dp2203
sg241
g8
(g919
g10
Ntp2204
Rp2205
(dp2206
g253
g254
sbsbsg41
g8
(g42
g10
Ntp2207
Rp2208
(dp2209
g46
(I00
I00
I00
I00
tp2210
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag8
(g23
g10
Ntp2211
Rp2212
(dp2213
g29
I0
sg14
Nsg60
g63
sg69
(lp2214
sg27
S'auto_431'
p2215
sg30
(itheano.gof.utils
scratchpad
p2216
(dp2217
g33
(lp2218
(lp2219
(g36
I8
g37
S'grad_x = theano.grad((pooled_x**2).mean(), x)'
p2220
tp2221
aasbsg40
g8
(g71
g10
Ntp2222
Rp2223
(dp2224
g6
(lp2225
g8
(g502
g10
Ntp2226
Rp2227
(dp2228
g27
S'auto_430'
p2229
sg29
Nsg30
(itheano.gof.utils
scratchpad
p2230
(dp2231
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp2232
Rp2233
(dp2234
g46
(tsg48
S'int8'
p2235
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp2236
sg130
g132
(g133
(I0
tp2237
g135
tp2238
Rp2239
(I1
(tg1967
I00
g1974
tp2240
bsbasg60
g63
sg76
(lp2241
g2212
asg30
(itheano.gof.utils
scratchpad
p2242
(dp2243
bsg239
(dp2244
sg241
g8
(g2008
g10
Ntp2245
Rp2246
(dp2247
g2012
(lp2248
sg251
(lp2249
sg249
(lp2250
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
(g15
g15
g15
g15
tp2251
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2252
Rp2253
(dp2254
g46
(I01
I01
I01
I01
tp2255
sg48
g2235
sg50
g1967
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp2256
g2174
asg30
(itheano.gof.utils
scratchpad
p2257
(dp2258
bsg239
(dp2259
sg241
g8
(g551
g10
Ntp2260
Rp2261
(dp2262
g646
g1325
sg555
g8
(ctheano.scalar.basic
Pow
p2263
g10
Ntp2264
Rp2265
(dp2266
g560
g737
sg253
g254
sg14
S'pow'
p2267
sbsg14
S'Elemwise{pow,no_inplace}'
p2268
sg253
g254
sg567
(dp2269
sg570
(S'power'
p2270
I2
I1
tp2271
sg573
(dp2272
sg575
I00
sg1333
S"elementwise power\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p2273
sbsbsg41
g8
(g42
g10
Ntp2274
Rp2275
(dp2276
g46
(I00
I00
I00
I00
tp2277
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp2278
g2162
asg30
(itheano.gof.utils
scratchpad
p2279
(dp2280
bsg239
(dp2281
sg241
g8
(ctheano.tensor.elemwise
Sum
p2282
g10
Ntp2283
Rp2284
(dp2285
S'acc_dtype'
p2286
S'float64'
p2287
sg48
g660
sg253
g254
sg555
g1327
sS'axis'
p2288
Nsbsbsg41
g8
(g42
g10
Ntp2289
Rp2290
(dp2291
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag8
(g23
g10
Ntp2292
Rp2293
(dp2294
g29
I0
sg14
Nsg60
g63
sg69
(lp2295
sg27
S'auto_444'
p2296
sg30
(itheano.gof.utils
scratchpad
p2297
(dp2298
g33
(lp2299
sbsg40
g8
(g71
g10
Ntp2300
Rp2301
(dp2302
g6
(lp2303
g413
ag193
asg60
g63
sg76
(lp2304
g2293
asg30
(itheano.gof.utils
scratchpad
p2305
(dp2306
bsg239
(dp2307
sg241
g8
(ctheano.tensor.subtensor
Subtensor
p2308
g10
Ntp2309
Rp2310
(dp2311
g273
(g197
tp2312
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2313
Rp2314
(dp2315
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp2316
g2147
asg30
(itheano.gof.utils
scratchpad
p2317
(dp2318
bsg239
(dp2319
sg241
g8
(g551
g10
Ntp2320
Rp2321
(dp2322
g646
g1325
sg555
g864
sg14
S'Elemwise{true_div,no_inplace}'
p2323
sg253
g254
sg567
(dp2324
sg570
(S'true_divide'
p2325
I2
I1
tp2326
sg573
(dp2327
sg575
I00
sg1333
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p2328
sbsbsg41
g8
(g42
g10
Ntp2329
Rp2330
(dp2331
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag8
(g23
g10
Ntp2332
Rp2333
(dp2334
g29
I0
sg14
Nsg60
g63
sg69
(lp2335
sg27
S'auto_446'
p2336
sg30
(itheano.gof.utils
scratchpad
p2337
(dp2338
g33
(lp2339
sbsg40
g8
(g71
g10
Ntp2340
Rp2341
(dp2342
g6
(lp2343
g413
ag281
asg60
g63
sg76
(lp2344
g2333
asg30
(itheano.gof.utils
scratchpad
p2345
(dp2346
bsg239
(dp2347
sg241
g8
(g2308
g10
Ntp2348
Rp2349
(dp2350
g273
(g197
tp2351
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2352
Rp2353
(dp2354
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp2355
g2132
asg30
(itheano.gof.utils
scratchpad
p2356
(dp2357
bsg239
(dp2358
sg241
g2321
sbsg41
g8
(g42
g10
Ntp2359
Rp2360
(dp2361
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag8
(g23
g10
Ntp2362
Rp2363
(dp2364
g29
I0
sg14
Nsg60
g63
sg69
(lp2365
sg27
S'auto_448'
p2366
sg30
(itheano.gof.utils
scratchpad
p2367
(dp2368
g33
(lp2369
sbsg40
g8
(g71
g10
Ntp2370
Rp2371
(dp2372
g6
(lp2373
g413
ag345
asg60
g63
sg76
(lp2374
g2363
asg30
(itheano.gof.utils
scratchpad
p2375
(dp2376
bsg239
(dp2377
sg241
g8
(g2308
g10
Ntp2378
Rp2379
(dp2380
g273
(g197
tp2381
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2382
Rp2383
(dp2384
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp2385
g2117
asg30
(itheano.gof.utils
scratchpad
p2386
(dp2387
bsg239
(dp2388
sg241
g2321
sbsg41
g8
(g42
g10
Ntp2389
Rp2390
(dp2391
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag8
(g23
g10
Ntp2392
Rp2393
(dp2394
g29
I0
sg14
Nsg60
g63
sg69
(lp2395
sg27
S'auto_450'
p2396
sg30
(itheano.gof.utils
scratchpad
p2397
(dp2398
g33
(lp2399
sbsg40
g8
(g71
g10
Ntp2400
Rp2401
(dp2402
g6
(lp2403
g413
ag688
asg60
g63
sg76
(lp2404
g2393
asg30
(itheano.gof.utils
scratchpad
p2405
(dp2406
bsg239
(dp2407
sg241
g8
(g2308
g10
Ntp2408
Rp2409
(dp2410
g273
(g197
tp2411
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2412
Rp2413
(dp2414
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp2415
g2101
asg30
(itheano.gof.utils
scratchpad
p2416
(dp2417
bsg239
(dp2418
sg241
g2321
sbsg41
g8
(g42
g10
Ntp2419
Rp2420
(dp2421
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag8
(g502
g10
Ntp2422
Rp2423
(dp2424
g27
S'auto_455'
p2425
sg29
Nsg30
(itheano.gof.utils
scratchpad
p2426
(dp2427
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp2428
Rp2429
(dp2430
g46
(tsg48
S'float32'
p2431
sg50
g54
sg57
I00
sg14
Nsbsg69
(lp2432
sg130
g132
(g133
(I0
tp2433
g135
tp2434
Rp2435
(I1
(tg54
I00
S'\x00\x00\x80?'
p2436
tp2437
bsbasg60
g63
sg76
(lp2438
g2084
asg30
(itheano.gof.utils
scratchpad
p2439
(dp2440
bsg239
(dp2441
sg241
g8
(g551
g10
Ntp2442
Rp2443
(dp2444
g646
g1325
sg555
g8
(ctheano.scalar.basic
Second
p2445
g10
Ntp2446
Rp2447
(dp2448
g560
g8
(g561
g10
Ntp2449
Rp2450
(dp2451
g565
(I1
tp2452
sbsg253
g254
sg14
S'second'
p2453
sbsg14
S'Elemwise{second,no_inplace}'
p2454
sg253
g254
sg567
(dp2455
sg570
Nsg573
(dp2456
sg575
I00
sg1333
S"Create a matrix by filling the shape of a with b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p2457
sbsbsg41
g8
(g42
g10
Ntp2458
Rp2459
(dp2460
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag2393
asg60
g63
sg76
(lp2461
g2069
asg30
(itheano.gof.utils
scratchpad
p2462
(dp2463
bsg239
(dp2464
sg241
g8
(g551
g10
Ntp2465
Rp2466
(dp2467
g14
Nsg555
g864
sg567
(dp2468
sg570
g2326
sg573
(dp2469
sg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2470
Rp2471
(dp2472
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag2363
asg60
g63
sg76
(lp2473
g2054
asg30
(itheano.gof.utils
scratchpad
p2474
(dp2475
bsg239
(dp2476
sg241
g8
(g551
g10
Ntp2477
Rp2478
(dp2479
g14
Nsg555
g864
sg567
(dp2480
sg570
g2326
sg573
(dp2481
sg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2482
Rp2483
(dp2484
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag2333
asg60
g63
sg76
(lp2485
g2039
asg30
(itheano.gof.utils
scratchpad
p2486
(dp2487
bsg239
(dp2488
sg241
g8
(g551
g10
Ntp2489
Rp2490
(dp2491
g14
Nsg555
g864
sg567
(dp2492
sg570
g2326
sg573
(dp2493
sg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2494
Rp2495
(dp2496
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(tsg470
(tsg117
(g2023
g2023
g2023
g2023
tp2497
sg8
(g23
g10
Ntp2498
Rp2499
(dp2500
g29
I0
sg14
Nsg60
g63
sg69
(lp2501
sg27
S'auto_666'
p2502
sg30
(itheano.gof.utils
scratchpad
p2503
(dp2504
g33
(lp2505
sbsg40
g8
(g71
g10
Ntp2506
Rp2507
(dp2508
g6
(lp2509
g2227
asg60
g63
sg76
(lp2510
g2499
asg30
(itheano.gof.utils
scratchpad
p2511
(dp2512
bsg239
(dp2513
sg241
g8
(g551
g10
Ntp2514
Rp2515
(dp2516
g646
g647
sg14
Nsg555
g8
(g648
g10
Ntp2517
Rp2518
(dp2519
g560
g8
(g652
g10
Ntp2520
Rp2521
(dp2522
g656
(g197
tp2523
sbsg253
g254
sg662
g197
sg14
S'convert_to_int64'
p2524
sg664
cnumpy
int64
p2525
sbsg567
(dp2526
sg570
Nsg573
(dp2527
sg668
(lp2528
g670
asg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2529
Rp2530
(dp2531
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg2132
(tsg67
(g445
g470
g588
g516
tp2532
sg8
(g78
g10
Ntp2533
Rp2534
(dp2535
g29
I0
sg14
Nsg60
g63
sg69
(lp2536
sg27
S'auto_816'
p2537
sg30
(itheano.gof.utils
scratchpad
p2538
(dp2539
g33
(lp2540
sbsg40
g8
(g71
g10
Ntp2541
Rp2542
(dp2543
g6
(lp2544
g8
(g23
g10
Ntp2545
Rp2546
(dp2547
g29
I0
sg14
Nsg60
g63
sg69
(lp2548
sg27
S'auto_721'
p2549
sg30
(itheano.gof.utils
scratchpad
p2550
(dp2551
g33
(lp2552
sbsg40
g8
(g71
g10
Ntp2553
Rp2554
(dp2555
g6
(lp2556
g2293
asg60
g63
sg76
(lp2557
g2546
asg30
(itheano.gof.utils
scratchpad
p2558
(dp2559
bsg239
(dp2560
sg241
g8
(g2008
g10
Ntp2561
Rp2562
(dp2563
g2012
(lp2564
sg251
(lp2565
sg249
(lp2566
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g257
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2567
Rp2568
(dp2569
g46
(I01
I01
I01
I01
tp2570
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp2571
g2534
asg30
(itheano.gof.utils
scratchpad
p2572
(dp2573
bsg239
(dp2574
sg241
g681
sbsg41
g8
(g119
g10
Ntp2575
Rp2576
(dp2577
g46
(I01
I01
I01
I01
tp2578
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp2579
sg8
(g502
g10
Ntp2580
Rp2581
(dp2582
g27
S'auto_479'
p2583
sg29
Nsg30
(itheano.gof.utils
scratchpad
p2584
(dp2585
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp2586
Rp2587
(dp2588
g46
(tsg48
S'int8'
p2589
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp2590
sg130
g132
(g133
(I0
tp2591
g135
tp2592
Rp2593
(I1
(tg1967
I00
g1974
tp2594
bsb(tsg2117
(tsg216
(tsg516
(tsg2101
(tsg8
(g23
g10
Ntp2595
Rp2596
(dp2597
g29
I0
sg14
Nsg60
g63
sg69
(lp2598
sg27
S'auto_644'
p2599
sg30
(itheano.gof.utils
scratchpad
p2600
(dp2601
g33
(lp2602
sbsg40
g8
(g71
g10
Ntp2603
Rp2604
(dp2605
g6
(lp2606
g8
(g502
g10
Ntp2607
Rp2608
(dp2609
g27
S'auto_428'
p2610
sg29
Nsg30
(itheano.gof.utils
scratchpad
p2611
(dp2612
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp2613
Rp2614
(dp2615
g46
(tsg48
S'int8'
p2616
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp2617
sg130
g132
(g133
(I0
tp2618
g135
tp2619
Rp2620
(I1
(tg1967
I00
g2002
tp2621
bsbasg60
g63
sg76
(lp2622
g2596
asg30
(itheano.gof.utils
scratchpad
p2623
(dp2624
bsg239
(dp2625
sg241
g8
(g2008
g10
Ntp2626
Rp2627
(dp2628
g2012
(lp2629
sg251
(lp2630
sg249
(lp2631
sg255
(tsg2016
I00
sg256
(tsg253
g254
sbsbsg41
g8
(g42
g10
Ntp2632
Rp2633
(dp2634
g46
(tsg48
g2616
sg50
g1967
sg57
I00
sg14
Nsbsb(tsg8
(g23
g10
Ntp2635
Rp2636
(dp2637
g29
I0
sg14
Nsg60
g63
sg69
(lp2638
sg27
S'auto_719'
p2639
sg30
(itheano.gof.utils
scratchpad
p2640
(dp2641
g33
(lp2642
sbsg40
g8
(g71
g10
Ntp2643
Rp2644
(dp2645
g6
(lp2646
g2363
asg60
g63
sg76
(lp2647
g2636
asg30
(itheano.gof.utils
scratchpad
p2648
(dp2649
bsg239
(dp2650
sg241
g8
(g2008
g10
Ntp2651
Rp2652
(dp2653
g2012
(lp2654
sg251
(lp2655
sg249
(lp2656
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g257
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp2657
Rp2658
(dp2659
g46
(I01
I01
I01
I01
tp2660
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp2661
sg2423
(tsg8
(g78
g10
Ntp2662
Rp2663
(dp2664
g29
I0
sg14
Nsg60
g63
sg69
(lp2665
sg27
S'auto_804'
p2666
sg30
(itheano.gof.utils
scratchpad
p2667
(dp2668
g33
(lp2669
sbsg40
g8
(g71
g10
Ntp2670
Rp2671
(dp2672
g6
(lp2673
g8
(g502
g10
Ntp2674
Rp2675
(dp2676
g27
S'auto_761'
p2677
sg29
Nsg30
(itheano.gof.utils
scratchpad
p2678
(dp2679
g33
(lp2680
sg581
g205
(g54
S'\x00\x00\x00@'
p2681
tp2682
Rp2683
sbsg14
Nsg41
g8
(g42
g10
Ntp2684
Rp2685
(dp2686
g46
(I01
I01
I01
I01
tp2687
sg48
S'float32'
p2688
sg50
g54
sg57
I00
sg14
Nsbsg69
(lp2689
sg130
g132
(g133
(I0
tp2690
g135
tp2691
Rp2692
(I1
(I1
I1
I1
I1
tp2693
g54
I00
S'\x00\x00\x00@'
p2694
tp2695
bsbasg60
g63
sg76
(lp2696
g2663
asg30
(itheano.gof.utils
scratchpad
p2697
(dp2698
bsg239
(dp2699
sg241
g681
sbsg41
g121
sb(g2023
g2023
g2023
g2023
tp2700
sg2084
(tsg8
(g23
g10
Ntp2701
Rp2702
(dp2703
g29
I0
sg14
g15
sg60
g63
sg69
(lp2704
sg27
S'auto_882'
p2705
sg30
(itheano.gof.utils
scratchpad
p2706
(dp2707
g33
(lp2708
sbsg40
g8
(g71
g10
Ntp2709
Rp2710
(dp2711
g6
(lp2712
g80
asg60
g63
sg76
(lp2713
g2702
asg30
(itheano.gof.utils
scratchpad
p2714
(dp2715
bsg239
(dp2716
sg241
g921
sbsg41
g8
(g42
g10
Ntp2717
Rp2718
(dp2719
g46
(I00
I00
I00
I00
tp2720
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g445
g470
g588
g516
tp2721
sg8
(g23
g10
Ntp2722
Rp2723
(dp2724
g29
I0
sg14
Nsg60
g63
sg69
(lp2725
sg27
S'auto_513'
p2726
sg30
(itheano.gof.utils
scratchpad
p2727
(dp2728
g33
(lp2729
sbsg40
g8
(g71
g10
Ntp2730
Rp2731
(dp2732
g6
(lp2733
g8
(g23
g10
Ntp2734
Rp2735
(dp2736
g29
I0
sg14
Nsg60
g63
sg69
(lp2737
sg27
S'auto_508'
p2738
sg30
(itheano.gof.utils
scratchpad
p2739
(dp2740
g33
(lp2741
sbsg40
g8
(g71
g10
Ntp2742
Rp2743
(dp2744
g6
(lp2745
g8
(g23
g10
Ntp2746
Rp2747
(dp2748
g29
I0
sg14
Nsg60
g63
sg69
(lp2749
sg27
S'auto_503'
p2750
sg30
(itheano.gof.utils
scratchpad
p2751
(dp2752
g33
(lp2753
sbsg40
g8
(g71
g10
Ntp2754
Rp2755
(dp2756
g6
(lp2757
g8
(g23
g10
Ntp2758
Rp2759
(dp2760
g29
I0
sg14
Nsg60
g63
sg69
(lp2761
sg27
S'auto_498'
p2762
sg30
(itheano.gof.utils
scratchpad
p2763
(dp2764
g33
(lp2765
sbsg40
g8
(g71
g10
Ntp2766
Rp2767
(dp2768
g6
(lp2769
g516
ag8
(g502
g10
Ntp2770
Rp2771
(dp2772
g27
S'auto_494'
p2773
sg29
Nsg30
(itheano.gof.utils
scratchpad
p2774
(dp2775
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp2776
Rp2777
(dp2778
g46
(tsg48
S'int8'
p2779
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp2780
sg130
g132
(g133
(I0
tp2781
g135
tp2782
Rp2783
(I1
(tg1967
I00
S'\x00'
p2784
tp2785
bsbasg60
g63
sg76
(lp2786
g2759
asg30
(itheano.gof.utils
scratchpad
p2787
(dp2788
bsg239
(dp2789
sg241
g1323
sbsg41
g8
(g42
g10
Ntp2790
Rp2791
(dp2792
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbag2227
asg60
g63
sg76
(lp2793
g2747
asg30
(itheano.gof.utils
scratchpad
p2794
(dp2795
bsg239
(dp2796
sg241
g8
(g551
g10
Ntp2797
Rp2798
(dp2799
g646
g1325
sg555
g8
(ctheano.scalar.basic
Sub
p2800
g10
Ntp2801
Rp2802
(dp2803
g560
g737
sg253
g254
sg14
S'sub'
p2804
sbsg14
S'Elemwise{sub,no_inplace}'
p2805
sg253
g254
sg567
(dp2806
sg570
(S'subtract'
p2807
I2
I1
tp2808
sg573
(dp2809
sg575
I00
sg1333
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p2810
sbsbsg41
g8
(g42
g10
Ntp2811
Rp2812
(dp2813
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbag2608
asg60
g63
sg76
(lp2814
g2735
asg30
(itheano.gof.utils
scratchpad
p2815
(dp2816
bsg239
(dp2817
sg241
g8
(g551
g10
Ntp2818
Rp2819
(dp2820
g646
g1325
sg555
g8
(ctheano.scalar.basic
IntDiv
p2821
g10
Ntp2822
Rp2823
(dp2824
g560
g737
sg253
g254
sg14
S'int_div'
p2825
sbsg14
S'Elemwise{int_div,no_inplace}'
p2826
sg253
g254
sg567
(dp2827
sg570
(S'floor_divide'
p2828
I2
I1
tp2829
sg573
(dp2830
sg575
I00
sg1333
S"elementwise [floor] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p2831
sbsbsg41
g8
(g42
g10
Ntp2832
Rp2833
(dp2834
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbag2608
asg60
g63
sg76
(lp2835
g2723
asg30
(itheano.gof.utils
scratchpad
p2836
(dp2837
bsg239
(dp2838
sg241
g1323
sbsg41
g8
(g42
g10
Ntp2839
Rp2840
(dp2841
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg2227
(tsg2069
(tsg8
(g78
g10
Ntp2842
Rp2843
(dp2844
g29
I0
sg14
Nsg60
g63
sg69
(lp2845
sg27
S'auto_805'
p2846
sg30
(itheano.gof.utils
scratchpad
p2847
(dp2848
g33
(lp2849
sbsg40
g8
(g71
g10
Ntp2850
Rp2851
(dp2852
g6
(lp2853
g117
ag107
asg60
g63
sg76
(lp2854
g2843
asg30
(itheano.gof.utils
scratchpad
p2855
(dp2856
bsg239
(dp2857
sg241
g8
(g728
g10
Ntp2858
Rp2859
(dp2860
g573
(dp2861
sg253
g254
sg555
g735
sg739
I01
sg567
(dp2862
sg741
g8
(g742
g10
Ntp2863
Rp2864
(dp2865
g555
g735
sg739
I01
sg573
g2861
sbsbsbsg41
g8
(g119
g10
Ntp2866
Rp2867
(dp2868
g46
(I00
I00
I00
I00
tp2869
sg14
Nsbsb(g445
g470
g490
g540
tp2870
sg8
(g23
g10
Ntp2871
Rp2872
(dp2873
g29
I0
sg14
Nsg60
g63
sg69
(lp2874
sg27
S'auto_615'
p2875
sg30
(itheano.gof.utils
scratchpad
p2876
(dp2877
g33
(lp2878
sbsg40
g8
(g71
g10
Ntp2879
Rp2880
(dp2881
g6
(lp2882
g8
(g23
g10
Ntp2883
Rp2884
(dp2885
g29
I0
sg14
Nsg60
g63
sg69
(lp2886
sg27
S'auto_643'
p2887
sg30
(itheano.gof.utils
scratchpad
p2888
(dp2889
g33
(lp2890
sbsg40
g8
(g71
g10
Ntp2891
Rp2892
(dp2893
g6
(lp2894
g8
(g23
g10
Ntp2895
Rp2896
(dp2897
g29
I0
sg14
Nsg60
g63
sg69
(lp2898
sg27
S'auto_675'
p2899
sg30
(itheano.gof.utils
scratchpad
p2900
(dp2901
g1311
g1312
sg33
(lp2902
sbsg40
g8
(g71
g10
Ntp2903
Rp2904
(dp2905
g6
(lp2906
g516
ag1940
asg60
g63
sg76
(lp2907
g2896
asg30
(itheano.gof.utils
scratchpad
p2908
(dp2909
bsg239
(dp2910
sg241
g2798
sbsg41
g8
(g42
g10
Ntp2911
Rp2912
(dp2913
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbag8
(g502
g10
Ntp2914
Rp2915
(dp2916
g27
S'auto_699'
p2917
sg29
Nsg30
(itheano.gof.utils
scratchpad
p2918
(dp2919
g33
(lp2920
sg581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp2921
Rp2922
(dp2923
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsg69
(lp2924
sg130
g132
(g133
(I0
tp2925
g135
tp2926
Rp2927
(I1
(tg208
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p2928
tp2929
bsbasg60
g63
sg76
(lp2930
g2884
asg30
(itheano.gof.utils
scratchpad
p2931
(dp2932
bsg239
(dp2933
sg241
g2819
sbsg41
g8
(g42
g10
Ntp2934
Rp2935
(dp2936
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbag2915
asg60
g63
sg76
(lp2937
g2872
asg30
(itheano.gof.utils
scratchpad
p2938
(dp2939
bsg239
(dp2940
sg241
g1323
sbsg41
g8
(g42
g10
Ntp2941
Rp2942
(dp2943
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg2054
(tsg413
(g1908
tp2944
sg302
(g2023
g2023
g2023
g2023
tp2945
sg8
(g23
g10
Ntp2946
Rp2947
(dp2948
g29
I0
sg14
Nsg60
g63
sg69
(lp2949
sg27
S'auto_478'
p2950
sg30
(itheano.gof.utils
scratchpad
p2951
(dp2952
g33
(lp2953
sbsg40
g8
(g71
g10
Ntp2954
Rp2955
(dp2956
g6
(lp2957
g588
ag2771
asg60
g63
sg76
(lp2958
g2947
asg30
(itheano.gof.utils
scratchpad
p2959
(dp2960
bsg239
(dp2961
sg241
g1323
sbsg41
g8
(g42
g10
Ntp2962
Rp2963
(dp2964
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg8
(g23
g10
Ntp2965
Rp2966
(dp2967
g29
I0
sg14
Nsg60
g63
sg69
(lp2968
sg27
S'auto_625'
p2969
sg30
(itheano.gof.utils
scratchpad
p2970
(dp2971
g33
(lp2972
sbsg40
g8
(g71
g10
Ntp2973
Rp2974
(dp2975
g6
(lp2976
g8
(g23
g10
Ntp2977
Rp2978
(dp2979
g29
I0
sg14
Nsg60
g63
sg69
(lp2980
sg27
S'auto_624'
p2981
sg30
(itheano.gof.utils
scratchpad
p2982
(dp2983
g33
(lp2984
sbsg40
g8
(g71
g10
Ntp2985
Rp2986
(dp2987
g6
(lp2988
g2608
asg60
g63
sg76
(lp2989
g2978
asg30
(itheano.gof.utils
scratchpad
p2990
(dp2991
bsg239
(dp2992
sg241
g2515
sbsg41
g8
(g42
g10
Ntp2993
Rp2994
(dp2995
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp2996
g2966
asg30
(itheano.gof.utils
scratchpad
p2997
(dp2998
bsg239
(dp2999
sg241
g8
(g2008
g10
Ntp3000
Rp3001
(dp3002
g2012
(lp3003
sg251
(lp3004
sg249
(lp3005
sg255
(tsg2016
I00
sg256
(tsg253
g254
sbsbsg41
g8
(g42
g10
Ntp3006
Rp3007
(dp3008
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg2608
(tsg8
(g23
g10
Ntp3009
Rp3010
(dp3011
g29
I0
sg14
Nsg60
g63
sg69
(lp3012
sg27
S'auto_460'
p3013
sg30
(itheano.gof.utils
scratchpad
p3014
(dp3015
g33
(lp3016
(lp3017
(g770
I1113
g771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3018
tp3019
aasbsg40
g8
(g71
g10
Ntp3020
Rp3021
(dp3022
g6
(lp3023
g2039
ag2293
asg60
g63
sg76
(lp3024
g3010
asg30
(itheano.gof.utils
scratchpad
p3025
(dp3026
bsg239
(dp3027
sg241
g8
(g551
g10
Ntp3028
Rp3029
(dp3030
g14
Nsg555
g864
sg567
(dp3031
sg570
g2326
sg573
(dp3032
sg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3033
Rp3034
(dp3035
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(tsg490
(tsg8
(g78
g10
Ntp3036
Rp3037
(dp3038
g29
I0
sg14
Nsg60
g63
sg69
(lp3039
sg27
S'auto_818'
p3040
sg30
(itheano.gof.utils
scratchpad
p3041
(dp3042
g33
(lp3043
sbsg40
g8
(g71
g10
Ntp3044
Rp3045
(dp3046
g6
(lp3047
g2393
asg60
g63
sg76
(lp3048
g3037
asg30
(itheano.gof.utils
scratchpad
p3049
(dp3050
bsg239
(dp3051
sg241
g681
sbsg41
g8
(g119
g10
Ntp3052
Rp3053
(dp3054
g46
(tsg14
Nsbsb(tsg2162
(tsg8
(g23
g10
Ntp3055
Rp3056
(dp3057
g29
I0
sg14
Nsg60
g63
sg69
(lp3058
sg27
S'auto_461'
p3059
sg30
(itheano.gof.utils
scratchpad
p3060
(dp3061
g33
(lp3062
(lp3063
(g770
I1113
g771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3064
tp3065
aasbsg40
g8
(g71
g10
Ntp3066
Rp3067
(dp3068
g6
(lp3069
g3010
asg60
g63
sg76
(lp3070
g3056
asg30
(itheano.gof.utils
scratchpad
p3071
(dp3072
bsg239
(dp3073
sg241
g8
(g2008
g10
Ntp3074
Rp3075
(dp3076
g2012
(lp3077
sg251
(lp3078
sg249
(lp3079
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
(g15
g15
g15
g15
tp3080
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3081
Rp3082
(dp3083
g46
(I01
I01
I01
I01
tp3084
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp3085
sg170
(tsg8
(g502
g10
Ntp3086
Rp3087
(dp3088
g27
S'auto_509'
p3089
sg29
Nsg30
(itheano.gof.utils
scratchpad
p3090
(dp3091
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp3092
Rp3093
(dp3094
g46
(tsg48
S'int8'
p3095
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp3096
sg130
g132
(g133
(I0
tp3097
g135
tp3098
Rp3099
(I1
(tg1967
I00
g2002
tp3100
bsb(tsg8
(g23
g10
Ntp3101
Rp3102
(dp3103
g29
I0
sg14
Nsg60
g63
sg69
(lp3104
sg27
S'auto_711'
p3105
sg30
(itheano.gof.utils
scratchpad
p3106
(dp3107
g33
(lp3108
sbsg40
g8
(g71
g10
Ntp3109
Rp3110
(dp3111
g6
(lp3112
g2393
ag2363
ag2333
ag2293
asg60
g63
sg76
(lp3113
g3102
asg30
(itheano.gof.utils
scratchpad
p3114
(dp3115
bsg239
(dp3116
sg241
g8
(g551
g10
Ntp3117
Rp3118
(dp3119
g646
g1325
sg555
g735
sg14
S'Elemwise{mul,no_inplace}'
p3120
sg253
g254
sg567
(dp3121
sg570
(S'multiply'
p3122
I2
I1
tp3123
sg573
(dp3124
sg575
I00
sg1333
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p3125
sbsbsg41
g8
(g42
g10
Ntp3126
Rp3127
(dp3128
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(tsg8
(g23
g10
Ntp3129
Rp3130
(dp3131
g29
I0
sg14
Nsg60
g63
sg69
(lp3132
sg27
S'auto_462'
p3133
sg30
(itheano.gof.utils
scratchpad
p3134
(dp3135
g33
(lp3136
(lp3137
(g770
I1113
g771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3138
tp3139
aasbsg40
g8
(g71
g10
Ntp3140
Rp3141
(dp3142
g6
(lp3143
g2174
ag3056
asg60
g63
sg76
(lp3144
g3130
asg30
(itheano.gof.utils
scratchpad
p3145
(dp3146
bsg239
(dp3147
sg241
g8
(g551
g10
Ntp3148
Rp3149
(dp3150
g14
Nsg555
g2447
sg567
(dp3151
sg570
Nsg573
(dp3152
sg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3153
Rp3154
(dp3155
g46
(I00
I00
I00
I00
tp3156
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g445
g470
g490
g540
tp3157
sg2333
(tsg8
(g23
g10
Ntp3158
Rp3159
(dp3160
g29
I0
sg14
Nsg60
g63
sg69
(lp3161
sg27
S'auto_716'
p3162
sg30
(itheano.gof.utils
scratchpad
p3163
(dp3164
g1311
g1312
sg33
(lp3165
sbsg40
g8
(g71
g10
Ntp3166
Rp3167
(dp3168
g6
(lp3169
g8
(g23
g10
Ntp3170
Rp3171
(dp3172
g29
I0
sg14
Nsg60
g63
sg69
(lp3173
sg27
S'auto_705'
p3174
sg30
(itheano.gof.utils
scratchpad
p3175
(dp3176
g33
(lp3177
sbsg40
g8
(g71
g10
Ntp3178
Rp3179
(dp3180
g6
(lp3181
g2675
ag2189
asg60
g63
sg76
(lp3182
g3171
asg30
(itheano.gof.utils
scratchpad
p3183
(dp3184
bsg239
(dp3185
sg241
g3118
sbsg41
g8
(g42
g10
Ntp3186
Rp3187
(dp3188
g46
(I00
I00
I00
I00
tp3189
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag8
(g23
g10
Ntp3190
Rp3191
(dp3192
g29
I0
sg14
Nsg60
g63
sg69
(lp3193
sg27
S'auto_727'
p3194
sg30
(itheano.gof.utils
scratchpad
p3195
(dp3196
g33
(lp3197
sbsg40
g8
(g71
g10
Ntp3198
Rp3199
(dp3200
g6
(lp3201
g8
(g23
g10
Ntp3202
Rp3203
(dp3204
g29
I0
sg14
Nsg60
g63
sg69
(lp3205
sg27
S'auto_718'
p3206
sg30
(itheano.gof.utils
scratchpad
p3207
(dp3208
g33
(lp3209
sbsg40
g8
(g71
g10
Ntp3210
Rp3211
(dp3212
g6
(lp3213
g2393
asg60
g63
sg76
(lp3214
g3203
asg30
(itheano.gof.utils
scratchpad
p3215
(dp3216
bsg239
(dp3217
sg241
g8
(g2008
g10
Ntp3218
Rp3219
(dp3220
g2012
(lp3221
sg251
(lp3222
sg249
(lp3223
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g257
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3224
Rp3225
(dp3226
g46
(I01
I01
I01
I01
tp3227
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag2636
ag8
(g23
g10
Ntp3228
Rp3229
(dp3230
g29
I0
sg14
Nsg60
g63
sg69
(lp3231
sg27
S'auto_720'
p3232
sg30
(itheano.gof.utils
scratchpad
p3233
(dp3234
g33
(lp3235
sbsg40
g8
(g71
g10
Ntp3236
Rp3237
(dp3238
g6
(lp3239
g2333
asg60
g63
sg76
(lp3240
g3229
asg30
(itheano.gof.utils
scratchpad
p3241
(dp3242
bsg239
(dp3243
sg241
g8
(g2008
g10
Ntp3244
Rp3245
(dp3246
g2012
(lp3247
sg251
(lp3248
sg249
(lp3249
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g257
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3250
Rp3251
(dp3252
g46
(I01
I01
I01
I01
tp3253
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag2546
asg60
g63
sg76
(lp3254
g3191
asg30
(itheano.gof.utils
scratchpad
p3255
(dp3256
bsg239
(dp3257
sg241
g3118
sbsg41
g8
(g42
g10
Ntp3258
Rp3259
(dp3260
g46
(I01
I01
I01
I01
tp3261
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp3262
g3159
asg30
(itheano.gof.utils
scratchpad
p3263
(dp3264
bsg239
(dp3265
sg241
g2321
sbsg41
g8
(g42
g10
Ntp3266
Rp3267
(dp3268
g46
(I00
I00
I00
I00
tp3269
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g445
g470
g490
g540
tp3270
sg8
(g23
g10
Ntp3271
Rp3272
(dp3273
g29
I0
sg14
Nsg60
g63
sg69
(lp3274
sg27
S'auto_429'
p3275
sg30
(itheano.gof.utils
scratchpad
p3276
(dp3277
g33
(lp3278
sbsg40
g8
(g71
g10
Ntp3279
Rp3280
(dp3281
g6
(lp3282
g2608
asg60
g63
sg76
(lp3283
g3272
asg30
(itheano.gof.utils
scratchpad
p3284
(dp3285
bsg239
(dp3286
sg241
g8
(g2008
g10
Ntp3287
Rp3288
(dp3289
g2012
(lp3290
sg251
(lp3291
sg249
(lp3292
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
(g15
g15
g15
g15
tp3293
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3294
Rp3295
(dp3296
g46
(I01
I01
I01
I01
tp3297
sg48
g2616
sg50
g1967
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp3298
sg8
(g23
g10
Ntp3299
Rp3300
(dp3301
g29
I0
sg14
Nsg60
g63
sg69
(lp3302
sg27
S'auto_633'
p3303
sg30
(itheano.gof.utils
scratchpad
p3304
(dp3305
g33
(lp3306
sbsg40
g8
(g71
g10
Ntp3307
Rp3308
(dp3309
g6
(lp3310
g8
(g23
g10
Ntp3311
Rp3312
(dp3313
g29
I0
sg14
Nsg60
g63
sg69
(lp3314
sg27
S'auto_602'
p3315
sg30
(itheano.gof.utils
scratchpad
p3316
(dp3317
g33
(lp3318
sbsg40
g8
(g71
g10
Ntp3319
Rp3320
(dp3321
g6
(lp3322
g2608
asg60
g63
sg76
(lp3323
g3312
asg30
(itheano.gof.utils
scratchpad
p3324
(dp3325
bsg239
(dp3326
sg241
g8
(g2008
g10
Ntp3327
Rp3328
(dp3329
g2012
(lp3330
sg251
(lp3331
sg249
(lp3332
sg255
(tsg2016
I00
sg256
(tsg253
g254
sbsbsg41
g8
(g42
g10
Ntp3333
Rp3334
(dp3335
g46
(tsg48
g2616
sg50
g1967
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp3336
g3300
asg30
(itheano.gof.utils
scratchpad
p3337
(dp3338
bsg239
(dp3339
sg241
g2515
sbsg41
g8
(g42
g10
Ntp3340
Rp3341
(dp3342
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg8
(g23
g10
Ntp3343
Rp3344
(dp3345
g29
I0
sg14
Nsg60
g63
sg69
(lp3346
sg27
S'auto_463'
p3347
sg30
(itheano.gof.utils
scratchpad
p3348
(dp3349
g33
(lp3350
sbsg40
g8
(g71
g10
Ntp3351
Rp3352
(dp3353
g6
(lp3354
g3130
ag2212
asg60
g63
sg76
(lp3355
g3344
asg30
(itheano.gof.utils
scratchpad
p3356
(dp3357
bsg239
(dp3358
sg241
g8
(g551
g10
Ntp3359
Rp3360
(dp3361
g14
Nsg555
g735
sg567
(dp3362
sg570
g3123
sg573
(dp3363
sg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3364
Rp3365
(dp3366
g46
(I00
I00
I00
I00
tp3367
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g445
g470
g490
g540
tp3368
sg8
(g23
g10
Ntp3369
Rp3370
(dp3371
g29
I0
sg14
Nsg60
g63
sg69
(lp3372
sg27
S'auto_483'
p3373
sg30
(itheano.gof.utils
scratchpad
p3374
(dp3375
g33
(lp3376
sbsg40
g8
(g71
g10
Ntp3377
Rp3378
(dp3379
g6
(lp3380
g2947
ag2227
asg60
g63
sg76
(lp3381
g3370
asg30
(itheano.gof.utils
scratchpad
p3382
(dp3383
bsg239
(dp3384
sg241
g2798
sbsg41
g8
(g42
g10
Ntp3385
Rp3386
(dp3387
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg8
(g23
g10
Ntp3388
Rp3389
(dp3390
g29
I0
sg14
Nsg60
g63
sg69
(lp3391
sg27
S'auto_464'
p3392
sg30
(itheano.gof.utils
scratchpad
p3393
(dp3394
g33
(lp3395
(lp3396
(g770
I1113
g771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3397
tp3398
aasbsg40
g8
(g71
g10
Ntp3399
Rp3400
(dp3401
g6
(lp3402
g3344
ag8
(g23
g10
Ntp3403
Rp3404
(dp3405
g29
I0
sg14
Nsg60
g63
sg69
(lp3406
sg27
S'auto_438'
p3407
sg30
(itheano.gof.utils
scratchpad
p3408
(dp3409
g33
(lp3410
sbsg40
g8
(g71
g10
Ntp3411
Rp3412
(dp3413
g6
(lp3414
g2189
ag8
(g502
g10
Ntp3415
Rp3416
(dp3417
g27
S'auto_688'
p3418
sg29
Nsg30
(itheano.gof.utils
scratchpad
p3419
(dp3420
g33
(lp3421
sg581
g205
(g1967
g2002
tp3422
Rp3423
sbsg14
Nsg41
g3295
sg69
(lp3424
sg130
g132
(g133
(I0
tp3425
g135
tp3426
Rp3427
(I1
(I1
I1
I1
I1
tp3428
g1967
I00
g2002
tp3429
bsbasg60
g63
sg76
(lp3430
g3404
asg30
(itheano.gof.utils
scratchpad
p3431
(dp3432
bsg239
(dp3433
sg241
g8
(g551
g10
Ntp3434
Rp3435
(dp3436
g14
Nsg555
g2265
sg567
(dp3437
sg570
g2271
sg573
(dp3438
sg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3439
Rp3440
(dp3441
g46
(I00
I00
I00
I00
tp3442
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp3443
g3389
asg30
(itheano.gof.utils
scratchpad
p3444
(dp3445
bsg239
(dp3446
sg241
g8
(g551
g10
Ntp3447
Rp3448
(dp3449
g14
Nsg555
g735
sg567
(dp3450
sg570
g3123
sg573
(dp3451
sg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3452
Rp3453
(dp3454
g46
(I00
I00
I00
I00
tp3455
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g445
g470
g490
g540
tp3456
sg8
(g502
g10
Ntp3457
Rp3458
(dp3459
g27
S'auto_484'
p3460
sg29
Nsg30
(itheano.gof.utils
scratchpad
p3461
(dp3462
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp3463
Rp3464
(dp3465
g46
(tsg48
S'int8'
p3466
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp3467
sg130
g132
(g133
(I0
tp3468
g135
tp3469
Rp3470
(I1
(tg1967
I00
g2002
tp3471
bsb(tsg8
(g78
g10
Ntp3472
Rp3473
(dp3474
g29
I0
sg14
Nsg60
g63
sg69
(lp3475
sg27
S'auto_465'
p3476
sg30
(itheano.gof.utils
scratchpad
p3477
(dp3478
g33
(lp3479
(lp3480
(g770
I1113
g771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3481
tp3482
aasbsg40
g8
(g71
g10
Ntp3483
Rp3484
(dp3485
g6
(lp3486
g3159
asg60
g63
sg76
(lp3487
g3473
asg30
(itheano.gof.utils
scratchpad
p3488
(dp3489
bsg239
(dp3490
sg241
g681
sbsg41
g775
sb(g445
g470
g490
g540
tp3491
sg2212
(g2023
g2023
g2023
g2023
tp3492
sg8
(g23
g10
Ntp3493
Rp3494
(dp3495
g29
I0
sg14
Nsg60
g63
sg69
(lp3496
sg27
S'auto_647'
p3497
sg30
(itheano.gof.utils
scratchpad
p3498
(dp3499
g33
(lp3500
sbsg40
g8
(g71
g10
Ntp3501
Rp3502
(dp3503
g6
(lp3504
g3312
asg60
g63
sg76
(lp3505
g3494
asg30
(itheano.gof.utils
scratchpad
p3506
(dp3507
bsg239
(dp3508
sg241
g2515
sbsg41
g8
(g42
g10
Ntp3509
Rp3510
(dp3511
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg761
(g445
g470
g490
g540
tp3512
sg157
(g2023
g2023
g2023
g2023
tp3513
sg8
(g78
g10
Ntp3514
Rp3515
(dp3516
g29
I0
sg14
Nsg60
g63
sg69
(lp3517
sg27
S'auto_826'
p3518
sg30
(itheano.gof.utils
scratchpad
p3519
(dp3520
g33
(lp3521
sbsg40
g8
(g71
g10
Ntp3522
Rp3523
(dp3524
g6
(lp3525
g413
asg60
g63
sg76
(lp3526
g3515
asg30
(itheano.gof.utils
scratchpad
p3527
(dp3528
bsg239
(dp3529
sg241
g681
sbsg41
g8
(g119
g10
Ntp3530
Rp3531
(dp3532
g46
(I00
tp3533
sg14
Nsbsb(g1908
tp3534
sg8
(g502
g10
Ntp3535
Rp3536
(dp3537
g27
S'auto_515'
p3538
sg29
Nsg30
(itheano.gof.utils
scratchpad
p3539
(dp3540
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp3541
Rp3542
(dp3543
g46
(tsg48
S'float32'
p3544
sg50
g54
sg57
I00
sg14
Nsbsg69
(lp3545
sg130
g132
(g133
(I0
tp3546
g135
tp3547
Rp3548
(I1
(tg54
I00
S'\x00\x00\x00@'
p3549
tp3550
bsb(tsg890
(g445
g470
g588
g516
tp3551
sg3229
(g2023
g2023
g2023
g2023
tp3552
sg8
(g78
g10
Ntp3553
Rp3554
(dp3555
g29
I0
sg14
Nsg60
g63
sg69
(lp3556
sg27
S'auto_794'
p3557
sg30
(itheano.gof.utils
scratchpad
p3558
(dp3559
g33
(lp3560
sbsg40
g8
(g71
g10
Ntp3561
Rp3562
(dp3563
g6
(lp3564
g3191
asg60
g63
sg76
(lp3565
g3554
asg30
(itheano.gof.utils
scratchpad
p3566
(dp3567
bsg239
(dp3568
sg241
g681
sbsg41
g8
(g119
g10
Ntp3569
Rp3570
(dp3571
g46
(I01
I01
I01
I01
tp3572
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp3573
sg2174
(g445
g470
g490
g540
tp3574
sg8
(g23
g10
Ntp3575
Rp3576
(dp3577
g29
I0
sg14
Nsg60
g63
sg69
(lp3578
sg27
S'auto_488'
p3579
sg30
(itheano.gof.utils
scratchpad
p3580
(dp3581
g33
(lp3582
sbsg40
g8
(g71
g10
Ntp3583
Rp3584
(dp3585
g6
(lp3586
g3370
ag2608
asg60
g63
sg76
(lp3587
g3576
asg30
(itheano.gof.utils
scratchpad
p3588
(dp3589
bsg239
(dp3590
sg241
g2819
sbsg41
g8
(g42
g10
Ntp3591
Rp3592
(dp3593
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg8
(g23
g10
Ntp3594
Rp3595
(dp3596
g29
I0
sg14
Nsg60
g63
sg69
(lp3597
sg27
S'auto_433'
p3598
sg30
(itheano.gof.utils
scratchpad
p3599
(dp3600
g33
(lp3601
sbsg40
g8
(g71
g10
Ntp3602
Rp3603
(dp3604
g6
(lp3605
g2212
ag3272
asg60
g63
sg76
(lp3606
g3595
asg30
(itheano.gof.utils
scratchpad
p3607
(dp3608
bsg239
(dp3609
sg241
g8
(g551
g10
Ntp3610
Rp3611
(dp3612
g14
Nsg555
g2802
sg567
(dp3613
sg570
g2808
sg573
(dp3614
sg575
I00
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3615
Rp3616
(dp3617
g46
(I01
I01
I01
I01
tp3618
sg48
S'int8'
p3619
sg50
g1967
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp3620
sg8
(g78
g10
Ntp3621
Rp3622
(dp3623
g29
I0
sg14
Nsg60
g63
sg69
(lp3624
sg27
S'auto_432'
p3625
sg30
(itheano.gof.utils
scratchpad
p3626
(dp3627
g33
(lp3628
sbsg40
g8
(g71
g10
Ntp3629
Rp3630
(dp3631
g6
(lp3632
g8
(g23
g10
Ntp3633
Rp3634
(dp3635
g29
I0
sg14
g15
sg60
g63
sg69
(lp3636
sg27
S'auto_792'
p3637
sg30
(itheano.gof.utils
scratchpad
p3638
(dp3639
g33
(lp3640
sbsg40
g8
(g71
g10
Ntp3641
Rp3642
(dp3643
g6
(lp3644
g8
(g78
g10
Ntp3645
Rp3646
(dp3647
g29
I0
sg14
Nsg60
g63
sg69
(lp3648
sg27
S'auto_791'
p3649
sg30
(itheano.gof.utils
scratchpad
p3650
(dp3651
g33
(lp3652
sbsg40
g8
(g71
g10
Ntp3653
Rp3654
(dp3655
g6
(lp3656
g2702
asg60
g63
sg76
(lp3657
g3646
asg30
(itheano.gof.utils
scratchpad
p3658
(dp3659
bsg239
(dp3660
sg241
g681
sbsg41
g8
(g119
g10
Ntp3661
Rp3662
(dp3663
g46
(I00
I00
I00
I00
tp3664
sg14
Nsbsbasg60
g63
sg76
(lp3665
g3634
asg30
(itheano.gof.utils
scratchpad
p3666
(dp3667
bsg239
(dp3668
sg241
g921
sbsg41
g8
(g42
g10
Ntp3669
Rp3670
(dp3671
g46
(I00
I00
I00
I00
tp3672
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp3673
g3622
asg30
(itheano.gof.utils
scratchpad
p3674
(dp3675
bsg239
(dp3676
sg241
g681
sbsg41
g885
sb(g445
g470
g588
g516
tp3677
sg1485
(g445
g470
g588
g516
tp3678
sg8
(g502
g10
Ntp3679
Rp3680
(dp3681
g27
S'auto_489'
p3682
sg29
Nsg30
(itheano.gof.utils
scratchpad
p3683
(dp3684
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp3685
Rp3686
(dp3687
g46
(tsg48
S'int8'
p3688
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp3689
sg130
g132
(g133
(I0
tp3690
g135
tp3691
Rp3692
(I1
(tg1967
I00
g2002
tp3693
bsb(tsg8
(g23
g10
Ntp3694
Rp3695
(dp3696
g29
I0
sg14
Nsg60
g63
sg69
(lp3697
sg27
S'auto_576'
p3698
sg30
(itheano.gof.utils
scratchpad
p3699
(dp3700
g33
(lp3701
g3063
asbsg40
g8
(g71
g10
Ntp3702
Rp3703
(dp3704
g6
(lp3705
g8
(g23
g10
Ntp3706
Rp3707
(dp3708
g29
I0
sg14
Nsg60
g63
sg69
(lp3709
sg27
S'auto_571'
p3710
sg30
(itheano.gof.utils
scratchpad
p3711
(dp3712
g33
(lp3713
sbsg40
g8
(g71
g10
Ntp3714
Rp3715
(dp3716
g6
(lp3717
g8
(g23
g10
Ntp3718
Rp3719
(dp3720
g29
I0
sg14
Nsg60
g63
sg69
(lp3721
sg27
S'auto_585'
p3722
sg30
(itheano.gof.utils
scratchpad
p3723
(dp3724
g33
(lp3725
sbsg40
g8
(g71
g10
Ntp3726
Rp3727
(dp3728
g6
(lp3729
g8
(g502
g10
Ntp3730
Rp3731
(dp3732
g27
S'auto_695'
p3733
sg29
Nsg30
(itheano.gof.utils
scratchpad
p3734
(dp3735
g33
(lp3736
sg581
g205
(g54
S'\x00\x00\x80?'
p3737
tp3738
Rp3739
sbsg14
Nsg41
g8
(g42
g10
Ntp3740
Rp3741
(dp3742
g46
(I01
I01
I01
I01
tp3743
sg48
g2431
sg50
g54
sg57
I00
sg14
Nsbsg69
(lp3744
sg130
g132
(g133
(I0
tp3745
g135
tp3746
Rp3747
(I1
(I1
I1
I1
I1
tp3748
g54
I00
S'\x00\x00\x80?'
p3749
tp3750
bsbag8
(g23
g10
Ntp3751
Rp3752
(dp3753
g29
I0
sg14
Nsg60
g63
sg69
(lp3754
sg27
S'auto_562'
p3755
sg30
(itheano.gof.utils
scratchpad
p3756
(dp3757
g33
(lp3758
sbsg40
g8
(g71
g10
Ntp3759
Rp3760
(dp3761
g6
(lp3762
g2393
asg60
g63
sg76
(lp3763
g3752
asg30
(itheano.gof.utils
scratchpad
p3764
(dp3765
bsg239
(dp3766
sg241
g8
(g2008
g10
Ntp3767
Rp3768
(dp3769
g2012
(lp3770
sg251
(lp3771
sg249
(lp3772
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g3080
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3773
Rp3774
(dp3775
g46
(I01
I01
I01
I01
tp3776
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp3777
g3719
asg30
(itheano.gof.utils
scratchpad
p3778
(dp3779
bsg239
(dp3780
sg241
g2466
sbsg41
g8
(g42
g10
Ntp3781
Rp3782
(dp3783
g46
(I01
I01
I01
I01
tp3784
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag8
(g23
g10
Ntp3785
Rp3786
(dp3787
g29
I0
sg14
Nsg60
g63
sg69
(lp3788
sg27
S'auto_567'
p3789
sg30
(itheano.gof.utils
scratchpad
p3790
(dp3791
g33
(lp3792
sbsg40
g8
(g71
g10
Ntp3793
Rp3794
(dp3795
g6
(lp3796
g2363
asg60
g63
sg76
(lp3797
g3786
asg30
(itheano.gof.utils
scratchpad
p3798
(dp3799
bsg239
(dp3800
sg241
g8
(g2008
g10
Ntp3801
Rp3802
(dp3803
g2012
(lp3804
sg251
(lp3805
sg249
(lp3806
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g3080
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3807
Rp3808
(dp3809
g46
(I01
I01
I01
I01
tp3810
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp3811
g3707
asg30
(itheano.gof.utils
scratchpad
p3812
(dp3813
bsg239
(dp3814
sg241
g2478
sbsg41
g8
(g42
g10
Ntp3815
Rp3816
(dp3817
g46
(I01
I01
I01
I01
tp3818
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag8
(g23
g10
Ntp3819
Rp3820
(dp3821
g29
I0
sg14
Nsg60
g63
sg69
(lp3822
sg27
S'auto_572'
p3823
sg30
(itheano.gof.utils
scratchpad
p3824
(dp3825
g33
(lp3826
sbsg40
g8
(g71
g10
Ntp3827
Rp3828
(dp3829
g6
(lp3830
g2333
asg60
g63
sg76
(lp3831
g3820
asg30
(itheano.gof.utils
scratchpad
p3832
(dp3833
bsg239
(dp3834
sg241
g8
(g2008
g10
Ntp3835
Rp3836
(dp3837
g2012
(lp3838
sg251
(lp3839
sg249
(lp3840
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g3080
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3841
Rp3842
(dp3843
g46
(I01
I01
I01
I01
tp3844
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp3845
g3695
asg30
(itheano.gof.utils
scratchpad
p3846
(dp3847
bsg239
(dp3848
sg241
g2490
sbsg41
g8
(g42
g10
Ntp3849
Rp3850
(dp3851
g46
(I01
I01
I01
I01
tp3852
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp3853
sg8
(g78
g10
Ntp3854
Rp3855
(dp3856
g29
I0
sg14
Nsg60
g63
sg69
(lp3857
sg27
S'auto_815'
p3858
sg30
(itheano.gof.utils
scratchpad
p3859
(dp3860
g33
(lp3861
sbsg40
g8
(g71
g10
Ntp3862
Rp3863
(dp3864
g6
(lp3865
g3229
asg60
g63
sg76
(lp3866
g3855
asg30
(itheano.gof.utils
scratchpad
p3867
(dp3868
bsg239
(dp3869
sg241
g681
sbsg41
g8
(g119
g10
Ntp3870
Rp3871
(dp3872
g46
(I01
I01
I01
I01
tp3873
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp3874
sg8
(g78
g10
Ntp3875
Rp3876
(dp3877
g29
I0
sg14
Nsg60
g63
sg69
(lp3878
sg27
S'auto_793'
p3879
sg30
(itheano.gof.utils
scratchpad
p3880
(dp3881
g33
(lp3882
sbsg40
g8
(g71
g10
Ntp3883
Rp3884
(dp3885
g6
(lp3886
g3171
asg60
g63
sg76
(lp3887
g3876
asg30
(itheano.gof.utils
scratchpad
p3888
(dp3889
bsg239
(dp3890
sg241
g681
sbsg41
g8
(g119
g10
Ntp3891
Rp3892
(dp3893
g46
(I00
I00
I00
I00
tp3894
sg14
Nsbsb(g445
g470
g490
g540
tp3895
sg1989
(tsg8
(g23
g10
Ntp3896
Rp3897
(dp3898
g29
I0
sg14
Nsg60
g63
sg69
(lp3899
sg27
S'auto_577'
p3900
sg30
(itheano.gof.utils
scratchpad
p3901
(dp3902
g33
(lp3903
g3063
asbsg40
g8
(g71
g10
Ntp3904
Rp3905
(dp3906
g6
(lp3907
g2293
asg60
g63
sg76
(lp3908
g3897
asg30
(itheano.gof.utils
scratchpad
p3909
(dp3910
bsg239
(dp3911
sg241
g8
(g2008
g10
Ntp3912
Rp3913
(dp3914
g2012
(lp3915
sg251
(lp3916
sg249
(lp3917
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g3080
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp3918
Rp3919
(dp3920
g46
(I01
I01
I01
I01
tp3921
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp3922
sg8
(g23
g10
Ntp3923
Rp3924
(dp3925
g29
I0
sg14
Nsg60
g63
sg69
(lp3926
sg27
S'auto_753'
p3927
sg30
(itheano.gof.utils
scratchpad
p3928
(dp3929
g1311
g1312
sg33
(lp3930
sbsg40
g8
(g71
g10
Ntp3931
Rp3932
(dp3933
g6
(lp3934
g2915
ag2896
asg60
g63
sg76
(lp3935
g3924
asg30
(itheano.gof.utils
scratchpad
p3936
(dp3937
bsg239
(dp3938
sg241
g1323
sbsg41
g8
(g42
g10
Ntp3939
Rp3940
(dp3941
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg8
(g23
g10
Ntp3942
Rp3943
(dp3944
g29
I0
sg14
Nsg60
g63
sg69
(lp3945
sg27
S'auto_657'
p3946
sg30
(itheano.gof.utils
scratchpad
p3947
(dp3948
g33
(lp3949
sbsg40
g8
(g71
g10
Ntp3950
Rp3951
(dp3952
g6
(lp3953
g2947
ag8
(g23
g10
Ntp3954
Rp3955
(dp3956
g29
I0
sg14
Nsg60
g63
sg69
(lp3957
sg27
S'auto_653'
p3958
sg30
(itheano.gof.utils
scratchpad
p3959
(dp3960
g33
(lp3961
sbsg40
g8
(g71
g10
Ntp3962
Rp3963
(dp3964
g6
(lp3965
g8
(g23
g10
Ntp3966
Rp3967
(dp3968
g29
I0
sg14
Nsg60
g63
sg69
(lp3969
sg27
S'auto_652'
p3970
sg30
(itheano.gof.utils
scratchpad
p3971
(dp3972
g33
(lp3973
sbsg40
g8
(g71
g10
Ntp3974
Rp3975
(dp3976
g6
(lp3977
g2227
asg60
g63
sg76
(lp3978
g3967
asg30
(itheano.gof.utils
scratchpad
p3979
(dp3980
bsg239
(dp3981
sg241
g2515
sbsg41
g1947
sbasg60
g63
sg76
(lp3982
g3955
asg30
(itheano.gof.utils
scratchpad
p3983
(dp3984
bsg239
(dp3985
sg241
g8
(g2008
g10
Ntp3986
Rp3987
(dp3988
g2012
(lp3989
sg251
(lp3990
sg249
(lp3991
sg255
(tsg2016
I00
sg256
(tsg253
g254
sbsbsg41
g8
(g42
g10
Ntp3992
Rp3993
(dp3994
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp3995
g3943
asg30
(itheano.gof.utils
scratchpad
p3996
(dp3997
bsg239
(dp3998
sg241
g2798
sbsg41
g8
(g42
g10
Ntp3999
Rp4000
(dp4001
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg1589
(g2023
g2023
g2023
g2023
tp4002
sg225
(g2023
g2023
g2023
g2023
tp4003
sg2189
(g445
g470
g490
g540
tp4004
sg8
(g23
g10
Ntp4005
Rp4006
(dp4007
g29
I0
sg14
Nsg60
g63
sg69
(lp4008
sg27
S'auto_493'
p4009
sg30
(itheano.gof.utils
scratchpad
p4010
(dp4011
g33
(lp4012
sbsg40
g8
(g71
g10
Ntp4013
Rp4014
(dp4015
g6
(lp4016
g3576
ag2608
asg60
g63
sg76
(lp4017
g4006
asg30
(itheano.gof.utils
scratchpad
p4018
(dp4019
bsg239
(dp4020
sg241
g1323
sbsg41
g8
(g42
g10
Ntp4021
Rp4022
(dp4023
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg1305
(tsg3416
(g2023
g2023
g2023
g2023
tp4024
sg2771
(tsg8
(g78
g10
Ntp4025
Rp4026
(dp4027
g29
I0
sg14
Nsg60
g63
sg69
(lp4028
sg27
S'auto_832'
p4029
sg30
(itheano.gof.utils
scratchpad
p4030
(dp4031
g33
(lp4032
sbsg40
g8
(g71
g10
Ntp4033
Rp4034
(dp4035
g6
(lp4036
g413
asg60
g63
sg76
(lp4037
g4026
asg30
(itheano.gof.utils
scratchpad
p4038
(dp4039
bsg239
(dp4040
sg241
g681
sbsg41
g8
(g119
g10
Ntp4041
Rp4042
(dp4043
g46
(I00
tp4044
sg14
Nsbsb(g1908
tp4045
sg8
(g23
g10
Ntp4046
Rp4047
(dp4048
g29
I0
sg14
Nsg60
g63
sg69
(lp4049
sg27
S'auto_732'
p4050
sg30
(itheano.gof.utils
scratchpad
p4051
(dp4052
g33
(lp4053
sbsg40
g8
(g71
g10
Ntp4054
Rp4055
(dp4056
g6
(lp4057
g1989
asg60
g63
sg76
(lp4058
g4047
asg30
(itheano.gof.utils
scratchpad
p4059
(dp4060
bsg239
(dp4061
sg241
g644
sbsg41
g8
(g42
g10
Ntp4062
Rp4063
(dp4064
g46
(tsg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(tsg345
(tsg8
(g502
g10
Ntp4065
Rp4066
(dp4067
g27
S'auto_504'
p4068
sg29
Nsg30
(itheano.gof.utils
scratchpad
p4069
(dp4070
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp4071
Rp4072
(dp4073
g46
(tsg48
S'int8'
p4074
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp4075
sg130
g132
(g133
(I0
tp4076
g135
tp4077
Rp4078
(I1
(tg1967
I00
g2002
tp4079
bsb(tsg8
(g23
g10
Ntp4080
Rp4081
(dp4082
g29
I0
sg14
Nsg60
g63
sg69
(lp4083
sg27
S'auto_680'
p4084
sg30
(itheano.gof.utils
scratchpad
p4085
(dp4086
g33
(lp4087
sbsg40
g8
(g71
g10
Ntp4088
Rp4089
(dp4090
g6
(lp4091
g2608
asg60
g63
sg76
(lp4092
g4081
asg30
(itheano.gof.utils
scratchpad
p4093
(dp4094
bsg239
(dp4095
sg241
g8
(g2008
g10
Ntp4096
Rp4097
(dp4098
g2012
(lp4099
sg251
(lp4100
sg249
(lp4101
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
(g15
g15
g15
g15
tp4102
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp4103
Rp4104
(dp4105
g46
(I01
I01
I01
I01
tp4106
sg48
S'int8'
p4107
sg50
g1967
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4108
sg3404
(g445
g470
g490
g540
tp4109
sg2363
(tsg588
(tsg107
(g445
g470
g490
g540
tp4110
sg80
(g445
g470
g588
g516
tp4111
sg2759
(tsg752
(g445
g470
g490
g540
tp4112
sg89
(g445
g470
g588
g516
tp4113
sg144
(g2023
g2023
g2023
g2023
tp4114
sg2546
(g2023
g2023
g2023
g2023
tp4115
sg8
(g23
g10
Ntp4116
Rp4117
(dp4118
g29
I0
sg14
Nsg60
g63
sg69
(lp4119
sg27
S'auto_667'
p4120
sg30
(itheano.gof.utils
scratchpad
p4121
(dp4122
g33
(lp4123
sbsg40
g8
(g71
g10
Ntp4124
Rp4125
(dp4126
g6
(lp4127
g3967
asg60
g63
sg76
(lp4128
g4117
asg30
(itheano.gof.utils
scratchpad
p4129
(dp4130
bsg239
(dp4131
sg241
g8
(g2008
g10
Ntp4132
Rp4133
(dp4134
g2012
(lp4135
sg251
(lp4136
sg249
(lp4137
sg255
(tsg2016
I00
sg256
(tsg253
g254
sbsbsg41
g8
(g42
g10
Ntp4138
Rp4139
(dp4140
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg293
(tsg8
(g23
g10
Ntp4141
Rp4142
(dp4143
g29
I0
sg14
Nsg60
g63
sg69
(lp4144
sg27
S'auto_661'
p4145
sg30
(itheano.gof.utils
scratchpad
p4146
(dp4147
g1311
g1312
sg33
(lp4148
sbsg40
g8
(g71
g10
Ntp4149
Rp4150
(dp4151
g6
(lp4152
g588
ag1940
asg60
g63
sg76
(lp4153
g4142
asg30
(itheano.gof.utils
scratchpad
p4154
(dp4155
bsg239
(dp4156
sg241
g2798
sbsg41
g8
(g42
g10
Ntp4157
Rp4158
(dp4159
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg3646
(g445
g470
g588
g516
tp4160
sg429
(g8
(g502
g10
Ntp4161
Rp4162
(dp4163
g27
S'auto_591'
p4164
sg29
Nsg30
(itheano.gof.utils
scratchpad
p4165
(dp4166
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp4167
Rp4168
(dp4169
g46
(tsg48
S'int64'
p4170
sg50
g208
sg57
I00
sg14
Nsbsg130
g132
(g133
(I0
tp4171
g135
tp4172
Rp4173
(I1
(tg208
I00
S'\x04\x00\x00\x00\x00\x00\x00\x00'
p4174
tp4175
bsbtp4176
sg2978
(tsg688
(tsg2293
(tsg2747
(tsg3171
(g445
g470
g490
g540
tp4177
sg8
(g23
g10
Ntp4178
Rp4179
(dp4180
g29
I0
sg14
Nsg60
g63
sg69
(lp4181
sg27
S'auto_715'
p4182
sg30
(itheano.gof.utils
scratchpad
p4183
(dp4184
g33
(lp4185
sbsg40
g8
(g71
g10
Ntp4186
Rp4187
(dp4188
g6
(lp4189
g3102
asg60
g63
sg76
(lp4190
g4179
asg30
(itheano.gof.utils
scratchpad
p4191
(dp4192
bsg239
(dp4193
sg241
g8
(g2008
g10
Ntp4194
Rp4195
(dp4196
g2012
(lp4197
sg251
(lp4198
sg249
(lp4199
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g257
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp4200
Rp4201
(dp4202
g46
(I01
I01
I01
I01
tp4203
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4204
sg8
(g23
g10
Ntp4205
Rp4206
(dp4207
g29
I0
sg14
Nsg60
g63
sg69
(lp4208
sg27
S'auto_536'
p4209
sg30
(itheano.gof.utils
scratchpad
p4210
(dp4211
g33
(lp4212
sbsg40
g8
(g71
g10
Ntp4213
Rp4214
(dp4215
g6
(lp4216
g2162
asg60
g63
sg76
(lp4217
g4206
asg30
(itheano.gof.utils
scratchpad
p4218
(dp4219
bsg239
(dp4220
sg241
g8
(g2008
g10
Ntp4221
Rp4222
(dp4223
g2012
(lp4224
sg251
(lp4225
sg249
(lp4226
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g3080
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp4227
Rp4228
(dp4229
g46
(I01
I01
I01
I01
tp4230
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4231
sg8
(g502
g10
Ntp4232
Rp4233
(dp4234
g27
S'auto_758'
p4235
sg29
Nsg30
(itheano.gof.utils
scratchpad
p4236
(dp4237
g33
(lp4238
sg581
g205
(g1967
g2002
tp4239
Rp4240
sbsg14
Nsg41
g2019
sg69
(lp4241
sg130
g132
(g133
(I0
tp4242
g135
tp4243
Rp4244
(I1
(I1
I1
I1
I1
tp4245
g1967
I00
g2002
tp4246
bsb(g2023
g2023
g2023
g2023
tp4247
sg3820
(g2023
g2023
g2023
g2023
tp4248
sg8
(g502
g10
Ntp4249
Rp4250
(dp4251
g27
S'auto_766'
p4252
sg29
Nsg30
(itheano.gof.utils
scratchpad
p4253
(dp4254
g33
(lp4255
sg581
g205
(g54
S'\x00\x00\x80?'
p4256
tp4257
Rp4258
sbsg14
Nsg41
g8
(g42
g10
Ntp4259
Rp4260
(dp4261
g46
(I01
I01
I01
I01
tp4262
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsg69
(lp4263
sg130
g132
(g133
(I0
tp4264
g135
tp4265
Rp4266
(I1
(I1
I1
I1
I1
tp4267
g54
I00
S'\x00\x00\x80?'
p4268
tp4269
bsb(g2023
g2023
g2023
g2023
tp4270
sg8
(g23
g10
Ntp4271
Rp4272
(dp4273
g29
I0
sg14
Nsg60
g63
sg69
(lp4274
sg27
S'auto_671'
p4275
sg30
(itheano.gof.utils
scratchpad
p4276
(dp4277
g33
(lp4278
sbsg40
g8
(g71
g10
Ntp4279
Rp4280
(dp4281
g6
(lp4282
g2759
ag4117
asg60
g63
sg76
(lp4283
g4272
asg30
(itheano.gof.utils
scratchpad
p4284
(dp4285
bsg239
(dp4286
sg241
g2798
sbsg41
g8
(g42
g10
Ntp4287
Rp4288
(dp4289
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg8
(g23
g10
Ntp4290
Rp4291
(dp4292
g29
I0
sg14
Nsg60
g63
sg69
(lp4293
sg27
S'auto_704'
p4294
sg30
(itheano.gof.utils
scratchpad
p4295
(dp4296
g33
(lp4297
sbsg40
g8
(g71
g10
Ntp4298
Rp4299
(dp4300
g6
(lp4301
g8
(g502
g10
Ntp4302
Rp4303
(dp4304
g27
S'auto_700'
p4305
sg29
Nsg30
(itheano.gof.utils
scratchpad
p4306
(dp4307
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp4308
Rp4309
(dp4310
g46
(tsg48
g2688
sg50
g54
sg57
I00
sg14
Nsbsg69
(lp4311
sg130
g132
(g133
(I0
tp4312
g135
tp4313
Rp4314
(I1
(tg54
I00
S'\x00\x00\x00@'
p4315
tp4316
bsbasg60
g63
sg76
(lp4317
g4291
asg30
(itheano.gof.utils
scratchpad
p4318
(dp4319
bsg239
(dp4320
sg241
g8
(g2008
g10
Ntp4321
Rp4322
(dp4323
g2012
(lp4324
sg251
(lp4325
sg249
(lp4326
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
(g15
g15
g15
g15
tp4327
sg253
g254
sbsbsg41
g2685
sb(g2023
g2023
g2023
g2023
tp4328
sg8
(g23
g10
Ntp4329
Rp4330
(dp4331
g29
I0
sg14
Nsg60
g63
sg69
(lp4332
sg27
S'auto_537'
p4333
sg30
(itheano.gof.utils
scratchpad
p4334
(dp4335
g33
(lp4336
sbsg40
g8
(g71
g10
Ntp4337
Rp4338
(dp4339
g6
(lp4340
g2293
asg60
g63
sg76
(lp4341
g4330
asg30
(itheano.gof.utils
scratchpad
p4342
(dp4343
bsg239
(dp4344
sg241
g8
(g2008
g10
Ntp4345
Rp4346
(dp4347
g2012
(lp4348
sg251
(lp4349
sg249
(lp4350
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g3080
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp4351
Rp4352
(dp4353
g46
(I01
I01
I01
I01
tp4354
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4355
sg3191
(g2023
g2023
g2023
g2023
tp4356
sg3719
(g2023
g2023
g2023
g2023
tp4357
sg8
(g78
g10
Ntp4358
Rp4359
(dp4360
g29
I0
sg14
Nsg60
g63
sg69
(lp4361
sg27
S'auto_814'
p4362
sg30
(itheano.gof.utils
scratchpad
p4363
(dp4364
g33
(lp4365
sbsg40
g8
(g71
g10
Ntp4366
Rp4367
(dp4368
g6
(lp4369
g2636
asg60
g63
sg76
(lp4370
g4359
asg30
(itheano.gof.utils
scratchpad
p4371
(dp4372
bsg239
(dp4373
sg241
g681
sbsg41
g8
(g119
g10
Ntp4374
Rp4375
(dp4376
g46
(I01
I01
I01
I01
tp4377
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4378
sg8
(g23
g10
Ntp4379
Rp4380
(dp4381
g29
I0
sg14
Nsg60
g63
sg69
(lp4382
sg27
S'auto_629'
p4383
sg30
(itheano.gof.utils
scratchpad
p4384
(dp4385
g33
(lp4386
sbsg40
g8
(g71
g10
Ntp4387
Rp4388
(dp4389
g6
(lp4390
g4142
ag2915
asg60
g63
sg76
(lp4391
g4380
asg30
(itheano.gof.utils
scratchpad
p4392
(dp4393
bsg239
(dp4394
sg241
g2819
sbsg41
g8
(g42
g10
Ntp4395
Rp4396
(dp4397
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg2735
(tsg540
(tsg8
(g23
g10
Ntp4398
Rp4399
(dp4400
g29
I0
sg14
Nsg60
g63
sg69
(lp4401
sg27
S'auto_520'
p4402
sg30
(itheano.gof.utils
scratchpad
p4403
(dp4404
g33
(lp4405
sbsg40
g8
(g71
g10
Ntp4406
Rp4407
(dp4408
g6
(lp4409
g3536
asg60
g63
sg76
(lp4410
g4399
asg30
(itheano.gof.utils
scratchpad
p4411
(dp4412
bsg239
(dp4413
sg241
g8
(g2008
g10
Ntp4414
Rp4415
(dp4416
g2012
(lp4417
sg251
(lp4418
sg249
(lp4419
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
(g15
g15
g15
g15
tp4420
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp4421
Rp4422
(dp4423
g46
(I01
I01
I01
I01
tp4424
sg48
g3544
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4425
sg1509
(g2023
g2023
g2023
g2023
tp4426
sg3312
(tsg2675
(g2023
g2023
g2023
g2023
tp4427
sg8
(g23
g10
Ntp4428
Rp4429
(dp4430
g29
I0
sg14
Nsg60
g63
sg69
(lp4431
sg27
S'auto_611'
p4432
sg30
(itheano.gof.utils
scratchpad
p4433
(dp4434
g33
(lp4435
sbsg40
g8
(g71
g10
Ntp4436
Rp4437
(dp4438
g6
(lp4439
g8
(g23
g10
Ntp4440
Rp4441
(dp4442
g29
I0
sg14
Nsg60
g63
sg69
(lp4443
sg27
S'auto_610'
p4444
sg30
(itheano.gof.utils
scratchpad
p4445
(dp4446
g33
(lp4447
sbsg40
g8
(g71
g10
Ntp4448
Rp4449
(dp4450
g6
(lp4451
g2608
asg60
g63
sg76
(lp4452
g4441
asg30
(itheano.gof.utils
scratchpad
p4453
(dp4454
bsg239
(dp4455
sg241
g2515
sbsg41
g8
(g42
g10
Ntp4456
Rp4457
(dp4458
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp4459
g4429
asg30
(itheano.gof.utils
scratchpad
p4460
(dp4461
bsg239
(dp4462
sg241
g8
(g2008
g10
Ntp4463
Rp4464
(dp4465
g2012
(lp4466
sg251
(lp4467
sg249
(lp4468
sg255
(tsg2016
I00
sg256
(tsg253
g254
sbsbsg41
g8
(g42
g10
Ntp4469
Rp4470
(dp4471
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg8
(g23
g10
Ntp4472
Rp4473
(dp4474
g29
I0
sg14
Nsg60
g63
sg69
(lp4475
sg27
S'auto_521'
p4476
sg30
(itheano.gof.utils
scratchpad
p4477
(dp4478
g1311
g1312
sg33
(lp4479
sbsg40
g8
(g71
g10
Ntp4480
Rp4481
(dp4482
g6
(lp4483
g4399
ag3130
ag3404
asg60
g63
sg76
(lp4484
g4473
asg30
(itheano.gof.utils
scratchpad
p4485
(dp4486
bsg239
(dp4487
sg241
g3118
sbsg41
g8
(g42
g10
Ntp4488
Rp4489
(dp4490
g46
(I00
I00
I00
I00
tp4491
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g445
g470
g490
g540
tp4492
sg8
(g78
g10
Ntp4493
Rp4494
(dp4495
g29
I0
sg14
Nsg60
g63
sg69
(lp4496
sg27
S'auto_795'
p4497
sg30
(itheano.gof.utils
scratchpad
p4498
(dp4499
g33
(lp4500
sbsg40
g8
(g71
g10
Ntp4501
Rp4502
(dp4503
g6
(lp4504
g2843
ag144
asg60
g63
sg76
(lp4505
g4494
asg30
(itheano.gof.utils
scratchpad
p4506
(dp4507
bsg239
(dp4508
sg241
g8
(g728
g10
Ntp4509
Rp4510
(dp4511
g573
(dp4512
sg253
g254
sg555
g864
sg739
I01
sg567
(dp4513
sg741
g8
(g742
g10
Ntp4514
Rp4515
(dp4516
g555
g864
sg739
I01
sg573
g4512
sbsbsbsg41
g8
(g119
g10
Ntp4517
Rp4518
(dp4519
g46
(I00
I00
I00
I00
tp4520
sg14
Nsbsb(g445
g470
g490
g540
tp4521
sg8
(g23
g10
Ntp4522
Rp4523
(dp4524
g29
I0
sg14
Nsg60
g63
sg69
(lp4525
sg27
S'auto_746'
p4526
sg30
(itheano.gof.utils
scratchpad
p4527
(dp4528
g1311
g1312
sg33
(lp4529
sbsg40
g8
(g71
g10
Ntp4530
Rp4531
(dp4532
g6
(lp4533
g2915
ag4142
asg60
g63
sg76
(lp4534
g4523
asg30
(itheano.gof.utils
scratchpad
p4535
(dp4536
bsg239
(dp4537
sg241
g1323
sbsg41
g8
(g42
g10
Ntp4538
Rp4539
(dp4540
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg8
(g502
g10
Ntp4541
Rp4542
(dp4543
g27
S'auto_749'
p4544
sg29
Nsg30
(itheano.gof.utils
scratchpad
p4545
(dp4546
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp4547
Rp4548
(dp4549
g46
(tsg48
S'int64'
p4550
sg50
g208
sg57
I00
sg14
Nsbsg69
(lp4551
sg130
g132
(g133
(I0
tp4552
g135
tp4553
Rp4554
(I1
(tg208
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p4555
tp4556
bsb(tsg8
(g23
g10
Ntp4557
Rp4558
(dp4559
g29
I0
sg14
Nsg60
g63
sg69
(lp4560
sg27
S'auto_542'
p4561
sg30
(itheano.gof.utils
scratchpad
p4562
(dp4563
g33
(lp4564
sbsg40
g8
(g71
g10
Ntp4565
Rp4566
(dp4567
g6
(lp4568
g2333
asg60
g63
sg76
(lp4569
g4558
asg30
(itheano.gof.utils
scratchpad
p4570
(dp4571
bsg239
(dp4572
sg241
g8
(g2008
g10
Ntp4573
Rp4574
(dp4575
g2012
(lp4576
sg251
(lp4577
sg249
(lp4578
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g3080
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp4579
Rp4580
(dp4581
g46
(I01
I01
I01
I01
tp4582
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4583
sg8
(g78
g10
Ntp4584
Rp4585
(dp4586
g29
I0
sg14
Nsg60
g63
sg69
(lp4587
sg27
S'auto_836'
p4588
sg30
(itheano.gof.utils
scratchpad
p4589
(dp4590
g33
(lp4591
sbsg40
g8
(g71
g10
Ntp4592
Rp4593
(dp4594
g6
(lp4595
g2293
asg60
g63
sg76
(lp4596
g4585
asg30
(itheano.gof.utils
scratchpad
p4597
(dp4598
bsg239
(dp4599
sg241
g681
sbsg41
g8
(g119
g10
Ntp4600
Rp4601
(dp4602
g46
(tsg14
Nsbsb(tsg3707
(g2023
g2023
g2023
g2023
tp4603
sg504
(tsg8
(g23
g10
Ntp4604
Rp4605
(dp4606
g29
I0
sg14
Nsg60
g63
sg69
(lp4607
sg27
S'auto_630'
p4608
sg30
(itheano.gof.utils
scratchpad
p4609
(dp4610
g33
(lp4611
sbsg40
g8
(g71
g10
Ntp4612
Rp4613
(dp4614
g6
(lp4615
g2608
asg60
g63
sg76
(lp4616
g4605
asg30
(itheano.gof.utils
scratchpad
p4617
(dp4618
bsg239
(dp4619
sg241
g8
(g2008
g10
Ntp4620
Rp4621
(dp4622
g2012
(lp4623
sg251
(lp4624
sg249
(lp4625
sg255
(tsg2016
I00
sg256
(tsg253
g254
sbsbsg41
g8
(g42
g10
Ntp4626
Rp4627
(dp4628
g46
(tsg48
g2616
sg50
g1967
sg57
I00
sg14
Nsbsb(tsg8
(g502
g10
Ntp4629
Rp4630
(dp4631
g27
S'auto_593'
p4632
sg29
Nsg30
(itheano.gof.utils
scratchpad
p4633
(dp4634
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp4635
Rp4636
(dp4637
g46
(tsg48
S'int8'
p4638
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp4639
sg130
g132
(g133
(I0
tp4640
g135
tp4641
Rp4642
(I1
(tg1967
I00
g2002
tp4643
bsb(tsg1669
(g445
g470
g490
g540
tp4644
sg3731
(g2023
g2023
g2023
g2023
tp4645
sg8
(g23
g10
Ntp4646
Rp4647
(dp4648
g29
I0
sg14
Nsg60
g63
sg69
(lp4649
sg27
S'auto_741'
p4650
sg30
(itheano.gof.utils
scratchpad
p4651
(dp4652
g33
(lp4653
sbsg40
g8
(g71
g10
Ntp4654
Rp4655
(dp4656
g6
(lp4657
g4233
asg60
g63
sg76
(lp4658
g4647
asg30
(itheano.gof.utils
scratchpad
p4659
(dp4660
bsg239
(dp4661
sg241
g644
sbsg41
g4260
sb(g2023
g2023
g2023
g2023
tp4662
sg3955
(tsg8
(g23
g10
Ntp4663
Rp4664
(dp4665
g29
I0
sg14
Nsg60
g63
sg69
(lp4666
sg27
S'auto_526'
p4667
sg30
(itheano.gof.utils
scratchpad
p4668
(dp4669
g33
(lp4670
sbsg40
g8
(g71
g10
Ntp4671
Rp4672
(dp4673
g6
(lp4674
g8
(g502
g10
Ntp4675
Rp4676
(dp4677
g27
S'auto_698'
p4678
sg29
Nsg30
(itheano.gof.utils
scratchpad
p4679
(dp4680
g33
(lp4681
sg581
g205
(g54
S'\x00\x00\x00@'
p4682
tp4683
Rp4684
sbsg14
Nsg41
g4422
sg69
(lp4685
sg130
g132
(g133
(I0
tp4686
g135
tp4687
Rp4688
(I1
(I1
I1
I1
I1
tp4689
g54
I00
S'\x00\x00\x00@'
p4690
tp4691
bsbag8
(g23
g10
Ntp4692
Rp4693
(dp4694
g29
I0
sg14
Nsg60
g63
sg69
(lp4695
sg27
S'auto_581'
p4696
sg30
(itheano.gof.utils
scratchpad
p4697
(dp4698
g33
(lp4699
sbsg40
g8
(g71
g10
Ntp4700
Rp4701
(dp4702
g6
(lp4703
g3695
ag3897
asg60
g63
sg76
(lp4704
g4693
asg30
(itheano.gof.utils
scratchpad
p4705
(dp4706
bsg239
(dp4707
sg241
g3029
sbsg41
g8
(g42
g10
Ntp4708
Rp4709
(dp4710
g46
(I01
I01
I01
I01
tp4711
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag3404
asg60
g63
sg76
(lp4712
g4664
asg30
(itheano.gof.utils
scratchpad
p4713
(dp4714
bsg239
(dp4715
sg241
g3118
sbsg41
g8
(g42
g10
Ntp4716
Rp4717
(dp4718
g46
(I00
I00
I00
I00
tp4719
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g445
g470
g490
g540
tp4720
sg183
(g1908
tp4721
sg8
(g23
g10
Ntp4722
Rp4723
(dp4724
g29
I0
sg14
Nsg60
g63
sg69
(lp4725
sg27
S'auto_597'
p4726
sg30
(itheano.gof.utils
scratchpad
p4727
(dp4728
g33
(lp4729
sbsg40
g8
(g71
g10
Ntp4730
Rp4731
(dp4732
g6
(lp4733
g8
(g23
g10
Ntp4734
Rp4735
(dp4736
g29
I0
sg14
Nsg60
g63
sg69
(lp4737
sg27
S'auto_596'
p4738
sg30
(itheano.gof.utils
scratchpad
p4739
(dp4740
g33
(lp4741
sbsg40
g8
(g71
g10
Ntp4742
Rp4743
(dp4744
g6
(lp4745
g2608
asg60
g63
sg76
(lp4746
g4735
asg30
(itheano.gof.utils
scratchpad
p4747
(dp4748
bsg239
(dp4749
sg241
g2515
sbsg41
g8
(g42
g10
Ntp4750
Rp4751
(dp4752
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsbasg60
g63
sg76
(lp4753
g4723
asg30
(itheano.gof.utils
scratchpad
p4754
(dp4755
bsg239
(dp4756
sg241
g8
(g2008
g10
Ntp4757
Rp4758
(dp4759
g2012
(lp4760
sg251
(lp4761
sg249
(lp4762
sg255
(tsg2016
I00
sg256
(tsg253
g254
sbsbsg41
g8
(g42
g10
Ntp4763
Rp4764
(dp4765
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg8
(g502
g10
Ntp4766
Rp4767
(dp4768
g27
S'auto_474'
p4769
sg29
Nsg30
(itheano.gof.utils
scratchpad
p4770
(dp4771
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp4772
Rp4773
(dp4774
g46
(tsg48
S'int8'
p4775
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp4776
sg130
g132
(g133
(I0
tp4777
g135
tp4778
Rp4779
(I1
(tg1967
I00
g2784
tp4780
bsb(tsg8
(g23
g10
Ntp4781
Rp4782
(dp4783
g29
I0
sg14
Nsg60
g63
sg69
(lp4784
sg27
S'auto_546'
p4785
sg30
(itheano.gof.utils
scratchpad
p4786
(dp4787
g33
(lp4788
sbsg40
g8
(g71
g10
Ntp4789
Rp4790
(dp4791
g6
(lp4792
g8
(g23
g10
Ntp4793
Rp4794
(dp4795
g29
I0
sg14
Nsg60
g63
sg69
(lp4796
sg27
S'auto_541'
p4797
sg30
(itheano.gof.utils
scratchpad
p4798
(dp4799
g33
(lp4800
sbsg40
g8
(g71
g10
Ntp4801
Rp4802
(dp4803
g6
(lp4804
g4206
ag3897
asg60
g63
sg76
(lp4805
g4794
asg30
(itheano.gof.utils
scratchpad
p4806
(dp4807
bsg239
(dp4808
sg241
g2321
sbsg41
g8
(g42
g10
Ntp4809
Rp4810
(dp4811
g46
(I01
I01
I01
I01
tp4812
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag3820
asg60
g63
sg76
(lp4813
g4782
asg30
(itheano.gof.utils
scratchpad
p4814
(dp4815
bsg239
(dp4816
sg241
g2321
sbsg41
g8
(g42
g10
Ntp4817
Rp4818
(dp4819
g46
(I01
I01
I01
I01
tp4820
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4821
sg4735
(tsg4441
(tsg8
(g23
g10
Ntp4822
Rp4823
(dp4824
g29
I0
sg14
Nsg60
g63
sg69
(lp4825
sg27
S'auto_547'
p4826
sg30
(itheano.gof.utils
scratchpad
p4827
(dp4828
g33
(lp4829
sbsg40
g8
(g71
g10
Ntp4830
Rp4831
(dp4832
g6
(lp4833
g2363
asg60
g63
sg76
(lp4834
g4823
asg30
(itheano.gof.utils
scratchpad
p4835
(dp4836
bsg239
(dp4837
sg241
g8
(g2008
g10
Ntp4838
Rp4839
(dp4840
g2012
(lp4841
sg251
(lp4842
sg249
(lp4843
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g3080
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp4844
Rp4845
(dp4846
g46
(I01
I01
I01
I01
tp4847
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4848
sg4303
(tsg4693
(g2023
g2023
g2023
g2023
tp4849
sg8
(g502
g10
Ntp4850
Rp4851
(dp4852
g27
S'auto_691'
p4853
sg29
Nsg30
(itheano.gof.utils
scratchpad
p4854
(dp4855
g33
(lp4856
sg581
Nsbsg14
Nsg41
g3334
sg69
(lp4857
sg130
g132
(g133
(I0
tp4858
g135
tp4859
Rp4860
(I1
(tg1967
I00
g2002
tp4861
bsb(tsg2896
(tsg8
(g23
g10
Ntp4862
Rp4863
(dp4864
g29
I0
sg14
Nsg60
g63
sg69
(lp4865
sg27
S'auto_681'
p4866
sg30
(itheano.gof.utils
scratchpad
p4867
(dp4868
g33
(lp4869
sbsg40
g8
(g71
g10
Ntp4870
Rp4871
(dp4872
g6
(lp4873
g2212
ag3272
asg60
g63
sg76
(lp4874
g4863
asg30
(itheano.gof.utils
scratchpad
p4875
(dp4876
bsg239
(dp4877
sg241
g2443
sbsg41
g8
(g42
g10
Ntp4878
Rp4879
(dp4880
g46
(I01
I01
I01
I01
tp4881
sg48
g3619
sg50
g1967
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4882
sg4676
(g2023
g2023
g2023
g2023
tp4883
sg8
(g502
g10
Ntp4884
Rp4885
(dp4886
g27
S'auto_676'
p4887
sg29
Nsg30
(itheano.gof.utils
scratchpad
p4888
(dp4889
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp4890
Rp4891
(dp4892
g46
(tsg48
g4107
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp4893
sg130
g132
(g133
(I0
tp4894
g135
tp4895
Rp4896
(I1
(tg1967
I00
g2002
tp4897
bsb(tsg8
(g23
g10
Ntp4898
Rp4899
(dp4900
g29
I0
sg14
Nsg60
g63
sg69
(lp4901
sg27
S'auto_737'
p4902
sg30
(itheano.gof.utils
scratchpad
p4903
(dp4904
g33
(lp4905
sbsg40
g8
(g71
g10
Ntp4906
Rp4907
(dp4908
g6
(lp4909
g2189
ag4250
asg60
g63
sg76
(lp4910
g4899
asg30
(itheano.gof.utils
scratchpad
p4911
(dp4912
bsg239
(dp4913
sg241
g3435
sbsg41
g8
(g42
g10
Ntp4914
Rp4915
(dp4916
g46
(I00
I00
I00
I00
tp4917
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g445
g470
g490
g540
tp4918
sg8
(g23
g10
Ntp4919
Rp4920
(dp4921
g29
I0
sg14
Nsg60
g63
sg69
(lp4922
sg27
S'auto_601'
p4923
sg30
(itheano.gof.utils
scratchpad
p4924
(dp4925
g33
(lp4926
sbsg40
g8
(g71
g10
Ntp4927
Rp4928
(dp4929
g6
(lp4930
g4380
ag2915
asg60
g63
sg76
(lp4931
g4920
asg30
(itheano.gof.utils
scratchpad
p4932
(dp4933
bsg239
(dp4934
sg241
g1323
sbsg41
g8
(g42
g10
Ntp4935
Rp4936
(dp4937
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg3967
(tsg8
(g23
g10
Ntp4938
Rp4939
(dp4940
g29
I0
sg14
Nsg60
g63
sg69
(lp4941
sg27
S'auto_551'
p4942
sg30
(itheano.gof.utils
scratchpad
p4943
(dp4944
g33
(lp4945
sbsg40
g8
(g71
g10
Ntp4946
Rp4947
(dp4948
g6
(lp4949
g4782
ag3786
asg60
g63
sg76
(lp4950
g4939
asg30
(itheano.gof.utils
scratchpad
p4951
(dp4952
bsg239
(dp4953
sg241
g2321
sbsg41
g8
(g42
g10
Ntp4954
Rp4955
(dp4956
g46
(I01
I01
I01
I01
tp4957
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4958
sg1629
(g2023
g2023
g2023
g2023
tp4959
sg1549
(g2023
g2023
g2023
g2023
tp4960
sg2884
(tsg8
(g23
g10
Ntp4961
Rp4962
(dp4963
g29
I0
sg14
Nsg60
g63
sg69
(lp4964
sg27
S'auto_552'
p4965
sg30
(itheano.gof.utils
scratchpad
p4966
(dp4967
g33
(lp4968
sbsg40
g8
(g71
g10
Ntp4969
Rp4970
(dp4971
g6
(lp4972
g2393
asg60
g63
sg76
(lp4973
g4962
asg30
(itheano.gof.utils
scratchpad
p4974
(dp4975
bsg239
(dp4976
sg241
g8
(g2008
g10
Ntp4977
Rp4978
(dp4979
g2012
(lp4980
sg251
(lp4981
sg249
(lp4982
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g3080
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp4983
Rp4984
(dp4985
g46
(I01
I01
I01
I01
tp4986
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp4987
sg8
(g23
g10
Ntp4988
Rp4989
(dp4990
g29
I0
sg14
Nsg60
g63
sg69
(lp4991
sg27
S'auto_616'
p4992
sg30
(itheano.gof.utils
scratchpad
p4993
(dp4994
g33
(lp4995
sbsg40
g8
(g71
g10
Ntp4996
Rp4997
(dp4998
g6
(lp4999
g2608
asg60
g63
sg76
(lp5000
g4989
asg30
(itheano.gof.utils
scratchpad
p5001
(dp5002
bsg239
(dp5003
sg241
g8
(g2008
g10
Ntp5004
Rp5005
(dp5006
g2012
(lp5007
sg251
(lp5008
sg249
(lp5009
sg255
(tsg2016
I00
sg256
(tsg253
g254
sbsbsg41
g8
(g42
g10
Ntp5010
Rp5011
(dp5012
g46
(tsg48
g2616
sg50
g1967
sg57
I00
sg14
Nsbsb(tsg8
(g23
g10
Ntp5013
Rp5014
(dp5015
g29
I0
sg14
Nsg60
g63
sg69
(lp5016
sg27
S'auto_685'
p5017
sg30
(itheano.gof.utils
scratchpad
p5018
(dp5019
g1311
g1312
sg33
(lp5020
sbsg40
g8
(g71
g10
Ntp5021
Rp5022
(dp5023
g6
(lp5024
g3272
ag4863
asg60
g63
sg76
(lp5025
g5014
asg30
(itheano.gof.utils
scratchpad
p5026
(dp5027
bsg239
(dp5028
sg241
g2443
sbsg41
g8
(g42
g10
Ntp5029
Rp5030
(dp5031
g46
(I01
I01
I01
I01
tp5032
sg48
g3619
sg50
g1967
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp5033
sg366
(g2023
g2023
g2023
g2023
tp5034
sg8
(g502
g10
Ntp5035
Rp5036
(dp5037
g27
S'auto_499'
p5038
sg29
Nsg30
(itheano.gof.utils
scratchpad
p5039
(dp5040
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp5041
Rp5042
(dp5043
g46
(tsg48
S'int8'
p5044
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp5045
sg130
g132
(g133
(I0
tp5046
g135
tp5047
Rp5048
(I1
(tg1967
I00
g1974
tp5049
bsb(tsg8
(g502
g10
Ntp5050
Rp5051
(dp5052
g27
S'auto_621'
p5053
sg29
Nsg30
(itheano.gof.utils
scratchpad
p5054
(dp5055
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp5056
Rp5057
(dp5058
g46
(tsg48
S'int8'
p5059
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp5060
sg130
g132
(g133
(I0
tp5061
g135
tp5062
Rp5063
(I1
(tg1967
I00
g2002
tp5064
bsb(tsg357
(tsg8
(g78
g10
Ntp5065
Rp5066
(dp5067
g29
I0
sg14
Nsg60
g63
sg69
(lp5068
sg27
S'auto_830'
p5069
sg30
(itheano.gof.utils
scratchpad
p5070
(dp5071
g33
(lp5072
sbsg40
g8
(g71
g10
Ntp5073
Rp5074
(dp5075
g6
(lp5076
g2333
asg60
g63
sg76
(lp5077
g5066
asg30
(itheano.gof.utils
scratchpad
p5078
(dp5079
bsg239
(dp5080
sg241
g681
sbsg41
g8
(g119
g10
Ntp5081
Rp5082
(dp5083
g46
(tsg14
Nsbsb(tsg4794
(g2023
g2023
g2023
g2023
tp5084
sg8
(g23
g10
Ntp5085
Rp5086
(dp5087
g29
I0
sg14
Nsg60
g63
sg69
(lp5088
sg27
S'auto_605'
p5089
sg30
(itheano.gof.utils
scratchpad
p5090
(dp5091
g33
(lp5092
sbsg40
g8
(g71
g10
Ntp5093
Rp5094
(dp5095
g6
(lp5096
g4851
asg60
g63
sg76
(lp5097
g5086
asg30
(itheano.gof.utils
scratchpad
p5098
(dp5099
bsg239
(dp5100
sg241
g2515
sbsg41
g2922
sb(tsg2915
(tsg8
(g23
g10
Ntp5101
Rp5102
(dp5103
g29
I0
sg14
Nsg60
g63
sg69
(lp5104
sg27
S'auto_556'
p5105
sg30
(itheano.gof.utils
scratchpad
p5106
(dp5107
g33
(lp5108
sbsg40
g8
(g71
g10
Ntp5109
Rp5110
(dp5111
g6
(lp5112
g4939
ag3752
asg60
g63
sg76
(lp5113
g5102
asg30
(itheano.gof.utils
scratchpad
p5114
(dp5115
bsg239
(dp5116
sg241
g2321
sbsg41
g8
(g42
g10
Ntp5117
Rp5118
(dp5119
g46
(I01
I01
I01
I01
tp5120
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp5121
sg3786
(g2023
g2023
g2023
g2023
tp5122
sg8
(g502
g10
Ntp5123
Rp5124
(dp5125
g27
S'auto_742'
p5126
sg29
Nsg30
(itheano.gof.utils
scratchpad
p5127
(dp5128
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp5129
Rp5130
(dp5131
g46
(tsg48
S'int64'
p5132
sg50
g208
sg57
I00
sg14
Nsbsg69
(lp5133
sg130
g132
(g133
(I0
tp5134
g135
tp5135
Rp5136
(I1
(tg208
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p5137
tp5138
bsb(tsg899
(g445
g470
g588
g516
tp5139
sg8
(g23
g10
Ntp5140
Rp5141
(dp5142
g29
I0
sg14
Nsg60
g63
sg69
(lp5143
sg27
S'auto_557'
p5144
sg30
(itheano.gof.utils
scratchpad
p5145
(dp5146
g33
(lp5147
sbsg40
g8
(g71
g10
Ntp5148
Rp5149
(dp5150
g6
(lp5151
g2423
asg60
g63
sg76
(lp5152
g5141
asg30
(itheano.gof.utils
scratchpad
p5153
(dp5154
bsg239
(dp5155
sg241
g8
(g2008
g10
Ntp5156
Rp5157
(dp5158
g2012
(lp5159
sg251
(lp5160
sg249
(lp5161
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g3080
sg253
g254
sbsbsg41
g3741
sb(g2023
g2023
g2023
g2023
tp5162
sg8
(g78
g10
Ntp5163
Rp5164
(dp5165
g29
I0
sg14
Nsg60
g63
sg69
(lp5166
sg27
S'auto_813'
p5167
sg30
(itheano.gof.utils
scratchpad
p5168
(dp5169
g33
(lp5170
sbsg40
g8
(g71
g10
Ntp5171
Rp5172
(dp5173
g6
(lp5174
g3203
asg60
g63
sg76
(lp5175
g5164
asg30
(itheano.gof.utils
scratchpad
p5176
(dp5177
bsg239
(dp5178
sg241
g681
sbsg41
g8
(g119
g10
Ntp5179
Rp5180
(dp5181
g46
(I01
I01
I01
I01
tp5182
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp5183
sg8
(g78
g10
Ntp5184
Rp5185
(dp5186
g29
I0
sg14
Nsg60
g63
sg69
(lp5187
sg27
S'auto_824'
p5188
sg30
(itheano.gof.utils
scratchpad
p5189
(dp5190
g33
(lp5191
sbsg40
g8
(g71
g10
Ntp5192
Rp5193
(dp5194
g6
(lp5195
g2363
asg60
g63
sg76
(lp5196
g5185
asg30
(itheano.gof.utils
scratchpad
p5197
(dp5198
bsg239
(dp5199
sg241
g681
sbsg41
g8
(g119
g10
Ntp5200
Rp5201
(dp5202
g46
(tsg14
Nsbsb(tsg8
(g502
g10
Ntp5203
Rp5204
(dp5205
g27
S'auto_607'
p5206
sg29
Nsg30
(itheano.gof.utils
scratchpad
p5207
(dp5208
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp5209
Rp5210
(dp5211
g46
(tsg48
S'int8'
p5212
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp5213
sg130
g132
(g133
(I0
tp5214
g135
tp5215
Rp5216
(I1
(tg1967
I00
g2002
tp5217
bsb(tsg1343
(tsg8
(g502
g10
Ntp5218
Rp5219
(dp5220
g27
S'auto_649'
p5221
sg29
Nsg30
(itheano.gof.utils
scratchpad
p5222
(dp5223
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp5224
Rp5225
(dp5226
g46
(tsg48
S'int8'
p5227
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp5228
sg130
g132
(g133
(I0
tp5229
g135
tp5230
Rp5231
(I1
(tg1967
I00
g1974
tp5232
bsb(tsg2147
(tsg8
(g23
g10
Ntp5233
Rp5234
(dp5235
g29
I0
sg14
Nsg60
g63
sg69
(lp5236
sg27
S'auto_566'
p5237
sg30
(itheano.gof.utils
scratchpad
p5238
(dp5239
g33
(lp5240
sbsg40
g8
(g71
g10
Ntp5241
Rp5242
(dp5243
g6
(lp5244
g8
(g23
g10
Ntp5245
Rp5246
(dp5247
g29
I0
sg14
Nsg60
g63
sg69
(lp5248
sg27
S'auto_561'
p5249
sg30
(itheano.gof.utils
scratchpad
p5250
(dp5251
g33
(lp5252
sbsg40
g8
(g71
g10
Ntp5253
Rp5254
(dp5255
g6
(lp5256
g5102
ag5141
asg60
g63
sg76
(lp5257
g5246
asg30
(itheano.gof.utils
scratchpad
p5258
(dp5259
bsg239
(dp5260
sg241
g2443
sbsg41
g8
(g42
g10
Ntp5261
Rp5262
(dp5263
g46
(I01
I01
I01
I01
tp5264
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsbag3752
asg60
g63
sg76
(lp5265
g5234
asg30
(itheano.gof.utils
scratchpad
p5266
(dp5267
bsg239
(dp5268
sg241
g2466
sbsg41
g8
(g42
g10
Ntp5269
Rp5270
(dp5271
g46
(I01
I01
I01
I01
tp5272
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp5273
sg8
(g502
g10
Ntp5274
Rp5275
(dp5276
g27
S'auto_635'
p5277
sg29
Nsg30
(itheano.gof.utils
scratchpad
p5278
(dp5279
g581
Nsbsg14
Nsg41
g8
(g42
g10
Ntp5280
Rp5281
(dp5282
g46
(tsg48
S'int8'
p5283
sg50
g1967
sg57
I00
sg14
Nsbsg69
(lp5284
sg130
g132
(g133
(I0
tp5285
g135
tp5286
Rp5287
(I1
(tg1967
I00
g2002
tp5288
bsb(tsg8
(g23
g10
Ntp5289
Rp5290
(dp5291
g29
I0
sg14
Nsg60
g63
sg69
(lp5292
sg27
S'auto_733'
p5293
sg30
(itheano.gof.utils
scratchpad
p5294
(dp5295
g33
(lp5296
sbsg40
g8
(g71
g10
Ntp5297
Rp5298
(dp5299
g6
(lp5300
g4047
asg60
g63
sg76
(lp5301
g5290
asg30
(itheano.gof.utils
scratchpad
p5302
(dp5303
bsg239
(dp5304
sg241
g8
(g2008
g10
Ntp5305
Rp5306
(dp5307
g2012
(lp5308
sg251
(lp5309
sg249
(lp5310
I0
aI1
aI2
aI3
asg255
(tsg2016
I00
sg256
g2017
sg253
g254
sbsbsg41
g8
(g42
g10
Ntp5311
Rp5312
(dp5313
g46
(I01
I01
I01
I01
tp5314
sg48
g660
sg50
g54
sg57
I00
sg14
Nsbsb(g2023
g2023
g2023
g2023
tp5315
sg2393
(tsg3634
(g445
g470
g588
g516
tp5316
sg281
(tsg5246
(g2023
g2023
g2023
g2023
tp5317
sg8
(g23
g10
Ntp5318
Rp5319
(dp5320
g29
I0
sg14
Nsg60
g63
sg69
(lp5321
sg27
S'auto_638'
p5322
sg30
(itheano.gof.utils
scratchpad
p5323
(dp5324
g33
(lp5325
sbsg40
g8
(g71
g10
Ntp5326
Rp5327
(dp5328
g6
(lp5329
g2608
asg60
g63
sg76
(lp5330
g5319
asg30
(itheano.gof.utils
scratchpad
p5331
(dp5332
bsg239
(dp5333
sg241
g2515
sbsg41
g8
(g42
g10
Ntp5334
Rp5335
(dp5336
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg8
(g23
g10
Ntp5337
Rp5338
(dp5339
g29
I0
sg14
Nsg60
g63
sg69
(lp5340
sg27
S'auto_639'
p5341
sg30
(itheano.gof.utils
scratchpad
p5342
(dp5343
g33
(lp5344
sbsg40
g8
(g71
g10
Ntp5345
Rp5346
(dp5347
g6
(lp5348
g5319
asg60
g63
sg76
(lp5349
g5338
asg30
(itheano.gof.utils
scratchpad
p5350
(dp5351
bsg239
(dp5352
sg241
g8
(g2008
g10
Ntp5353
Rp5354
(dp5355
g2012
(lp5356
sg251
(lp5357
sg249
(lp5358
sg255
(tsg2016
I00
sg256
(tsg253
g254
sbsbsg41
g8
(g42
g10
Ntp5359
Rp5360
(dp5361
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg3203
(g2023
g2023
g2023
g2023
tp5362
sg8
(g23
g10
Ntp5363
Rp5364
(dp5365
g29
I0
sg14
Nsg60
g63
sg69
(lp5366
sg27
S'auto_619'
p5367
sg30
(itheano.gof.utils
scratchpad
p5368
(dp5369
g33
(lp5370
sbsg40
g8
(g71
g10
Ntp5371
Rp5372
(dp5373
g6
(lp5374
g3312
asg60
g63
sg76
(lp5375
g5364
asg30
(itheano.gof.utils
scratchpad
p5376
(dp5377
bsg239
(dp5378
sg241
g2515
sbsg41
g8
(g42
g10
Ntp5379
Rp5380
(dp5381
g46
(tsg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(tsg3752
(g2023
g2023
g2023
g2023
tp5382
sg8
(g23
g10
Ntp5383
Rp5384
(dp5385
g29
I0
sg14
Nsg60
g63
sg69
(lp5386
sg27
S'auto_440'
p5387
sg30
(itheano.gof.utils
scratchpad
p5388
(dp5389
g33
(lp5390
g437
asbsg40
g8
(g71
g10
Ntp5391
Rp5392
(dp5393
g6
(lp5394
g2174
asg60
g63
sg76
(lp5395
g5384
asg30
(itheano.gof.utils
scratchpad
p5396
(dp5397
bsg239
(dp5398
sg241
g8
(ctheano.compile.ops
Shape
p5399
g10
Ntp5400
Rp5401
(dp5402
g253
g254
sbsbsg41
g8
(g42
g10
Ntp5403
Rp5404
(dp5405
g46
(I00
tp5406
sg48
g199
sg50
g208
sg57
I00
sg14
Nsbsb(g1908
tp5407
ssS'lscalar_one'
p5408
g2023
sS'shape_of_reverse_index'
p5409
(dp5410
g1924
g1054
((lp5411
tp5412
Rp5413
sg445
g1054
((lp5414
g3389
ag4494
ag3473
ag761
ag80
ag3171
ag2702
ag890
ag899
ag2189
ag89
ag3876
ag1485
ag4664
ag2174
ag4899
ag4473
ag2843
ag3404
ag1669
ag67
ag107
ag3634
ag3646
ag752
ag3130
ag3159
ag3622
ag3344
atp5415
Rp5416
sg8
(g23
g10
Ntp5417
Rp5418
(dp5419
g27
S'auto_796'
p5420
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5421
(dp5422
g33
(lp5423
sbsg14
Nsg40
g8
(g71
g10
Ntp5424
Rp5425
(dp5426
g6
(lp5427
g4494
asg30
(itheano.gof.utils
scratchpad
p5428
(dp5429
bsg76
(lp5430
g5418
asg241
g8
(g461
g10
Ntp5431
Rp5432
(dp5433
g465
I0
sg253
g254
sbsbsg41
g467
sbg1054
((lp5434
g4494
atp5435
Rp5436
sg4359
g1054
((lp5437
tp5438
Rp5439
sg4605
g1054
((lp5440
tp5441
Rp5442
sg4989
g1054
((lp5443
tp5444
Rp5445
sg3855
g1054
((lp5446
tp5447
Rp5448
sg5164
g1054
((lp5449
tp5450
Rp5451
sg1305
g1054
((lp5452
tp5453
Rp5454
sg8
(g23
g10
Ntp5455
Rp5456
(dp5457
g27
S'auto_899'
p5458
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5459
(dp5460
g33
(lp5461
sbsg14
Nsg40
g8
(g71
g10
Ntp5462
Rp5463
(dp5464
g6
(lp5465
g1669
asg30
(itheano.gof.utils
scratchpad
p5466
(dp5467
bsg76
(lp5468
g5456
asg241
g8
(g461
g10
Ntp5469
Rp5470
(dp5471
g465
I0
sg253
g254
sbsbsg41
g467
sbg1054
((lp5472
g1669
atp5473
Rp5474
sg588
g1054
((lp5475
g899
ag67
ag89
ag1485
ag3646
ag3622
ag80
ag2702
ag890
ag3634
atp5476
Rp5477
sg2534
g1054
((lp5478
tp5479
Rp5480
sg516
g1054
((lp5481
g899
ag67
ag89
ag1485
ag3646
ag3622
ag80
ag2702
ag890
ag3634
atp5482
Rp5483
sg4767
g1054
((lp5484
tp5485
Rp5486
sg2723
g1054
((lp5487
tp5488
Rp5489
sg2702
g1054
((lp5490
tp5491
Rp5492
sg5185
g1054
((lp5493
tp5494
Rp5495
sg2872
g1054
((lp5496
tp5497
Rp5498
sg2596
g1054
((lp5499
tp5500
Rp5501
sg3943
g1054
((lp5502
tp5503
Rp5504
sg8
(g23
g10
Ntp5505
Rp5506
(dp5507
g27
S'auto_869'
p5508
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5509
(dp5510
g33
(lp5511
sbsg14
Nsg40
g8
(g71
g10
Ntp5512
Rp5513
(dp5514
g6
(lp5515
g752
asg30
(itheano.gof.utils
scratchpad
p5516
(dp5517
bsg76
(lp5518
g5506
asg241
g8
(g461
g10
Ntp5519
Rp5520
(dp5521
g465
I3
sg253
g254
sbsbsg41
g467
sbg1054
((lp5522
g752
atp5523
Rp5524
sg2581
g1054
((lp5525
tp5526
Rp5527
sg490
g1054
((lp5528
g3389
ag4473
ag3130
ag4494
ag107
ag3473
ag752
ag761
ag4899
ag3344
ag3171
ag2843
ag4664
ag3159
ag3876
ag3404
ag2189
ag1669
ag2174
atp5529
Rp5530
sg3037
g1054
((lp5531
tp5532
Rp5533
sg2747
g1054
((lp5534
tp5535
Rp5536
sg3300
g1054
((lp5537
tp5538
Rp5539
sg3494
g1054
((lp5540
tp5541
Rp5542
sg1629
g1054
((lp5543
tp5544
Rp5545
sg3622
g1054
((lp5546
tp5547
Rp5548
sg3272
g1054
((lp5549
tp5550
Rp5551
sg3056
g1054
((lp5552
tp5553
Rp5554
sg3370
g1054
((lp5555
tp5556
Rp5557
sg3389
g1054
((lp5558
tp5559
Rp5560
sg3458
g1054
((lp5561
tp5562
Rp5563
sg2735
g1054
((lp5564
tp5565
Rp5566
sg3087
g1054
((lp5567
tp5568
Rp5569
sg4899
g1054
((lp5570
tp5571
Rp5572
sg8
(g23
g10
Ntp5573
Rp5574
(dp5575
g27
S'auto_866'
p5576
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5577
(dp5578
g33
(lp5579
sbsg14
Nsg40
g8
(g71
g10
Ntp5580
Rp5581
(dp5582
g6
(lp5583
g752
asg30
(itheano.gof.utils
scratchpad
p5584
(dp5585
bsg76
(lp5586
g5574
asg241
g8
(g461
g10
Ntp5587
Rp5588
(dp5589
g465
I0
sg253
g254
sbsbsg41
g467
sbg1054
((lp5590
g752
atp5591
Rp5592
sg470
g1054
((lp5593
g3389
ag4494
ag3473
ag761
ag80
ag3171
ag2702
ag890
ag899
ag2189
ag89
ag3876
ag1485
ag4664
ag2174
ag4899
ag4473
ag2843
ag3404
ag1669
ag67
ag107
ag3634
ag3646
ag752
ag3130
ag3159
ag3622
ag3344
atp5594
Rp5595
sg3967
g1054
((lp5596
tp5597
Rp5598
sg3576
g1054
((lp5599
tp5600
Rp5601
sg3595
g1054
((lp5602
tp5603
Rp5604
sg1485
g1054
((lp5605
tp5606
Rp5607
sg5051
g1054
((lp5608
tp5609
Rp5610
sg5066
g1054
((lp5611
tp5612
Rp5613
sg3876
g1054
((lp5614
tp5615
Rp5616
sg2663
g1054
((lp5617
tp5618
Rp5619
sg5141
g1054
((lp5620
tp5621
Rp5622
sg8
(g23
g10
Ntp5623
Rp5624
(dp5625
g27
S'auto_807'
p5626
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5627
(dp5628
g33
(lp5629
sbsg14
Nsg40
g8
(g71
g10
Ntp5630
Rp5631
(dp5632
g6
(lp5633
g2843
asg30
(itheano.gof.utils
scratchpad
p5634
(dp5635
bsg76
(lp5636
g5624
asg241
g8
(g461
g10
Ntp5637
Rp5638
(dp5639
g465
I1
sg253
g254
sbsbsg41
g467
sbg1054
((lp5640
g2843
atp5641
Rp5642
sg1589
g1054
((lp5643
tp5644
Rp5645
sg3554
g1054
((lp5646
tp5647
Rp5648
sg4006
g1054
((lp5649
tp5650
Rp5651
sg8
(g23
g10
Ntp5652
Rp5653
(dp5654
g27
S'auto_808'
p5655
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5656
(dp5657
g33
(lp5658
sbsg14
Nsg40
g8
(g71
g10
Ntp5659
Rp5660
(dp5661
g6
(lp5662
g2843
asg30
(itheano.gof.utils
scratchpad
p5663
(dp5664
bsg76
(lp5665
g5653
asg241
g8
(g461
g10
Ntp5666
Rp5667
(dp5668
g465
I2
sg253
g254
sbsbsg41
g467
sbg1054
((lp5669
g2843
atp5670
Rp5671
sg4026
g1054
((lp5672
tp5673
Rp5674
sg4162
g1054
((lp5675
g429
atp5676
Rp5677
sg8
(g23
g10
Ntp5678
Rp5679
(dp5680
g27
S'auto_806'
p5681
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5682
(dp5683
g33
(lp5684
sbsg14
Nsg40
g8
(g71
g10
Ntp5685
Rp5686
(dp5687
g6
(lp5688
g2843
asg30
(itheano.gof.utils
scratchpad
p5689
(dp5690
bsg76
(lp5691
g5679
asg241
g8
(g461
g10
Ntp5692
Rp5693
(dp5694
g465
I0
sg253
g254
sbsbsg41
g467
sbg1054
((lp5695
g2843
atp5696
Rp5697
sg4081
g1054
((lp5698
tp5699
Rp5700
sg3404
g1054
((lp5701
tp5702
Rp5703
sg67
g1054
((lp5704
tp5705
Rp5706
sg1956
g1054
((lp5707
tp5708
Rp5709
sg752
g1054
((lp5710
tp5711
Rp5712
sg5036
g1054
((lp5713
tp5714
Rp5715
sg144
g1054
((lp5716
tp5717
Rp5718
sg4823
g1054
((lp5719
tp5720
Rp5721
sg4066
g1054
((lp5722
tp5723
Rp5724
sg2023
g1054
((lp5725
g4693
ag144
ag2534
ag1549
ag4863
ag2212
ag1977
ag4359
ag5290
ag4939
ag4206
ag117
ag3229
ag3820
ag5164
ag4962
ag4250
ag3595
ag3855
ag4291
ag4330
ag3695
ag2546
ag3719
ag3897
ag5141
ag4399
ag1589
ag2636
ag3554
ag3203
ag5102
ag2675
ag302
ag3786
ag4233
ag3416
ag4794
ag2663
ag4676
ag4558
ag3707
ag4081
ag366
ag4179
ag5234
ag5014
ag3731
ag4647
ag1509
ag3191
ag3056
ag1629
ag4782
ag157
ag3272
ag5246
ag225
ag4823
ag3752
atp5726
Rp5727
sg2499
g1054
((lp5728
tp5729
Rp5730
sg5219
g1054
((lp5731
tp5732
Rp5733
sg2966
g1054
((lp5734
tp5735
Rp5736
sg1908
g1054
((lp5737
g183
ag413
ag4026
ag1888
ag5384
ag3515
atp5738
Rp5739
sg8
(g23
g10
Ntp5740
Rp5741
(dp5742
g27
S'auto_809'
p5743
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5744
(dp5745
g33
(lp5746
sbsg14
Nsg40
g8
(g71
g10
Ntp5747
Rp5748
(dp5749
g6
(lp5750
g2843
asg30
(itheano.gof.utils
scratchpad
p5751
(dp5752
bsg76
(lp5753
g5741
asg241
g8
(g461
g10
Ntp5754
Rp5755
(dp5756
g465
I3
sg253
g254
sbsbsg41
g467
sbg1054
((lp5757
g2843
atp5758
Rp5759
sg8
(g23
g10
Ntp5760
Rp5761
(dp5762
g27
S'auto_867'
p5763
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5764
(dp5765
g33
(lp5766
sbsg14
Nsg40
g8
(g71
g10
Ntp5767
Rp5768
(dp5769
g6
(lp5770
g752
asg30
(itheano.gof.utils
scratchpad
p5771
(dp5772
bsg76
(lp5773
g5761
asg241
g8
(g461
g10
Ntp5774
Rp5775
(dp5776
g465
I1
sg253
g254
sbsbsg41
g467
sbg1054
((lp5777
g752
atp5778
Rp5779
sg4272
g1054
((lp5780
tp5781
Rp5782
sg1888
g1054
((lp5783
tp5784
Rp5785
sg4330
g1054
((lp5786
tp5787
Rp5788
sg4291
g1054
((lp5789
tp5790
Rp5791
sg4380
g1054
((lp5792
tp5793
Rp5794
sg3473
g1054
((lp5795
tp5796
Rp5797
sg540
g1054
((lp5798
g3389
ag4473
ag3130
ag4494
ag107
ag3473
ag752
ag761
ag4899
ag3344
ag3171
ag2843
ag4664
ag3159
ag3876
ag3404
ag2189
ag1669
ag2174
atp5799
Rp5800
sg4399
g1054
((lp5801
tp5802
Rp5803
sg1509
g1054
((lp5804
tp5805
Rp5806
sg4473
g1054
((lp5807
tp5808
Rp5809
sg4494
g1054
((lp5810
tp5811
Rp5812
sg4523
g1054
((lp5813
tp5814
Rp5815
sg899
g1054
((lp5816
tp5817
Rp5818
sg8
(g23
g10
Ntp5819
Rp5820
(dp5821
g27
S'auto_799'
p5822
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5823
(dp5824
g33
(lp5825
sbsg14
Nsg40
g8
(g71
g10
Ntp5826
Rp5827
(dp5828
g6
(lp5829
g4494
asg30
(itheano.gof.utils
scratchpad
p5830
(dp5831
bsg76
(lp5832
g5820
asg241
g8
(g461
g10
Ntp5833
Rp5834
(dp5835
g465
I3
sg253
g254
sbsbsg41
g467
sbg1054
((lp5836
g4494
atp5837
Rp5838
sg4558
g1054
((lp5839
tp5840
Rp5841
sg4585
g1054
((lp5842
tp5843
Rp5844
sg5384
g1054
((lp5845
tp5846
Rp5847
sg8
(g23
g10
Ntp5848
Rp5849
(dp5850
g27
S'auto_902'
p5851
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5852
(dp5853
g33
(lp5854
sbsg14
Nsg40
g8
(g71
g10
Ntp5855
Rp5856
(dp5857
g6
(lp5858
g1669
asg30
(itheano.gof.utils
scratchpad
p5859
(dp5860
bsg76
(lp5861
g5849
asg241
g8
(g461
g10
Ntp5862
Rp5863
(dp5864
g465
I3
sg253
g254
sbsbsg41
g467
sbg1054
((lp5865
g1669
atp5866
Rp5867
sg4885
g1054
((lp5868
tp5869
Rp5870
sg4630
g1054
((lp5871
tp5872
Rp5873
sg4664
g1054
((lp5874
tp5875
Rp5876
sg4723
g1054
((lp5877
tp5878
Rp5879
sg8
(g23
g10
Ntp5880
Rp5881
(dp5882
g27
S'auto_900'
p5883
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5884
(dp5885
g33
(lp5886
sbsg14
Nsg40
g8
(g71
g10
Ntp5887
Rp5888
(dp5889
g6
(lp5890
g1669
asg30
(itheano.gof.utils
scratchpad
p5891
(dp5892
bsg76
(lp5893
g5881
asg241
g8
(g461
g10
Ntp5894
Rp5895
(dp5896
g465
I1
sg253
g254
sbsbsg41
g467
sbg1054
((lp5897
g1669
atp5898
Rp5899
sg5290
g1054
((lp5900
tp5901
Rp5902
sg8
(g23
g10
Ntp5903
Rp5904
(dp5905
g27
S'auto_798'
p5906
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5907
(dp5908
g33
(lp5909
sbsg14
Nsg40
g8
(g71
g10
Ntp5910
Rp5911
(dp5912
g6
(lp5913
g4494
asg30
(itheano.gof.utils
scratchpad
p5914
(dp5915
bsg76
(lp5916
g5904
asg241
g8
(g461
g10
Ntp5917
Rp5918
(dp5919
g465
I2
sg253
g254
sbsbsg41
g467
sbg1054
((lp5920
g4494
atp5921
Rp5922
sg8
(g23
g10
Ntp5923
Rp5924
(dp5925
g27
S'auto_901'
p5926
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5927
(dp5928
g33
(lp5929
sbsg14
Nsg40
g8
(g71
g10
Ntp5930
Rp5931
(dp5932
g6
(lp5933
g1669
asg30
(itheano.gof.utils
scratchpad
p5934
(dp5935
bsg76
(lp5936
g5924
asg241
g8
(g461
g10
Ntp5937
Rp5938
(dp5939
g465
I2
sg253
g254
sbsbsg41
g467
sbg1054
((lp5940
g1669
atp5941
Rp5942
sg4863
g1054
((lp5943
tp5944
Rp5945
sg4542
g1054
((lp5946
tp5947
Rp5948
sg4920
g1054
((lp5949
tp5950
Rp5951
sg8
(g23
g10
Ntp5952
Rp5953
(dp5954
g27
S'auto_797'
p5955
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5956
(dp5957
g33
(lp5958
sbsg14
Nsg40
g8
(g71
g10
Ntp5959
Rp5960
(dp5961
g6
(lp5962
g4494
asg30
(itheano.gof.utils
scratchpad
p5963
(dp5964
bsg76
(lp5965
g5953
asg241
g8
(g461
g10
Ntp5966
Rp5967
(dp5968
g465
I1
sg253
g254
sbsbsg41
g467
sbg1054
((lp5969
g4494
atp5970
Rp5971
sg2884
g1054
((lp5972
tp5973
Rp5974
sg4962
g1054
((lp5975
tp5976
Rp5977
sg5014
g1054
((lp5978
tp5979
Rp5980
sg4647
g1054
((lp5981
tp5982
Rp5983
sg1977
g1054
((lp5984
tp5985
Rp5986
sg1549
g1054
((lp5987
tp5988
Rp5989
sg1669
g1054
((lp5990
tp5991
Rp5992
sg8
(g23
g10
Ntp5993
Rp5994
(dp5995
g27
S'auto_868'
p5996
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p5997
(dp5998
g33
(lp5999
sbsg14
Nsg40
g8
(g71
g10
Ntp6000
Rp6001
(dp6002
g6
(lp6003
g752
asg30
(itheano.gof.utils
scratchpad
p6004
(dp6005
bsg76
(lp6006
g5994
asg241
g8
(g461
g10
Ntp6007
Rp6008
(dp6009
g465
I2
sg253
g254
sbsbsg41
g467
sbg1054
((lp6010
g752
atp6011
Rp6012
sg5086
g1054
((lp6013
tp6014
Rp6015
sg5124
g1054
((lp6016
tp6017
Rp6018
sg3312
g1054
((lp6019
tp6020
Rp6021
sg3924
g1054
((lp6022
tp6023
Rp6024
sg5204
g1054
((lp6025
tp6026
Rp6027
sg5364
g1054
((lp6028
tp6029
Rp6030
sg4179
g1054
((lp6031
tp6032
Rp6033
sg5234
g1054
((lp6034
tp6035
Rp6036
sg5275
g1054
((lp6037
tp6038
Rp6039
sg4429
g1054
((lp6040
tp6041
Rp6042
sg3634
g1054
((lp6043
tp6044
Rp6045
sg3646
g1054
((lp6046
tp6047
Rp6048
sg5338
g1054
((lp6049
tp6050
Rp6051
sg3680
g1054
((lp6052
tp6053
Rp6054
sg1343
g1054
((lp6055
tp6056
Rp6057
sg3515
g1054
((lp6058
tp6059
Rp6060
ssbsS'apply_nodes'
p6061
g1054
((lp6062
g441
ag454
ag960
ag525
ag277
ag597
ag153
ag179
ag479
ag425
ag361
ag512
ag188
ag499
ag409
ag756
ag73
ag103
ag894
ag341
ag166
ag297
ag112
ag220
ag93
ag84
atp6063
Rp6064
sS'variables'
p6065
g1054
((lp6066
g429
ag193
ag445
ag98
ag470
ag117
ag225
ag67
ag144
ag516
ag688
ag504
ag170
ag281
ag413
ag366
ag216
ag183
ag761
ag890
ag357
ag899
ag540
ag302
ag157
ag490
ag345
ag107
ag80
ag752
ag89
ag588
ag293
atp6067
Rp6068
sS'_features'
p6069
(lp6070
g8
(ctheano.gof.toolbox
ReplaceValidate
p6071
g10
Ntp6072
Rp6073
a(itheano.compile.function_module
Supervisor
p6074
(dp6075
S'protected'
p6076
(lp6077
g67
asbag8
(ctheano.gof.toolbox
PreserveNames
p6078
g10
Ntp6079
Rp6080
ag1049
ag1882
ag1124
asbsg76
g8
(ctheano.compile.io
SymbolicOutput
p6081
g10
Ntp6082
Rp6083
(dp6084
g22
g8
(g23
g10
Ntp6085
Rp6086
(dp6087
g27
S'auto_425'
p6088
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6089
(dp6090
g33
g908
sbsg14
g901
sg40
g8
(g71
g10
Ntp6091
Rp6092
(dp6093
g6
(lp6094
g8
(g78
g10
Ntp6095
Rp6096
(dp6097
g27
S'auto_424'
p6098
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6099
(dp6100
g33
g927
sbsg14
Nsg40
g8
(g71
g10
Ntp6101
Rp6102
(dp6103
g6
(lp6104
g8
(g78
g10
Ntp6105
Rp6106
(dp6107
g27
S'auto_392'
p6108
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6109
(dp6110
g33
g1009
sbsg14
Nsg40
g8
(g71
g10
Ntp6111
Rp6112
(dp6113
g6
(lp6114
g8
(g78
g10
Ntp6115
Rp6116
(dp6117
g27
S'auto_391'
p6118
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6119
(dp6120
g33
g3628
sbsg14
Nsg40
g8
(g71
g10
Ntp6121
Rp6122
(dp6123
g6
(lp6124
g25
asg30
(itheano.gof.utils
scratchpad
p6125
(dp6126
bsg76
(lp6127
g6116
asg241
g681
sbsg41
g885
sbasg30
(itheano.gof.utils
scratchpad
p6128
(dp6129
bsg76
(lp6130
g6106
asg241
g783
sbsg41
g885
sbag8
(g78
g10
Ntp6131
Rp6132
(dp6133
g27
S'auto_394'
p6134
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6135
(dp6136
g33
(lp6137
(lp6138
(g770
I1113
g771
S'input_grads = node.op.grad(inputs, new_output_grads)'
p6139
tp6140
aasbsg14
Nsg40
g8
(g71
g10
Ntp6141
Rp6142
(dp6143
g6
(lp6144
g6106
ag8
(g96
g10
Ntp6145
Rp6146
(dp6147
g27
S'auto_393'
p6148
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6149
(dp6150
g33
g955
sbsg14
Nsg40
g8
(g71
g10
Ntp6151
Rp6152
(dp6153
g6
(lp6154
sg30
(itheano.gof.utils
scratchpad
p6155
(dp6156
bsg76
(lp6157
g6146
asg241
g969
sbsg41
g981
sbasg30
(itheano.gof.utils
scratchpad
p6158
(dp6159
bsg76
(lp6160
g6132
asg241
g993
sbsg41
g885
sbag8
(g78
g10
Ntp6161
Rp6162
(dp6163
g27
S'auto_423'
p6164
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6165
(dp6166
g33
g768
sbsg14
Nsg40
g8
(g71
g10
Ntp6167
Rp6168
(dp6169
g6
(lp6170
g8
(g78
g10
Ntp6171
Rp6172
(dp6173
g27
S'auto_422'
p6174
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6175
(dp6176
g33
g3479
sbsg14
Nsg40
g8
(g71
g10
Ntp6177
Rp6178
(dp6179
g6
(lp6180
g8
(g23
g10
Ntp6181
Rp6182
(dp6183
g27
S'auto_421'
p6184
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6185
(dp6186
g33
g3395
sbsg14
Nsg40
g8
(g71
g10
Ntp6187
Rp6188
(dp6189
g6
(lp6190
g8
(g23
g10
Ntp6191
Rp6192
(dp6193
g27
S'auto_417'
p6194
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6195
(dp6196
g33
g3350
sbsg14
Nsg40
g8
(g71
g10
Ntp6197
Rp6198
(dp6199
g6
(lp6200
g8
(g23
g10
Ntp6201
Rp6202
(dp6203
g27
S'auto_416'
p6204
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6205
(dp6206
g33
g3136
sbsg14
Nsg40
g8
(g71
g10
Ntp6207
Rp6208
(dp6209
g6
(lp6210
g8
(g23
g10
Ntp6211
Rp6212
(dp6213
g27
S'auto_398'
p6214
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6215
(dp6216
g33
g2180
sbsg14
Nsg40
g8
(g71
g10
Ntp6217
Rp6218
(dp6219
g6
(lp6220
g8
(g23
g10
Ntp6221
Rp6222
(dp6223
g27
S'auto_396'
p6224
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6225
(dp6226
g33
g2195
sbsg14
Nsg40
g8
(g71
g10
Ntp6227
Rp6228
(dp6229
g6
(lp6230
g8
(g78
g10
Ntp6231
Rp6232
(dp6233
g27
S'auto_395'
p6234
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6235
(dp6236
g33
g880
sbsg14
Nsg40
g8
(g71
g10
Ntp6237
Rp6238
(dp6239
g6
(lp6240
g6106
ag6146
asg30
(itheano.gof.utils
scratchpad
p6241
(dp6242
bsg76
(lp6243
g6232
asg241
g993
sbsg41
g885
sbasg30
(itheano.gof.utils
scratchpad
p6244
(dp6245
bsg76
(lp6246
g6222
asg241
g2205
sbsg41
g2208
sbag8
(g23
g10
Ntp6247
Rp6248
(dp6249
g27
S'auto_397'
p6250
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6251
(dp6252
g33
g2218
sbsg14
Nsg40
g8
(g71
g10
Ntp6253
Rp6254
(dp6255
g6
(lp6256
g8
(g502
g10
Ntp6257
Rp6258
(dp6259
g27
S'auto_121'
p6260
sg29
Nsg30
(itheano.gof.utils
scratchpad
p6261
(dp6262
g581
Nsbsg14
NsS'cached'
p6263
I01
sg41
g2233
sg130
g2239
sbasg30
(itheano.gof.utils
scratchpad
p6264
(dp6265
bsg76
(lp6266
g6248
asg241
g2246
sbsg41
g2253
sbasg30
(itheano.gof.utils
scratchpad
p6267
(dp6268
bsg76
(lp6269
g6212
asg241
g2261
sbsg41
g2275
sbag8
(g23
g10
Ntp6270
Rp6271
(dp6272
g27
S'auto_415'
p6273
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6274
(dp6275
g33
g3062
sbsg14
Nsg40
g8
(g71
g10
Ntp6276
Rp6277
(dp6278
g6
(lp6279
g8
(g23
g10
Ntp6280
Rp6281
(dp6282
g27
S'auto_414'
p6283
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6284
(dp6285
g33
g3016
sbsg14
Nsg40
g8
(g71
g10
Ntp6286
Rp6287
(dp6288
g6
(lp6289
g8
(g23
g10
Ntp6290
Rp6291
(dp6292
g27
S'auto_413'
p6293
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6294
(dp6295
g33
g2045
sbsg14
Nsg40
g8
(g71
g10
Ntp6296
Rp6297
(dp6298
g6
(lp6299
g8
(g23
g10
Ntp6300
Rp6301
(dp6302
g27
S'auto_412'
p6303
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6304
(dp6305
g33
g2060
sbsg14
Nsg40
g8
(g71
g10
Ntp6306
Rp6307
(dp6308
g6
(lp6309
g8
(g23
g10
Ntp6310
Rp6311
(dp6312
g27
S'auto_411'
p6313
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6314
(dp6315
g33
g2075
sbsg14
Nsg40
g8
(g71
g10
Ntp6316
Rp6317
(dp6318
g6
(lp6319
g8
(g23
g10
Ntp6320
Rp6321
(dp6322
g27
S'auto_410'
p6323
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6324
(dp6325
g33
g2090
sbsg14
Nsg40
g8
(g71
g10
Ntp6326
Rp6327
(dp6328
g6
(lp6329
g8
(g23
g10
Ntp6330
Rp6331
(dp6332
g27
S'auto_409'
p6333
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6334
(dp6335
g33
g2108
sbsg14
g2103
sg40
g8
(g71
g10
Ntp6336
Rp6337
(dp6338
g6
(lp6339
g8
(g23
g10
Ntp6340
Rp6341
(dp6342
g27
S'auto_407'
p6343
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6344
(dp6345
g33
g2123
sbsg14
Nsg40
g8
(g71
g10
Ntp6346
Rp6347
(dp6348
g6
(lp6349
g8
(g23
g10
Ntp6350
Rp6351
(dp6352
g27
S'auto_405'
p6353
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6354
(dp6355
g33
g2138
sbsg14
Nsg40
g8
(g71
g10
Ntp6356
Rp6357
(dp6358
g6
(lp6359
g8
(g23
g10
Ntp6360
Rp6361
(dp6362
g27
S'auto_403'
p6363
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6364
(dp6365
g33
g2153
sbsg14
Nsg40
g8
(g71
g10
Ntp6366
Rp6367
(dp6368
g6
(lp6369
g8
(g23
g10
Ntp6370
Rp6371
(dp6372
g27
S'auto_399'
p6373
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6374
(dp6375
g33
g2168
sbsg14
Nsg40
g8
(g71
g10
Ntp6376
Rp6377
(dp6378
g6
(lp6379
g6212
asg30
(itheano.gof.utils
scratchpad
p6380
(dp6381
bsg76
(lp6382
g6371
asg241
g2284
sbsg41
g2290
sbag8
(g23
g10
Ntp6383
Rp6384
(dp6385
g27
S'auto_402'
p6386
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6387
(dp6388
g33
g2299
sbsg14
Nsg40
g8
(g71
g10
Ntp6389
Rp6390
(dp6391
g6
(lp6392
g8
(g23
g10
Ntp6393
Rp6394
(dp6395
g27
S'auto_401'
p6396
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6397
(dp6398
g33
g420
sbsg14
Nsg40
g8
(g71
g10
Ntp6399
Rp6400
(dp6401
g6
(lp6402
g8
(g23
g10
Ntp6403
Rp6404
(dp6405
g27
S'auto_400'
p6406
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6407
(dp6408
g33
g5390
sbsg14
Nsg40
g8
(g71
g10
Ntp6409
Rp6410
(dp6411
g6
(lp6412
g6212
asg30
(itheano.gof.utils
scratchpad
p6413
(dp6414
bsg76
(lp6415
g6404
asg241
g5401
sbsg41
g5404
sbasg30
(itheano.gof.utils
scratchpad
p6416
(dp6417
bsg76
(lp6418
g6394
asg241
g644
sbsg41
g672
sbag8
(g191
g10
Ntp6419
Rp6420
(dp6421
g27
S'auto_132'
p6422
sg29
Nsg30
(itheano.gof.utils
scratchpad
p6423
(dp6424
bsg14
Nsg41
g197
sg130
g205
(g208
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p6425
tp6426
Rp6427
sbasg30
(itheano.gof.utils
scratchpad
p6428
(dp6429
bsg76
(lp6430
g6384
asg241
g2310
sbsg41
g2314
sbasg30
(itheano.gof.utils
scratchpad
p6431
(dp6432
bsg76
(lp6433
g6361
asg241
g2321
sbsg41
g2330
sbag8
(g23
g10
Ntp6434
Rp6435
(dp6436
g27
S'auto_404'
p6437
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6438
(dp6439
g33
g2339
sbsg14
Nsg40
g8
(g71
g10
Ntp6440
Rp6441
(dp6442
g6
(lp6443
g6394
ag8
(g191
g10
Ntp6444
Rp6445
(dp6446
g27
S'auto_138'
p6447
sg29
Nsg30
(itheano.gof.utils
scratchpad
p6448
(dp6449
bsg14
Nsg41
g197
sg130
g205
(g208
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p6450
tp6451
Rp6452
sbasg30
(itheano.gof.utils
scratchpad
p6453
(dp6454
bsg76
(lp6455
g6435
asg241
g2349
sbsg41
g2353
sbasg30
(itheano.gof.utils
scratchpad
p6456
(dp6457
bsg76
(lp6458
g6351
asg241
g2321
sbsg41
g2360
sbag8
(g23
g10
Ntp6459
Rp6460
(dp6461
g27
S'auto_406'
p6462
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6463
(dp6464
g33
g2369
sbsg14
Nsg40
g8
(g71
g10
Ntp6465
Rp6466
(dp6467
g6
(lp6468
g6394
ag8
(g191
g10
Ntp6469
Rp6470
(dp6471
g27
S'auto_144'
p6472
sg29
Nsg30
(itheano.gof.utils
scratchpad
p6473
(dp6474
bsg14
Nsg41
g197
sg130
g205
(g208
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p6475
tp6476
Rp6477
sbasg30
(itheano.gof.utils
scratchpad
p6478
(dp6479
bsg76
(lp6480
g6460
asg241
g2379
sbsg41
g2383
sbasg30
(itheano.gof.utils
scratchpad
p6481
(dp6482
bsg76
(lp6483
g6341
asg241
g2321
sbsg41
g2390
sbag8
(g23
g10
Ntp6484
Rp6485
(dp6486
g27
S'auto_408'
p6487
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6488
(dp6489
g33
g2399
sbsg14
Nsg40
g8
(g71
g10
Ntp6490
Rp6491
(dp6492
g6
(lp6493
g6394
ag8
(g191
g10
Ntp6494
Rp6495
(dp6496
g27
S'auto_150'
p6497
sg29
Nsg30
(itheano.gof.utils
scratchpad
p6498
(dp6499
bsg14
Nsg41
g197
sg130
g205
(g208
S'\x03\x00\x00\x00\x00\x00\x00\x00'
p6500
tp6501
Rp6502
sbasg30
(itheano.gof.utils
scratchpad
p6503
(dp6504
bsg76
(lp6505
g6485
asg241
g2409
sbsg41
g2413
sbasg30
(itheano.gof.utils
scratchpad
p6506
(dp6507
bsg76
(lp6508
g6331
asg241
g2321
sbsg41
g2420
sbag8
(g502
g10
Ntp6509
Rp6510
(dp6511
g27
S'auto_156'
p6512
sg29
Nsg30
(itheano.gof.utils
scratchpad
p6513
(dp6514
g581
Nsbsg14
Nsg6263
I01
sg41
g2429
sg130
g2435
sbasg30
(itheano.gof.utils
scratchpad
p6515
(dp6516
bsg76
(lp6517
g6321
asg241
g2443
sbsg41
g2459
sbag6485
asg30
(itheano.gof.utils
scratchpad
p6518
(dp6519
bsg76
(lp6520
g6311
asg241
g2466
sbsg41
g2471
sbag6460
asg30
(itheano.gof.utils
scratchpad
p6521
(dp6522
bsg76
(lp6523
g6301
asg241
g2478
sbsg41
g2483
sbag6435
asg30
(itheano.gof.utils
scratchpad
p6524
(dp6525
bsg76
(lp6526
g6291
asg241
g2490
sbsg41
g2495
sbag6384
asg30
(itheano.gof.utils
scratchpad
p6527
(dp6528
bsg76
(lp6529
g6281
asg241
g3029
sbsg41
g3034
sbasg30
(itheano.gof.utils
scratchpad
p6530
(dp6531
bsg76
(lp6532
g6271
asg241
g3075
sbsg41
g3082
sbasg30
(itheano.gof.utils
scratchpad
p6533
(dp6534
bsg76
(lp6535
g6202
asg241
g3149
sbsg41
g3154
sbag6248
asg30
(itheano.gof.utils
scratchpad
p6536
(dp6537
bsg76
(lp6538
g6192
asg241
g3360
sbsg41
g3365
sbag8
(g23
g10
Ntp6539
Rp6540
(dp6541
g27
S'auto_420'
p6542
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6543
(dp6544
g33
g3410
sbsg14
Nsg40
g8
(g71
g10
Ntp6545
Rp6546
(dp6547
g6
(lp6548
g6222
ag8
(g23
g10
Ntp6549
Rp6550
(dp6551
g27
S'auto_419'
p6552
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6553
(dp6554
g33
g3601
sbsg14
Nsg40
g8
(g71
g10
Ntp6555
Rp6556
(dp6557
g6
(lp6558
g6248
ag8
(g23
g10
Ntp6559
Rp6560
(dp6561
g27
S'auto_418'
p6562
sg29
I0
sg30
(itheano.gof.utils
scratchpad
p6563
(dp6564
g33
g3278
sbsg14
Nsg40
g8
(g71
g10
Ntp6565
Rp6566
(dp6567
g6
(lp6568
g8
(g502
g10
Ntp6569
Rp6570
(dp6571
g27
S'auto_331'
p6572
sg29
Nsg30
(itheano.gof.utils
scratchpad
p6573
(dp6574
g581
Nsbsg14
Nsg6263
I01
sg41
g2614
sg130
g2620
sbasg30
(itheano.gof.utils
scratchpad
p6575
(dp6576
bsg76
(lp6577
g6560
asg241
g3288
sbsg41
g3295
sbasg30
(itheano.gof.utils
scratchpad
p6578
(dp6579
bsg76
(lp6580
g6550
asg241
g3611
sbsg41
g3616
sbasg30
(itheano.gof.utils
scratchpad
p6581
(dp6582
bsg76
(lp6583
g6540
asg241
g3435
sbsg41
g3440
sbasg30
(itheano.gof.utils
scratchpad
p6584
(dp6585
bsg76
(lp6586
g6182
asg241
g3448
sbsg41
g3453
sbasg30
(itheano.gof.utils
scratchpad
p6587
(dp6588
bsg76
(lp6589
g6172
asg241
g681
sbsg41
g775
sbasg30
(itheano.gof.utils
scratchpad
p6590
(dp6591
bsg76
(lp6592
g6162
asg241
g783
sbsg41
g775
sbag6146
asg30
(itheano.gof.utils
scratchpad
p6593
(dp6594
bsg76
(lp6595
g6096
asg241
g936
sbsg41
g885
sbasg30
(itheano.gof.utils
scratchpad
p6596
(dp6597
bsg76
(lp6598
g6086
asg241
g921
sbsg41
g913
sbsg18
I00
sbsS'on_unused_input'
p6599
NsS'accept_inplace'
p6600
I00
sg977
g8
(ctheano.compile.mode
Mode
p6601
g10
Ntp6602
Rp6603
(S'cvm'
p6604
g8
(ctheano.gof.optdb
Query
p6605
g10
Ntp6606
Rp6607
(dp6608
g14
S'OPT_FAST_RUN'
p6609
sS'require'
p6610
g8
(g1096
g10
Ntp6611
Rp6612
(dp6613
g1100
g8
(g1101
g10
Ntp6614
Rp6615
(lp6616
g6615
ag6615
absg1108
(dp6617
sbsS'subquery'
p6618
(dp6619
sS'position_cutoff'
p6620
NsS'exclude'
p6621
g8
(g1096
g10
Ntp6622
Rp6623
(dp6624
g1100
g8
(g1101
g10
Ntp6625
Rp6626
(lp6627
g6626
ag6626
absg1108
(dp6628
sbsS'include'
p6629
g8
(g1096
g10
Ntp6630
Rp6631
(dp6632
g1100
g8
(g1101
g10
Ntp6633
Rp6634
(lp6635
g8
(g1101
g10
Ntp6636
Rp6637
(lp6638
g6634
ag6634
aS'fast_run'
p6639
abag6637
absg1108
(dp6640
g6639
g6637
ssbsS'extra_optimizations'
p6641
(lp6642
sbtp6643
bstp6644
Rp6645
(lp6646
g8
(ctheano.gof.link
Container
p6647
g10
Ntp6648
Rp6649
(dp6650
S'provided'
p6651
I0
sg14
g15
sS'required'
p6652
I01
sS'storage'
p6653
(lp6654
Nasg20
I00
sg19
I00
sS'readonly'
p6655
I00
sg41
g44
sg59
Nsba(lp6656
Natp6657
Rp6658
.