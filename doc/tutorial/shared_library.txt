
Compiling and Using Theano Functions as Shared Libraries
========================================================

..note:

  This functionality is experimental. Not every feature works and 
  some may break in unexpected ways or behave differently.

..note:
  
  Scan does not work with this functionality

This functionality was only tested on CPU code on a Linux machine.

Every node of a function that you want to use as a shared library must
have a C implementation.
 
To compile a function as shared library, you must use CLinker with the
parameter c_callable=True::

 linker = theano.gof.CLinker(c_callable=True)	
 mode = theano.Mode(linker=linker)
 f = theano.function(inputs, outputs , mode=mode)

Theano compiles the function as a C++ class with variables mapped to internal
variables. To run the function you initialize the class calling the cinit
function, then pass the values of inputs variables as numpy arrays and call the
run method. If there are no errors you can get the outputs values from the 
C++ class members.
The C++ class members must be set and get using the PyList_SetItem and
PyList_GET_ITEM respectively.
Then this C++ class is compiled as shared library.

The shared library is built in a  specific temporary directory, in the Theano 
cache directory. The name of the directory is stored in the filename 
property of the function::

 f.fn.filename

In this directory you will find the .so library, the header file,
a makefile and an exe.cpp which can be used as template
to build your application. There is also
a exec.h in which you find the command used to build the library.
If the function uses shared variables you also find, in this directory,
files with shared variables values in numpy file format (\*.npy).
The names of these files are the names of C++ class internal variables
corresponding to the shared variables.

Let's walk through an example to see how to use the shared library. In the
directory doc/tutorial/ you find a example file shared_library_function_example.py

Build the shared library for the function in shared_library_function_example.py::

 python shared_library_function_example.py

The outputs show you where Theano puts the library. To see if everything
works correctly go in that directory and use make file 
to build the executable::

 make exec

and then launch it. 
You should get::

 After import numpy (hexvalue)
 after import_array1()
 after cinit()
 run() from the shared library returned=0
 [[  0.   2.   4.   6.]
 [  8.  10.  12.  14.]
 [ 16.  18.  20.  22.]]
 [ 32.  38.  44.  50.]
 main end, before Py_Finalize

..note:

  In general case, the program can give some errors for generic
  functions because it makes some assumptions on the data the can be wrong. 
  Take it as a simple template. 

In the exec.cpp file you will find after the includes a comment with the
mapping between theano inputs, shared variables, outputs and C++ class members.
In program main function, Python is initialized and numpy is imported. 
Then the theano library is initialized with a call to cinit(). 
After that, program loads shared varibales from their files
and then, in this example program, there is the definition of 
a numpy array and itis set as function input.
Then the runmethod is called and the outputs values are returned 
if there are no errors.

One thing you can do to better understand how the code work is to change the
input and shared variable values. As an example you 
can delete from line 49 to 57 and substitute them with::

 npy_intp dims[2]={2,5};
 PyObject* V7=PyArray_SimpleNew(2,dims,NPY_FLOAT64);
 npy_float64 *V7_ptr =(npy_float64 *)PyArray_DATA((PyArrayObject*)V7);
 for(int i=0; i<10; i++)
      V7_ptr[i]=i;
 
Now x is a 2x5 matrix with all entries equal to one.
To change the values of the shared variable, lauch a python shell and execute
the following code::

 import numpy as np
 np.save('storage_V13.npy',np.array([1,2],dtype='float64'))

Now you can recompile exec with::

 make exec

There are differents way to intialize function inputs with yours values, using numpy C api (http://docs.scipy.org/doc/numpy/reference/c-api.html) or using something like BoostNumpy (https://github.com/ndarray/Boost.NumPy).
