.. _install_gpu:

GPU Installation Instructions
#############################

The first thing you'll need for Theano to use your GPU is Nvidia's
GPU-programming toolchain. You should install at least the CUDA driver and the CUDA Toolkit, as
`described here <https://developer.nvidia.com/cuda-toolkit>`_.  The CUDA
Toolkit installs a folder on your computer with subfolders *bin*, *lib*,
*include*, and some more too.  (Sanity check: The *bin* subfolder should contain an *nvcc*
program which is the compiler for GPU code.)  This folder is called the *cuda
root* directory.
You must also add the 'lib' subdirectory (and/or 'lib64' subdirectory if you have a 64-bit Linux
computer) to your ``$LD_LIBRARY_PATH`` environment variable.

You must then tell Theano where the CUDA root folder is, and there are three ways
to do it.
Any one of them is enough.

* Define a $CUDA_ROOT environment variable to equal the cuda root directory, as in ``CUDA_ROOT=/path/to/cuda/root``, or
* add a ``cuda.root`` flag to :envvar:`THEANO_FLAGS`, as in ``THEANO_FLAGS='cuda.root=/path/to/cuda/root'``, or
* add a [cuda] section to your .theanorc file containing the option ``root = /path/to/cuda/root``.

.. note::

    On Debian, you can ask the software package manager to install it
    for you. We have a user report that this works for Debian Wheezy
    (7.0). When you install it this way, you won't always have the
    latest version, but we were told that it gets updated
    regularly. One big advantage is that it will be updated
    automatically. You can try the ``sudo apt-get install
    nvidia-cuda-toolkit`` command to install it.

    `debian`_

Once that is done, the only thing left is to change the ``device`` option to name the GPU device in your
computer, and set the default floating point computations to float32.
For example: ``THEANO_FLAGS='cuda.root=/path/to/cuda/root,device=gpu,floatX=float32'``.
You can also set these options in the .theanorc file's ``[global]`` section:

     .. code-block:: cfg

        [global]
        device = gpu
        floatX = float32

.. note::

    * If your computer has multiple GPUs and you use 'device=gpu', the driver
      selects the one to use (usually gpu0).
    * You can use the program nvida-smi to change this policy.
    * You can choose one specific GPU by specifying 'device=gpuX', with X the
      the corresponding GPU index (0, 1, 2, ...)
    * By default, when ``device`` indicates preference for GPU computations,
      Theano will fall back to the CPU if there is a problem with the GPU.
      You can use the flag 'force_device=True' to instead raise an error when
      Theano cannot use the GPU.

.. attention::

    For MacOS you should be able to follow the above instructions to
    setup CUDA, but be aware of the following caveats:

       * If you want to compile the CUDA SDK code, you may need to temporarily
         revert back to Apple's gcc (``sudo port select gcc``) as their Makefiles
         are not compatible with MacPort's gcc.

       * If CUDA seems unable to find a CUDA-capable GPU, you may need to manually
         toggle your GPU on, which can be done with
         `gfxCardStatus <http://codykrieger.com/gfxCardStatus>`__.

Once your setup is complete, head to :ref:`using_gpu` to find how to verify
everything is working properly.

.. _debian:

Debian-variant with software package manager
--------------------------------------------

Ubuntu 11.10/12.04 (probably work on 11.04 too):

.. code-block:: bash

   sudo apt-add-repository ppa:ubuntu-x-swat/x-updates
   sudo apt-get update
   sudo apt-get install nvidia-current

Then you need to fetch latest CUDA tool kit (download ubuntu 11.04 32/64bit package)
from `here <http://developer.nvidia.com/cuda-downloads>`_.

Ubuntu 14.04:

.. code-block:: bash

   sudo apt-get install nvidia-current
   sudo apt-get install nvidia-cuda-toolkit # As of October 31th, 2014, provide cuda 5.5, not the latest cuda 6.5

If you want cuda 6.5, you can download packages from `nvidia
<http://developer.nvidia.com/cuda-downloads>`_ for Ubuntu 14.04.

If you downloaded the `run` package (the only one available for CUDA 5.0 and older), you install it like this:

.. code-block:: bash

   chmod a+x XXX.sh
   sudo ./XXX.sh

Since CUDA 5.5, Nvidia provide a DEB package. If you don't know how to
intall it, just double click on it from the graphical interface. It
should ask if you want to install it. On Ubuntu 14.04, you need to run
this in your terminal:

.. code-block:: bash

    sudo apt-get update
    sudo apt-get install cuda

You must reboot the computer after the driver installation. To test
that it was loaded correctly after the reboot, run the command
`nvidia-smi` from the command line.

You probably need to change the default version of gcc as
`explained by Benjamin J. McCann <http://www.benmccann.com/blog/installing-cuda-and-theano/>`_ if the package you downloaded is for another Ubuntu version:

.. code-block:: bash

    sudo apt-get install nvidia-cuda-toolkit g++-4.4 gcc-4.4
    # On Ubuntu 11.10 and 12.04, you probably need to change gcc-4.5 to gcc-4.6 on the next line.
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.5 40 --slave /usr/bin/g++ g++ /usr/bin/g++-4.5
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.4 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.4
    sudo update-alternatives --config gcc
